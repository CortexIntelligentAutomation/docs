































































































































































































































































































































































































































[{"body":"","categories":"","description":"Product documentation for the Cortex Evolution automation platform, including guides, tutorials and reference documentation.","excerpt":"Product documentation for the Cortex Evolution automation platform, including guides, tutorials and reference documentation.","ref":"/docs/","tags":"","title":"Cortex Evolution - v2022.5"},{"body":"TODO:\n  Blocks\n Action Blocks Workspace Blocks Decision Blocks Exception Blocks Looping Blocks Termination Blocks Trigger Blocks    Block Properties\n Input Property InputOutput Property Output Property    Data Types\n  Objects\n  Equality\n  Casting\n  Literals\n  Variables\n Discard Variable    Expressions\n  Object\n  dynamic\n  Generics\n  Reference Types\n Null    Value Types\n Nullable Value Types    Converting Objects To Text\n  ","categories":"","description":"Fundamental concepts when working with Cortex Evolution.","excerpt":"Fundamental concepts when working with Cortex Evolution.","ref":"/docs/reference/concepts/fundamentals/","tags":"","title":"Fundamental Concepts"},{"body":"","categories":"","description":"This page describes the concept of a Variable","excerpt":"This page describes the concept of a Variable","ref":"/docs/reference/concepts/fundamentals/variables/what-is-a-variable/","tags":"","title":"What is a Variable?"},{"body":"","categories":"","description":"This page describes the concept of an Exception","excerpt":"This page describes the concept of an Exception","ref":"/docs/reference/concepts/fundamentals/exceptions/what-is-an-exception/","tags":"","title":"What is an Exception?"},{"body":"","categories":"","description":"Discover what's new in the Cortex Evolution platform.","excerpt":"Discover what's new in the Cortex Evolution platform.","ref":"/docs/whats-new/","tags":"","title":"What's New?"},{"body":"","categories":"","description":"Information related to working with Exceptions.","excerpt":"Information related to working with Exceptions.","ref":"/docs/reference/concepts/fundamentals/exceptions/","tags":"","title":"Working with Exceptions"},{"body":"","categories":"","description":"This page provides guidance and best practices around handling block and flow exceptions.","excerpt":"This page provides guidance and best practices around handling block and flow exceptions.","ref":"/docs/reference/concepts/fundamentals/exceptions/handling-exceptions/","tags":"","title":"Handling Exceptions"},{"body":"What is Cortex Evolution? Low-code automation Cortex Evolution is a low-code, automation and orchestration platform, that enables organisations to graphically capture and automate anything from simple tasks, to interactive workflows, to complex IT and business processes that span the entire organisation.\nEnterprise-grade Evolved from process and control engineering for mission-critical environments, Cortex Evolution provides enterprise-grade functionality to cover the full automation lifecycle; enabling rapid delivery of automation on-premise or in the cloud, from inception to production, without the need for software development experience.\nBuilt for everyone Our vision is a world where everyone can automate, and Cortex Evolution is being built for everyone, not just software developers, with the goal of removing barriers to entry and putting your people at the heart of your automation.\nComprehensive functionality With a comprehensive set of functionality and interfaces with 3rd party systems available out-of-the-box, it’s quick and easy to get started on your automation journey.\nWhat can it do? Deliver quickly Using Cortex Evolution, [global organisations][Customers] have been able to increase their capacity, velocity, quality, efficiency, agility and transform their business and IT operations in months.\nAcross multiple sectors, industries and markets Cortex Evolution has been deployed in small, medium and large enterprises from different [sectors, industries and markets][Sectors], including:\n Telecommunication services IT services Banking, Financial Services and Insurance Chemicals Paper and Forest products Food products Government Media  For diverse sets of use cases Cortex Evolution has been deployed for a diverse set of [use cases][UseCases], including:\n Lights out monitoring and management of fixed-line telephony networks Data center provisioning Patching of servers IT service diagnostics Swivel chair operations Employee onboarding and offboarding Animal welfare compliance checks  Resulting in successful outcomes Cortex Evolution has resulted in many successful [outcomes][], including:\n Increased revenue Increased profit Redeployment of skilled employees Reduction in MTTR Reduction in average handling time  Accelerate your digital transformation Wherever you are on your automation journey and whatever you are trying to achieve, small or large, simple or complex, Cortex Evolution can help accelerate a successful transformation of your operations.\nHow do I get started?          Getting Started Install Cortex Evolution and start your automation journey today.   Guides Learn how to use the various components that make up the Cortex Evolution platform.   Tutorials Explore all of the tutorials for the Cortex Evolution platform.   Reference Browse through the reference documentation, including details about APIs, blocks, data types, exceptions.   FAQs Find the answers to your questions.   Videos View a range of videos about the Cortex Evolution platform, automation, strategies and methodologies, as well as industry specific content.   Webinars Watch a selection of automation related webinars.   Engage With Us Let us help you to get started by participating in one of our enablement pathway programs:    1. Kickstarter - Free two/three day workshop that enables the rapid configuration of a cloud-based Cortex Evolution platform to prototype, and demonstrate automation in context.    2. Design Sprint - A two week formalised approach to automation based on our 300+ man years of knowledge and experience. Facilitated by Cortex, the Automation Design Sprint works through the required stages of automation, from vision and objectives to prototype and feedback.    3. Launch Program - A twelve week program which takes your team through the phases of mobilisation, design of automation, trial testing and sign-off to production.    4. Acceleration Program - A three, six or nine month program that delivers the framework for organisations to effectively and efficiently accelerate their team in the design, development, and delivery of automation using the Cortex Evolution platform.     TODO: Training TODO: Pricing TODO: Pre-packaged solutions TODO: Community content  TODO: Include embedded video to what cortex evolution is and what it can do\n","categories":"","description":"Find out what the Cortex Evolution platform is, what it can do, and how you can get started?","excerpt":"Find out what the Cortex Evolution platform is, what it can do, and how you can get started?","ref":"/docs/overview/","tags":"","title":"Overview"},{"body":"","categories":"","description":"Get up and running with the Cortex Evolution platform in minutes.","excerpt":"Get up and running with the Cortex Evolution platform in minutes.","ref":"/docs/getting-started/","tags":"","title":"Getting Started"},{"body":"","categories":"","description":"This page provides guidance on how to throw custom exceptions","excerpt":"This page provides guidance on how to throw custom exceptions","ref":"/docs/reference/concepts/fundamentals/exceptions/throwing-exceptions/","tags":"","title":"Throwing Exceptions"},{"body":"","categories":"","description":"This page provides guidance on how to discard exceptions","excerpt":"This page provides guidance on how to discard exceptions","ref":"/docs/reference/concepts/fundamentals/exceptions/discarding-exceptions/","tags":"","title":"Discarding Exceptions"},{"body":"","categories":"","description":"This page looks at the related blocks used for exception handling","excerpt":"This page looks at the related blocks used for exception handling","ref":"/docs/reference/concepts/fundamentals/exceptions/related-blocks/","tags":"","title":"Related Blocks"},{"body":"","categories":"","description":"This page looks at the related data types used in exception handling","excerpt":"This page looks at the related data types used in exception handling","ref":"/docs/reference/concepts/fundamentals/exceptions/related-data-types/","tags":"","title":"Related Data Types"},{"body":"A-E Terms, words and phrases beginning with the letters A through E.\nA Acceleration Program TODO add link to urls.toml\nSee https://resources.cortex-ia.com/download-cortex-intelligent-automation-acceleration-program\nAgility TODO: Probably remove\nAPI An API (Application Programming Interface) is a set of functions that allows applications to access data from and interact with external systems, services or applications.\nAutomate The application of automation.\nAutomation Automation is a term for techniques, methods, systems or technologies that reduce human intervention in tasks and processes.\nAutomation Lifecyle TODO: Probably remove\nB Bit A bit is the most basic unit of information in computing, and represents a logical state with one of two possible values; most commonly represented as 1 or 0.\nSee Wikipedia for more information.\nBlock Blocks (or functional blocks) expose the logic and actions that the Cortex Evolution platform is able to execute for the flow developers; alongside flows they are one of the main components used to define how to automate tasks and processes.\nFor more detailed information about blocks, see [Guides-\u003eCortex Studio-\u003eBlocks][TODO].\nFor a complete list of available blocks deployed with the platform, see Reference-\u003eBlocks.\nBlock Property Blocks have block properties (or properties) that allow the flow developers to configure how the block should behave; e.g. a block to send emails would have properties for specifying things like the sender, recipients, summary, body, attachments etc.\nFor more detailed information about configuring blocks using block properties, see [Guides-\u003eCortex Studio-\u003eBlocks-\u003eConfiguring Blocks][TODO].\nByte A byte is a unit of information in computing that most commonly consists of eight bits.\nSee Wikipedia for more information.\nC C# C# (pronounced “see sharp”) is a programming language developed by Microsoft.\nIt is natively supported by the Cortex Evolution platform for using simple expressions (i.e. 1 + 1) and more complex code (i.e. DateTime.Now.AddDays(1)) within flows.\nC# expressions and code can be entered as the values for block properties using the Cortex Studio expression editor.\nSee the official C# documentation for more information about C#.\ncamelCase camelCase is a typographical convention in which phrases are written without spaces or punctuation, indicating the separation of words with a single capitalized letter, and the first word starting with a lowercase letter. E.g. “iPhone” and “eBay”.\ncamelCase is often used as a naming convention in programming languages such as C#.\nSee also PascalCase.\nCase-insensitive If something is case-insensitive, it means it ignores differences in case (i.e. CASE is considered equal to case).\nCase-sensitive If something is case-sensitive, it means it considers differences in case (i.e. CASE is considered not equal to case).\nCast The process of explicitly converting one data type to another.\nSee Casting and type conversions (C# Programming Guide) for a detailed technical explanation of casting in C#, the programming language natively supported by the Cortex Evolution platform for writing simple expressions and more complex code.\nAlso see Explicit Cast for more information.\nCloud A global network of servers which are linked together and operate as a single ecosystem.\nExamples of publically available Cloud providers include:\n Amazon AWS Google Cloud Platform Microsoft Azure  Code A set of instructions in a computer program.\nConcurrent At the same time.\nConvert To change something into a different form. E.g. Change some text from lowercase to UPPERCASE.\nCortex Evolution The name of the new and current generation of the Cortex automation platform.\nCortex Gateway The centralised web-based portal for accessing all user applications and tooling in the Cortex Evolution platform.\nCortex Studio The web-based integrated development environment (IDE) for creating, editing, debugging, testing and managing flows that define the logic and actions required to capture and automate a task or process.\nFor more detailed information about Cortex Studio, see [Guides-\u003eCortex Studio][TODO].\nCulture Describes a set of rules for data that differs between different cultures; it determines the default format for dates, times, numbers, currency values, the sorting order of text, casing conventions, and text comparisons.\nTODO: In .Net details about culture are represented by the cultureinfo data type…https://docs.microsoft.com/en-us/dotnet/api/system.globalization.cultureinfo?view=net-5.0\nCulture identifier A culture identifier is a standard international numeric abbreviation and has the components necessary to uniquely identify one of the operating system’s installed cultures.\nTODO: For more information about culture identifiers see…https://docs.microsoft.com/en-us/dotnet/api/system.globalization.cultureinfo?view=net-5.0#culture-names-and-identifiers\nCulture-insensitive If something is culture-insensitive, it means that it does not get affected by culture related changes to the operating system, such as language and regional settings.\nCulture-sensitive If something is culture-sensitive, it means that it does get affected by culture related changes to the operating system, such as language and regional settings.\nCurrent Culture The current culture used by the executing thread; it determines the default format for dates, times, numbers, currency values, the sorting order of text, casing conventions, and string comparisons.\nTODO: In .Net details about the current culture are represented by the cultureinfo data type…https://docs.microsoft.com/en-us/dotnet/api/system.globalization.cultureinfo.currentculture?view=net-5.0\nD Data Type A data type (or type) defines the type of data or values that a block property can accept.\nFor more detailed information about data types, see Reference-\u003eData Types.\nDebug The ability for flow developers to execute and interact with a flow step-by-step from within Cortex Studio, so that they are able to identify and remove errors in the flow’s logic and actions.\nFor more detailed information about debugging in Cortex Studio, see [Guides-\u003eCortex Studio-\u003eDebugging][TODO].\nDefault Value The default that is assigned as the value of a block property when a new block is added to a flow.\nDeploy TODO\nDeployment TODO\nDesign Sprint TODO add link to urls.toml\nSee https://resources.cortex-ia.com/download-cortex-intelligent-automation-design-sprint\nDiagnostics TODO Probably remove\nDictionary A data type that represents an unordered collection of key-item pairs, where each pair consists of a unique key and its associated item. Dictionaries are optimised for fast lookup of items using their key.\nFor more detailed information about dictionaries, see [Reference-\u003eData Types-\u003eDictionaries][TODO].\nDigital Transformation TODO\ndynamic A data type that indicates that any data type can be used.\nFor more detailed information about the dynamic data type, see [Reference-\u003eData Types-\u003edynamic][TODO].\nE Efficiency TODO Probably remove\nEmpty Empty indicates that a data type has been initialised and has a non-null value, but the value does not contain any data. E.g. a string that contains no characters \"\", or a list that contains no items [].\nEmpty is not the same as null.\nEnterprise-grade TODO\nError Something which is inaccurate or incorrect; a mistake.\nExample An example is intended to show flow developers how something works. Examples can be found near the top of every block’s help page. See examples for the Add Text At Beginning block.\nException An exception represents errors that occur during the execution of a flow.\nExceptions are data types that can be reasoned with during the execution of a flow, in order to handle errors during the automation of a task or process.\nFor a complete list of available blocks that can be used to handle exceptions, see Exception Blocks.\nFor more detailed information about exceptions, see Reference-\u003eExceptions.\nExecution When a request to start a flow is received by the Cortex Evolution platform, an execution is created that represents that instance of the executing flow.\nThere can be multiple executions of a flow running concurrently.\nFor more detailed information about executions, see [Guides-\u003eCortex Studio-\u003eDebugging-\u003eExecutions][TODO].\nExplicit Cast Sometimes, in order to convert one data type to another, an “explicit cast” expression is required; this is typically needed when information might be lost in the conversion, or when the conversion might not succeed for other reasons.\nAn example would be converting a 32-bit integer (Int32) to a 16-bit integer (Int16):\nInt32 ThirtyTwoBitInteger = 100; Int16 SixteenBitInteger = (Int16)ThirtyTwoBitInteger; See Cast expression (C# Reference) for a detailed technical explanation.\nAlso see Cast for more information.\nExpression An expression is a combination of operands (i.e. variables, literals, calls to methods and properties exposed on data types etc.) and operators (i.e. =, +, -, *, / etc.) that can be evaluated by the Cortex Evolution platform to a single value.\nExpressions use the syntax of the C# programming language.\nFor more detailed information about expressions, see [Guides-\u003eCortex Studio-\u003eExpressions][TODO].\nExpression Editor The Expression Editor is a web-based text editor that allows flow developers to use either simple expression or more complex code as the value of a block property.\nIt is based on the Monaco Editor used by VS Code, and includes a rich set of features including:\n [Syntax Highlighting][TODO] [Snippets][TODO] [Intellisense][TODO]  For more detailed information about the Expression Editor, see [Guides-\u003eCortex Studio-\u003eExpression Editor][TODO].\n","categories":"","description":"Terms, words and phrases beginning with the letters A through E.","excerpt":"Terms, words and phrases beginning with the letters A through E.","ref":"/docs/reference/glossary/a-e/","tags":"","title":"A-E"},{"body":"\r\r#td-cover-block-0 {\rbackground-image: url(/about/featured-background_hu376e1fbab6ce6c455a2b3aa5c258c0d9_496231_960x540_fill_q75_catmullrom_bottom.jpg); }\r@media only screen and (min-width: 1200px) {\r#td-cover-block-0 {\rbackground-image: url(/about/featured-background_hu376e1fbab6ce6c455a2b3aa5c258c0d9_496231_1920x1080_fill_q75_catmullrom_bottom.jpg); }\r}\r\rAbout\r\r\r\r\r\r\r\r\r\r\rCortex Limited\nKings Park House,\n22 Kings Park Road,\nSouthampton,\nSO15 2AT\n\r\r\r\rT +44 23 8254 8990\nE info@cortex-ia.com\nwww.cortex-ia.com\n\r\r\r\rStatus: RELEASE\nRelease Date: 24/04/2020\nDocument Version: 1.0.0\nSoftware Version: 7.1-RC.2020.2.2\n\r\r\r\r","categories":"","description":"","excerpt":"\r\r#td-cover-block-0 {\rbackground-image: url(/about/featured-background_hu376e1fbab6ce6c455a2b3aa5c258c0d9_496231_960x540_fill_q75_catmullrom_bottom.jpg); }\r@media only screen and (min-width: 1200px) { …","ref":"/about/","tags":"","title":"About"},{"body":"","categories":"","description":"This section includes all reference documentation for APIs.","excerpt":"This section includes all reference documentation for APIs.","ref":"/docs/reference/apis/","tags":"","title":"APIs"},{"body":"","categories":"","description":"This section includes all reference documentation for functional blocks.","excerpt":"This section includes all reference documentation for functional blocks.","ref":"/docs/reference/blocks/","tags":"","title":"Blocks"},{"body":"","categories":"","description":"This section includes all reference documentation for data types.","excerpt":"This section includes all reference documentation for data types.","ref":"/docs/reference/data-types/","tags":"","title":"Data Types"},{"body":"","categories":"","description":"This section includes all reference documentation for exceptions.","excerpt":"This section includes all reference documentation for exceptions.","ref":"/docs/reference/exceptions/","tags":"","title":"Exceptions"},{"body":"","categories":"","description":"This section includes all guides for the Cortex Evolution platform.","excerpt":"This section includes all guides for the Cortex Evolution platform.","ref":"/docs/guides/","tags":"","title":"Guides"},{"body":"","categories":"","description":"This page looks at help links within exception messages","excerpt":"This page looks at help links within exception messages","ref":"/docs/reference/concepts/fundamentals/exceptions/help-links/","tags":"","title":"Help Links"},{"body":"","categories":"","description":"This section includes tutorials about installing the Cortex Evolution platform.","excerpt":"This section includes tutorials about installing the Cortex Evolution platform.","ref":"/docs/tutorials/installation/","tags":"","title":"Installation"},{"body":"Data Types A data type specifies the type and size of variable values.\nThe most commonly used data types are categorised and listed below:\n   Category Data Type Size Description     All Object Varies Any data type can be used where an Object data type is required. Once a variable contains an object data type, if it needs to be used as its original data type it must be cast back to that data type (e.g. (Int32)ObjectVariableContainingAnInteger).    dynamic Varies Any data type can be used where a dynamic data type is required. dynamic is similar to object, except no cast is needed to use the variable as its original data type.   Collections IEnumerable\u003cT\u003e Varies depending on the number of items it contains Any data type representing a collection of items that can iterated or looped over. T indicates the data type of the items contained in the collection. List\u003cT\u003e is the most common example.    IList\u003cT\u003e Varies depending on the number of items it contains Any data type representing a list of items where each item can be individually accessed by its index in the list. T indicates the data type of the items contained in the list. List\u003cT\u003e is the most common example.    List\u003cT\u003e Varies depending on the number of items it contains A list of items. T indicates the data type of the items contained in the list.    IDictionary\u003cK, V\u003e Varies depending on the number of items it contains Any data type representing a dictionary containing items which can be accessed by a key. K indicates the data type of the key used to access the items contained in the dictionary, and V indicates the data type of the item’s value.    Dictionary\u003cK, V\u003e Varies depending on the number of items it contains A dictionary of items. K indicates the data type of the key used to access the items contained in the dictionary, and V indicates the data type of the item’s value.    Structure Varies depending on the number of items it contains TODO   Conditional Logic Boolean 1 bit A logical value of true or false   Databases DataTable Varies depending on number of items it contains TODO   Dates \u0026 Time DateTimeOffset Varies (typically 12 to 16 bytes) A value representing a date and time between 00:00:00.0000000 UTC, January 1, 0001 and 23:59:59.9999999 UTC, December 31, 9999, in the Gregorian calendar, along with a UTC time offset    DateTime Varies (typically 8 bytes) A value representing a date and time between 00:00:00.0000000 UTC, January 1, 0001 and 23:59:59.9999999 UTC, December 31, 9999, in the Gregorian calendar. It can be used wherever a DateTimeOffset is expected, and wll be converted to a DateTimeOffset automatically.    TimePeriod  A value representing a time interval (duration of time or elapsed time) that is measured as a positive or negative number of years, months, days, hours, minutes, seconds, and milliseconds.    TimeSpan  A value representing a time interval (duration of time or elapsed time) that is measured as a positive or negative number of days, hours, minutes, seconds, and milliseconds. It can be used wherever a TimePeriod is expected, and wll be converted to a TimePeriod automatically.    DateTimeComponentType  A value representing a component of a DateTimeOffset (e.g. Year, Month, Day).    DayOfWeek  A value representing the day of the week. (e.g. DayOfWeek.Monday, DayOfWeek.Tuesday etc.). From DayOfWeek you can get the name of the day, or an Int32 value representing the day, where Sunday equals 0, and Saturday equals 6.   Exceptions Exception Varies The data type that all other exceptions inherit from TODO: Link to inheritence   Files \u0026 Folders FileInformation Varies TODO    FolderInformation Varies TODO    ContentOptions 4 bytes TODO    FileMatch Varies TODO   Json JsonSerializerSettings  Settings used to control how to convert objects to Json and vice versa   Numbers Int16 2 bytes A whole number from -32768 through 32767    Int32 4 bytes A whole number from -2,147,483,648 through 2,147,483,647    Int64 8 bytes A whole number from -9,223,372,036,854,775,808 through 9,223,372,036,854,775,807    Single 4 bytes A fractional, or very large or small number from -3.402823e38 to 3.402823e38    Double 8 bytes A fractional, or very large or small number from -1.79769313486232e308 to 1.79769313486232e308   Text String Varies depending on the number of characters it contains A sequence of characters, surrounded by double quotes (e.g. \"This is a string\")    Char 2 bytes A character or letter surrounded by single quotes (e.g. 'a' or '!')    StringComparison 4 bytes TODO    SearchOptions 4 bytes TODO    IFormatProvider Varies TODO    CultureInfo Varies TODO    Encoding Varies TODO    All Object TODO\ndynamic TODO\nCollections Array TODO\nIEnumerable\u003cT\u003e TODO\nLists IList\u003cT\u003e TODO\nList\u003cT\u003e TODO\nIList\u003cT\u003e vs IList\u003cdynamic\u003e vs IList\u003cObject\u003e TODO\nAll items in an [IList][]\u003c[TItem][]\u003e are of a specific type (e.g. An [IList][]\u003c[String][]\u003e can only contain [String][] items, and an [IList][]\u003c[Int32][]\u003e can only contain [Int32][] items).\nThere are 2 commonly used List data types that can be created to hold multiple types of item:\n [List][]\u003c[dynamic][]\u003e - can be created using the literal syntax [], or using the expression syntax new List\u003cdynamic\u003e() [List][]\u003c[Object][]\u003e - can be created using the expression syntax new List\u003cObject\u003e()  An item can be added to an both using a literal (e.g. 2), a variable (e.g. ($)Int32Var where its value is 2), or an expression (e.g. 1+1).\nHowever, when an item is retrieved from an [IList][]\u003c[Object][]\u003e, an expression must be used to explicitly cast the item to its correct type when using it. (e.g. (Int32)($)ListOfObjects[($)Index]), or (Int32)($)RetrievedIntFromListOfObjects). This is not needed if the item is retrieved from an an [IList][]\u003c[dynamic][]\u003e.\nDictionaries IDictionary\u003cK, V\u003e TODO\nDictionary\u003cK, V\u003e TODO\nStructure TODO\nConditional Logic Boolean TODO\nDatabases DataTable TODO\nDates \u0026 Times DateTimeOffset TODO\nDateTime TODO\nTimePeriod TODO\nTimeSpan TODO\nDateTimeComponentType TODO\nCan have the following values:\n   Value Data Type Notes     DateTimeComponentType.LocalDateTime [DateTime][]    DateTimeComponentType.UtcDateTime [DateTime][]    DateTimeComponentType.DateTime [DateTime][]    DateTimeComponentType.Time [TimePeriod][]     Time (TimePeriod), Year (int), Month (int), /// Day (int), Hour (int), Minute (int), Second (int), Millisecond (int), Offset (TimeSpan), DayOfYear (int), DayOfWeek (DayOfWeek).\nDayOfWeek TODO\nExceptions Exception TODO\nTODO Link to exceptions reference\nFiles \u0026 Folders FileInformation TODO\nFolderInformation TODO\nContentOptions TODO\nFileMatch TODO\nJson JsonSerializerSettings TODO\nNumbers Int16 TODO\nInt32 TODO\nInt64 TODO\nSingle TODO\nDouble TODO\nText String TODO\nChar TODO\nStringComparison TODO\nIFormatProvider TODO\nCultureInfo TODO\n /// [Block Help Only] If the culture identifier is empty e.g (new CultureInfo(\"\")), cultureInfo is set to InvariantCulture.\r/// [Block Help Only] If the culture does not exist, the operating system will create a custom culture using the culture identifier.\r/// [Block Help Only] As well as the default InvariantCulture you can also use the culture of the system (CultureInfo.CurrentCulture) or provide a new culture info (new CultureInfo(\"en-GB\")).\r// Note about formatProvider and CultureInfo: If an invalid CultureInfo is provided (e.g. new CultureInfo(\"enaa\")), a CultureNotFoundException will be thrown.\r CurrentCulture InvariantCulture TODO\nTODO: variable link, on page links, glossary, concept links etc.\nSearchOptions TODO\nEncoding TODO\n","categories":"","description":"Data types that are most commonly used.","excerpt":"Data types that are most commonly used.","ref":"/docs/reference/data-types/most-common/","tags":"","title":"Most Common"},{"body":"","categories":"","description":"This section includes all tutorials for the Cortex Evolution platform.","excerpt":"This section includes all tutorials for the Cortex Evolution platform.","ref":"/docs/tutorials/","tags":"","title":"Tutorials"},{"body":"","categories":"","description":"This page describes the currently known limitations of Exception Handling","excerpt":"This page describes the currently known limitations of Exception Handling","ref":"/docs/reference/concepts/fundamentals/exceptions/known-limitations/","tags":"","title":"Known Limitations"},{"body":"F-J Terms, words and phrases beginning with the letters F through J.\nF File A file is an object on a computer that stores data.\nDifferent files can store different types of data (i.e. a text file, .txt, stores textual data; an executable file, .exe stores data required for executing an application).\nFlow A flow is an object in [Cortex Studio][TODO] that contains the logic and actions (in the form of [blocks][TODO]) that the [Cortex Evolution][TODO] [platform][TODO] is able to execute for the [flow developers][TODO].\nFor more detailed information about flows, see [Guides-\u003eCortex Studio-\u003eFlows][TODO].\nFlow Developer A flow developer is a user that has been granted permissions to develop [flows][TODO] in [Cortex Studio][TODO].\nFor more detailed information about granting permissions to develop [flows][TODO], see [Guides-\u003eCortex Gateway-\u003eAuthorisation][TODO].\nFolder A folder (or directory) is an object on a computer that contains [files][TODO].\nFolders can contain different types of file and can also contain other folders.\nFormat Parameter TODO\nFormat Specifier TODO\nFormat Template TODO\nFunctional Block See [block][TODO].\nG Generics TODO\nH I IDE IDE or Integrated Development Environment is a software application such as [Cortex Studio][TODO], that allows users to create a program or application.\nIn [Cortex Studio][TODO], the users are called [flow developers][TODO], and the programs are called [flows][TODO].\nSome common and popular examples of IDE’s include:\n [Visual Studio][TODO] [VSCode][TODO] [Eclipse][TODO]  Immutable Unable to be changed.\nImplicit Cast The process of an application converting one [data type][TODO] to another, without requiring an explicit instruction from the developer.\nFor one [data type][TODO] to be able to be implicitly cast to another, there should be no data loss during the conversion.\nAn example would be converting a [16-bit][TODO] [integer][TODO] ([Int16][TODO]) to a [32-bit][TODO] [integer][TODO] ([Int32][TODO]), as the entire range of the 16-bit integer will fit into a 32-bit integer:\nInt16 SixteenBitInteger = 100; Int32 ThirtyTwoBitInteger = SixteenBitInteger; See [Explicit Cast][TODO] for an example of where data loss would occur during conversion, and would therefore require an explicit instruction from the developer.\nSee [Casting and type conversions (C# Programming Guide)][TODO] for a detailed technical explanation of casting in [C#][TODO], the [programming language][TODO] natively supported by the [Cortex Evolution][TODO] [platform][TODO] for writing simple [expressions][TODO] and more complex [code][TODO].\nIndex TODO\nIndustry TODO\nInitialised TODO\nInput TODO\nInputOutput TODO\nInteger TODO\nInteractive TODO\nInt16 TODO\nInt32 TODO\nInt64 TODO\nInvalid TODO\nInvariant Culture A culture associated with the English language, but not with any country or region; it determines the default format for dates, times, numbers, currency values, the sorting order of text, casing conventions, and string comparisons.\nIt has a stable and unchanging set of rules that cannot be customized and is unaffected by culture related changes to the operating system.\nTODO: In .Net details about invariant culture are represented by the cultureinfo data type…https://docs.microsoft.com/en-us/dotnet/api/system.globalization.cultureinfo.invariantculture?view=net-5.0\nItem TODO\nIList\u003cTItem\u003e TODO\nIT IT stands for Information Technology, which is the use of computers to create, process, store, retrieve, and exchange electronic data and information.\nSee [Wikipedia][TODO - https://en.wikipedia.org/wiki/Information_technology] for more information.\nJ JSON JSON stands for JavaScript Object Notation, and is a format for storing and transporting data between computer applications.\nSee [What is JSON][TODO - https://www.w3schools.com/whatis/whatis_json.asp] for more information.\n","categories":"","description":"Terms, words and phrases beginning with the letters F through J.","excerpt":"Terms, words and phrases beginning with the letters F through J.","ref":"/docs/reference/glossary/f-j/","tags":"","title":"F-J"},{"body":"","categories":"","description":"","excerpt":"","ref":"/blog/news/","tags":"","title":"News About Docsy"},{"body":"","categories":"","description":"","excerpt":"","ref":"/blog/releases/","tags":"","title":"New Releases"},{"body":"","categories":"","description":"This section includes tutorials about post-installation setup of the Cortex Evolution platform.","excerpt":"This section includes tutorials about post-installation setup of the Cortex Evolution platform.","ref":"/docs/tutorials/setup/","tags":"","title":"Setup"},{"body":"","categories":"","description":"This section includes tutorials about developing automation using the Cortex Evolution platform.","excerpt":"This section includes tutorials about developing automation using the Cortex Evolution platform.","ref":"/docs/tutorials/development/","tags":"","title":"Development"},{"body":"K-O Terms, words and phrases beginning with the letters K through O.\nK Kickstarter TODO\nL Launch Program TODO\nLifecyle TODO\nList TODO\nLiteral TODO\nlowercase TODO\nLow-code Low-code is an approach to developing automation through a graphical user interface (GUI) that requires little to no coding; where the developers predominantly use drag-and-drop features, rather than writing code.\nM Market TODO\nMethod TODO\nMission-critical TODO\nMean-Time-To-Recovery (MTTR) TODO\nMonitoring TODO\nN Non-Null TODO\nNull TODO\nO Object TODO\nOccurrence TODO\nOn-premise TODO\nOperand TODO\nOperator TODO\nOrchestration The co-ordination of multiple technologies, services and processes.\nOrganisation TODO\nOutcome TODO\nOutput TODO\nOut-of-the-box (OOB) TODO\n","categories":"","description":"Terms, words and phrases beginning with the letters K through O.","excerpt":"Terms, words and phrases beginning with the letters K through O.","ref":"/docs/reference/glossary/k-o/","tags":"","title":"K-O"},{"body":"","categories":"","description":"This section includes tutorials about administering the Cortex Evolution platform.","excerpt":"This section includes tutorials about administering the Cortex Evolution platform.","ref":"/docs/tutorials/administration/","tags":"","title":"Administration"},{"body":"P-T Terms, words and phrases beginning with the letters P through T.\nP PascalCase PascalCase is a typographical convention in which phrases are written without spaces or punctuation, indicating the separation of words with a single capitalized letter, and the first word also starting with a capitalized letter. E.g. “FirstName” and “LastName”.\nPascalCase is often used as a naming convention in programming languages such as C#.\nSee also camelCase.\nPatching TODO\nPlatform TODO\nPortal TODO\nPowerShell TODO\nPowerShell Core TODO\nProcess TODO\nProgramming Language TODO\nProperty Block (property) TODO\nC# (property) TODO\nProperty Type TODO\nProvisioning TODO\nQ Quality TODO\nR Read-only TODO\nRemarks TODO\nRequest TODO - any type of trigger that is received\nS Sector TODO\nSeparator TODO\nSoftware Development TODO\nString TODO\nStructure TODO\nSwivel Chair TODO\nT Task TODO\nText TODO\nTitle Case TODO\nTransformation TODO\nTrigger TODO\nTItem TODO\nThrown TODO\nType TODO\n","categories":"","description":"Terms, words and phrases beginning with the letters P through T.","excerpt":"Terms, words and phrases beginning with the letters P through T.","ref":"/docs/reference/glossary/p-t/","tags":"","title":"P-T"},{"body":"U-Z Terms, words and phrases beginning with the letters U through Z.\nU UPPERCASE TODO\nUse Case TODO\nV Value TODO\nVariable TODO\nVelocity TODO\nW Whitespace TODO\nWindows PowerShell TODO\nWorkflow TODO\nX Y Z ","categories":"","description":"Terms, words and phrases beginning with the letters U through Z.","excerpt":"Terms, words and phrases beginning with the letters U through Z.","ref":"/docs/reference/glossary/u-z/","tags":"","title":"U-Z"},{"body":"0-9 Terms, words and phrases beginning with the numbers 0 through 9.\n0 1 16-bit 16-bit refers to a measurement of units of memory or data that are 16 bits in size.\n2 3 32-bit 32-bit refers to a measurement of units of memory or data that are 32 bits in size.\n3rd-Party Systems 3rd-party systems refer to systems, services or applications that are not developed by Cortex.\n4 5 6 64-bit 64-bit refers to a measurement of units of memory or data that are 64 bits in size.\n7 8 9 ","categories":"","description":"Terms, words and phrases beginning with the numbers 0 through 9.","excerpt":"Terms, words and phrases beginning with the numbers 0 through 9.","ref":"/docs/reference/glossary/0-9/","tags":"","title":"0-9"},{"body":"TODO: Null, reference types, value types, nullable value types - also search for “non-nullable value types” and add links\n","categories":"","description":"Various concepts of the engine.","excerpt":"Various concepts of the engine.","ref":"/docs/reference/concepts/","tags":"","title":"Concepts"},{"body":"","categories":"","description":"This section includes all reference documentation for the Cortex Evolution platform.","excerpt":"This section includes all reference documentation for the Cortex Evolution platform.","ref":"/docs/reference/","tags":"","title":"Reference"},{"body":"","categories":"","description":"Explanation of terms, words and phrases used throughout the Cortex Evolution documentation.","excerpt":"Explanation of terms, words and phrases used throughout the Cortex Evolution documentation.","ref":"/docs/reference/glossary/","tags":"","title":"Glossary"},{"body":"","categories":"","description":"Answers to our most frequently asked questions.","excerpt":"Answers to our most frequently asked questions.","ref":"/docs/faqs/","tags":"","title":"FAQs"},{"body":"This is a typical blog post that includes images.\nThe front matter specifies the date of the blog post, its title, a short description that will be displayed on the blog landing page, and its author.\nIncluding images Here’s an image (featured-sunset-get.png) that includes a byline and a caption.\nFetch and scale an image in the upcoming Hugo 0.43.\rPhoto: Riona MacNamara / CC-BY-CA\n\r The front matter of this post specifies properties to be assigned to all image resources:\nresources:\r- src: \"**.{png,jpg}\"\rtitle: \"Image #:counter\"\rparams:\rbyline: \"Photo: Riona MacNamara / CC-BY-CA\"\rTo include the image in a page, specify its details like this:\n\rFetch and scale an image in the upcoming Hugo 0.43.\rPhoto: Riona MacNamara / CC-BY-CA\n\r\rThe image will be rendered at the size and byline specified in the front matter.\n","categories":"","description":"The Docsy Hugo theme lets project maintainers and contributors focus on content, not on reinventing a website infrastructure from scratch","excerpt":"The Docsy Hugo theme lets project maintainers and contributors focus on content, not on reinventing a website infrastructure from scratch","ref":"/blog/2018/10/06/easy-documentation-with-docsy/","tags":"","title":"Easy documentation with Docsy"},{"body":"Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs.\nThere should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs.\n There should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\n First Header This is a normal paragraph following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nBacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nLorem markdownum tuta hospes stabat; idem saxum facit quaterque repetito occumbere, oves novem gestit haerebat frena; qui. Respicit recurvam erat: pignora hinc reppulit nos aut, aptos, ipsa.\nMeae optatos passa est Epiros utiliter Talibus niveis, hoc lata, edidit. Dixi ad aestum.\nHeader 2  This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\n Header 3 This is a code block following a header.\rHeader 4  This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header.  Header 5  This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header.  Header 6    What Follows     A table A header   A table A header   A table A header     There’s a horizontal rule above and below this.\n Here is an unordered list:\n Salt-n-Pepa Bel Biv DeVoe Kid ‘N Play  And an ordered list:\n Michael Jackson Michael Bolton Michael Bublé  And an unordered task list:\n Create a sample markdown document Add task lists to it Take a vacation  And a “mixed” task list:\n Steal underpants ? Profit!  And a nested list:\n Jackson 5  Michael Tito Jackie Marlon Jermaine   TMNT  Leonardo Michelangelo Donatello Raphael    Definition lists can be used with Markdown syntax. Definition terms are bold.\n Name Godzilla Born 1952 Birthplace Japan Color Green   Tables should have bold headings and alternating shaded rows.\n   Artist Album Year     Michael Jackson Thriller 1982   Prince Purple Rain 1984   Beastie Boys License to Ill 1986    If a table is too wide, it should scroll horizontally.\n   Artist Album Year Label Awards Songs     Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin’ Somethin', Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life   Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain   Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill     Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\";\rbar := \"foo\";\rCode can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this.\rInline code inside table cells should still be distinguishable.\n   Language Code     Javascript var foo = \"bar\";   Ruby foo = \"bar\"{     Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nComponents Alerts \rThis is an alert.\r\rNote:\rThis is an alert with a title.\r\rThis is a successful alert.\r\rThis is a warning!\r\rWarning!\rThis is a warning with a title!\r\rSizing Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nParameters available Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nUsing pixels Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nUsing rem Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nMemory Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nRAM to use Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nMore is better Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nUsed RAM Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis is the final element on the page and there should be no margin below this.\r","categories":"","description":"A short lead description about this content page. Text here can also be **bold** or _italic_ and can even be split over multiple paragraphs.\n","excerpt":"A short lead description about this content page. Text here can also be **bold** or _italic_ and can even be split over multiple paragraphs.\n","ref":"/blog/2018/10/06/the-second-blog-post/","tags":"","title":"The second blog post"},{"body":"Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs.\nThere should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs.\n There should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\n First Header This is a normal paragraph following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nBacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nLorem markdownum tuta hospes stabat; idem saxum facit quaterque repetito occumbere, oves novem gestit haerebat frena; qui. Respicit recurvam erat: pignora hinc reppulit nos aut, aptos, ipsa.\nMeae optatos passa est Epiros utiliter Talibus niveis, hoc lata, edidit. Dixi ad aestum.\nHeader 2  This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\n Header 3 This is a code block following a header.\rHeader 4  This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header.  Header 5  This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header.  Header 6    What Follows     A table A header   A table A header   A table A header     There’s a horizontal rule above and below this.\n Here is an unordered list:\n Salt-n-Pepa Bel Biv DeVoe Kid ‘N Play  And an ordered list:\n Michael Jackson Michael Bolton Michael Bublé  And an unordered task list:\n Create a sample markdown document Add task lists to it Take a vacation  And a “mixed” task list:\n Steal underpants ? Profit!  And a nested list:\n Jackson 5  Michael Tito Jackie Marlon Jermaine   TMNT  Leonardo Michelangelo Donatello Raphael    Definition lists can be used with Markdown syntax. Definition terms are bold.\n Name Godzilla Born 1952 Birthplace Japan Color Green   Tables should have bold headings and alternating shaded rows.\n   Artist Album Year     Michael Jackson Thriller 1982   Prince Purple Rain 1984   Beastie Boys License to Ill 1986    If a table is too wide, it should scroll horizontally.\n   Artist Album Year Label Awards Songs     Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin’ Somethin', Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life   Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain   Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill     Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\";\rbar := \"foo\";\rCode can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this.\rInline code inside table cells should still be distinguishable.\n   Language Code     Javascript var foo = \"bar\";   Ruby foo = \"bar\"{     Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nComponents Alerts \rThis is an alert.\r\rNote:\rThis is an alert with a title.\r\rThis is a successful alert.\r\rThis is a warning!\r\rWarning!\rThis is a warning with a title!\r\rSizing Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nParameters available Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nUsing pixels Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nUsing rem Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nMemory Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nRAM to use Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nMore is better Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nUsed RAM Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis is the final element on the page and there should be no margin below this.\r","categories":"","description":"A short lead description about this content page. Text here can also be **bold** or _italic_ and can even be split over multiple paragraphs.\n","excerpt":"A short lead description about this content page. Text here can also be **bold** or _italic_ and can even be split over multiple paragraphs.\n","ref":"/blog/2018/01/04/another-great-release/","tags":"","title":"Another Great Release"},{"body":"TODO: frontmatter description\n.Net Regex Syntax Overview TODO: Overview/summary of regex and following sections\nCharacter Classes TODO: Take content from current gateway/help-preview/#Static%20Content/ReGexReference.html TODO: Include information about any builtin snippets for each regex\nCharacter Escapes TODO: Take content from current gateway/help-preview/#Static%20Content/ReGexReference.html TODO: Include information about any builtin snippets for each regex\nQuantifiers TODO: Take content from current gateway/help-preview/#Static%20Content/ReGexReference.html TODO: Include information about any builtin snippets for each regex\nAnchors TODO: Take content from current gateway/help-preview/#Static%20Content/ReGexReference.html TODO: Include information about any builtin snippets for each regex\nGrouping Constructs TODO: Take content from current gateway/help-preview/#Static%20Content/ReGexReference.html TODO: Include information about any builtin snippets for each regex\nBack-reference Constructs TODO: Take content from current gateway/help-preview/#Static%20Content/ReGexReference.html TODO: Include information about any builtin snippets for each regex\nAlternation Constructs TODO: Take content from current gateway/help-preview/#Static%20Content/ReGexReference.html TODO: Include information about any builtin snippets for each regex\nSubstitutions TODO: Take content from current gateway/help-preview/#Static%20Content/ReGexReference.html TODO: Include information about any builtin snippets for each regex\nBlocks that use Regex TODO: List blocks which support using regex\nTODO: All blocks which support regex should link back here from the properties that support it\nTODO: https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expressions\nTODO: https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference\nTODO: Options https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-options and https://docs.microsoft.com/en-us/dotnet/standard/base-types/miscellaneous-constructs-in-regular-expressions\nTODO: Common useful regexes\n https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-example-scanning-for-hrefs and subsequent links  TODO: State that we specify a timeout to prevent dos attacks\nTO CONSIDER: https://docs.microsoft.com/en-us/dotnet/standard/base-types/best-practices\nTODO: Talk about no current support for old g2 syntax - may add in future\n","categories":"","description":"This page describes the .Net Regex Syntax.","excerpt":"This page describes the .Net Regex Syntax.","ref":"/docs/reference/concepts/regex-syntax/","tags":"","title":".Net Regex Syntax"},{"body":"\r\rAdd Item At Beginning (Cortex.Blocks.Lists.AddItem.AddItemAtBeginningBlock`2)\nDescription Adds an Item at the beginning of a List.\nExamples Add an Item at the beginning of an empty List This example will add \"New Item\" at the beginning of [].\nProperties    Property Value Notes     List ($)List, with value [] ($)List is a variable of type IList\u003cdynamic\u003e   Item ($)Item, with value \"New Item\" ($)Item is a variable of type String    Result Adding \"New Item\" at the beginning of [] results in the variable ($)List being updated to the following:\n[\"New Item\"]  Add an Item at the beginning of a List This example will add \"New Item\" at the beginning of [\"Some Text\", 1].\nProperties    Property Value Notes     List ($)List, with value [\"Some Text\", 1] ($)List is a variable of type IList\u003cdynamic\u003e   Item ($)Item, with value \"New Item\" ($)Item is a variable of type String    Result Adding \"New Item\" at the beginning of [\"Some Text\", 1] results in the variable ($)List being updated to the following:\n[\"New Item\", \"Some Text\", 1]  Properties List The List where the Item is added.\nList can be any IList\u003cTItem\u003e, where TItem represents the type of items that can be added to the List.\n         Data Type IList\u003cTItem\u003e   Property Type InputOutput   Default Value ($)List with value []    Item The Item to be added at the beginning of the List.\n         Data Type TItem   Property Type Input   Default Value ($)Item with value null    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     CannotModifyReadOnlyListException Thrown when List is read-only.   InvalidPropertyValueException Thrown when Item is null and List only accepts non-nullable value types.   PropertyNullException Thrown when List is null.    Remarks Defining lists using literal syntax For information about how to define lists using literal syntax, see List Literals.\nDefining lists using expression syntax For information about how to define lists using expression syntax, see List Expressions.\nLists containing items of a single data type vs multiple data types For information about the different types of lists, including those that can contain only a single type of item, and those that can contain multiple types of item, see Lists.\n","categories":"","description":"Adds an Item at the beginning of a List.","excerpt":"Adds an Item at the beginning of a List.","ref":"/docs/reference/blocks/lists/add-item/add-item-at-beginning-block-2/","tags":"","title":"Add Item At Beginning"},{"body":"\r\rAdd Item At End (Cortex.Blocks.Lists.AddItem.AddItemAtEndBlock`2)\nDescription Adds an Item at the end of a List.\nExamples Add an Item at the end of an empty List This example will add \"New Item\" at the end of [].\nProperties    Property Value Notes     List ($)List, with value [] ($)List is a variable of type IList\u003cdynamic\u003e   Item ($)Item, with value \"New Item\" ($)Item is a variable of type String    Result Adding \"New Item\" at the end of [] results in the variable ($)List being updated to the following:\n[\"New Item\"]  Add an Item at the end of a List This example will add \"New Item\" at the end of [\"Some Text\", 1].\nProperties    Property Value Notes     List ($)List, with value [\"Some Text\", 1] ($)List is a variable of type IList\u003cdynamic\u003e   Item ($)Item, with value \"New Item\" ($)Item is a variable of type String    Result Adding \"New Item\" at the end of [\"Some Text\", 1] results in the variable ($)List being updated to the following:\n[\"Some Text\", 1, \"New Item\"]  Properties List The List where the Item is added.\nList can be any IList\u003cTItem\u003e, where TItem represents the type of items that can be added to the List.\n         Data Type IList\u003cTItem\u003e   Property Type InputOutput   Default Value ($)List with value []    Item The Item to be added at the end of the List.\n         Data Type TItem   Property Type Input   Default Value ($)Item with value null    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     CannotModifyReadOnlyListException Thrown when List is read-only.   InvalidPropertyValueException Thrown when Item is null and List only accepts non-nullable value types.   PropertyNullException Thrown when List is null.    Remarks Defining lists using literal syntax For information about how to define lists using literal syntax, see List Literals.\nDefining lists using expression syntax For information about how to define lists using expression syntax, see List Expressions.\nLists containing items of a single data type vs multiple data types For information about the different types of lists, including those that can contain only a single type of item, and those that can contain multiple types of item, see Lists.\n","categories":"","description":"Adds an Item at the end of a List.","excerpt":"Adds an Item at the end of a List.","ref":"/docs/reference/blocks/lists/add-item/add-item-at-end-block-2/","tags":"","title":"Add Item At End"},{"body":"\r\rAdd Item At Index (Cortex.Blocks.Lists.AddItem.AddItemAtIndexBlock`2)\nDescription Adds an Item at the specified Index of a List.\nExamples Add an Item at the first Index (i.e. 0) of an empty List This example will add \"New Item\" at index 0 of [].\nProperties    Property Value Notes     List ($)List, with value [] ($)List is a variable of type IList\u003cdynamic\u003e   Item ($)Item, with value \"New Item\" ($)Item is a variable of type String   Index ($)Index, with value 0 ($)Index is a variable of type Int32    Result Adding \"New Item\" at index 0 of [] results in the variable ($)List being updated to the following:\n[\"New Item\"]  Add an Item at the first Index (i.e. 0) of a List This example will add \"New Item\" at index 0 of [\"Some Text\", 1].\nProperties    Property Value Notes     List ($)List, with value [\"Some Text\", 1] ($)List is a variable of type IList\u003cdynamic\u003e   Item ($)Item, with value \"New Item\" ($)Item is a variable of type String   Index ($)Index, with value 0 ($)Index is a variable of type Int32    Result Adding \"New Item\" at index 0 of [\"Some Text\", 1] results in the variable ($)List being updated to the following:\n[\"New Item\", \"Some Text\", 1]  Add an Item at the end (i.e. Index equals count of items) of a List This example will add \"New Item\" at index 2 of [\"Some Text\", 1].\nProperties    Property Value Notes     List ($)List, with value [\"Some Text\", 1] ($)List is a variable of type IList\u003cdynamic\u003e   Item ($)Item, with value \"New Item\" ($)Item is a variable of type String   Index ($)Index, with value 2 ($)Index is a variable of type Int32    Result Adding \"New Item\" at index 2 of [\"Some Text\", 1] results in the variable ($)List being updated to the following:\n[\"Some Text\", 1, \"New Item\"]  Properties List The List where the Item is added.\nList can be any IList\u003cTItem\u003e, where TItem represents the type of items that can be added to the List.\n         Data Type IList\u003cTItem\u003e   Property Type InputOutput   Default Value ($)List with value []    Item The Item to be added at the specified Index of the List.\n         Data Type TItem   Property Type Input   Default Value ($)Item with value null    Index The Index to add the Item at.\nValid values are between and including 0 and the total count of items in the List.\nFor information about what an index is, please see Indexes.\n         Data Type Int32   Property Type Input   Default Value ($)Index with value 0    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     CannotModifyReadOnlyListException Thrown when List is read-only.   InvalidPropertyValueException Thrown when Item is null and List only accepts non-nullable value types.   PropertyNullException Thrown when List is null.   PropertyValueOutOfRangeException Thrown when Index is out of the range of the list indexes. Valid indexes are between and including 0 and the count of items in the List.    Remarks Defining lists using literal syntax For information about how to define lists using literal syntax, see List Literals.\nDefining lists using expression syntax For information about how to define lists using expression syntax, see List Expressions.\nLists containing items of a single data type vs multiple data types For information about the different types of lists, including those that can contain only a single type of item, and those that can contain multiple types of item, see Lists.\n","categories":"","description":"Adds an Item at the specified Index of a List.","excerpt":"Adds an Item at the specified Index of a List.","ref":"/docs/reference/blocks/lists/add-item/add-item-at-index-block-2/","tags":"","title":"Add Item At Index"},{"body":"\r\rAdd Item With Key (Cortex.Blocks.Dictionaries.AddItem.AddItemWithKeyBlock`3)\nDescription Adds an Item to a Dictionary with the specified Key.\nExamples Add an Item to an empty Dictionary This example will add 1 to {} with a key of \"Key1\".\nProperties    Property Value Notes     Dictionary ($)Dictionary, with value {} ($)Dictionary is a variable of type IDictionary\u003cdynamic, dynamic\u003e   Key ($)Key, with value \"Key1\" ($)Key is a variable of type String   Item ($)Item, with value 1 ($)Item is a variable of type Int32    Result Adding 1 to {} with a key of \"Key1\" results in the variable ($)Dictionary being updated to the following:\n{\"Key1\" : 1}  Add an Item to a Dictionary This example will add 2 to {\"Key1\" : 1} with a key of \"Key2\".\nProperties    Property Value Notes     Dictionary ($)Dictionary, with value {\"Key1\" : 1} ($)Dictionary is a variable of type IDictionary\u003cString, Int32\u003e   Key ($)Key, with value \"Key2\" ($)Key is a variable of type String   Item ($)Item, with value 2 ($)Item is a variable of type Int32    Result Adding 2 to {\"Key1\" : 1} with a key of \"Key2\" results in the variable ($)Dictionary being updated to the following:\n{\"Key1\" : 1, \"Key2\" : 2}  Properties Dictionary The Dictionary where the Item is added with the specified Key.\nDictionary can be any IDictionary\u003cTKey, TItem\u003e, where TKey represents the type of keys used to lookup items in the Dictionary, and TItem represents the type of items in the Dictionary.\n         Data Type IDictionary\u003cTKey, TItem\u003e   Property Type InputOutput   Default Value ($)Dictionary with value {}    Key The Key to add the Item with.\nKeys cannot be null and must be unique within a dictionary, as they are used to lookup the item they correspond to.\nFor information and examples of how it is determined whether a key is already present, please see Object Equality.\nFor information about what a key is, please see Keys.\n         Data Type TKey   Property Type Input   Default Value ($)Key with value null    Item The Item to be added to the Dictionary with the specified Key.\n         Data Type TItem   Property Type Input   Default Value ($)Item with value null    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     CannotModifyReadOnlyDictionaryException Thrown when Dictionary is read-only.   InvalidPropertyValueException Thrown when Item is null and Dictionary only accepts non-nullable value types.   KeyPresentException Thrown when an item with the specified Key is already present.   PropertyNullException Thrown when Dictionary or Key are null.    Remarks Key Equality For information and examples of how it is determined whether a key is already present, please see Object Equality.\nDefining dictionaries using literal syntax For information about how to define dictionaries using literal syntax, see Dictionary Literals.\nDefining dictionaries using expression syntax For information about how to define dictionaries using expression syntax, see Dictionary Expressions.\nDictionaries containing items with same data types vs different data types For information about the different types of dictionaries, including those that can contain only the same type of item, and those that can contain different types of item, see Dictionaries.\n","categories":"","description":"Adds an item to a Dictionary with the specified key.","excerpt":"Adds an item to a Dictionary with the specified key.","ref":"/docs/reference/blocks/dictionaries/add-item/add-item-with-key-block-3/","tags":"","title":"Add Item With Key"},{"body":"","categories":"","description":"Add an item or multiple items to a dictionary.","excerpt":"Add an item or multiple items to a dictionary.","ref":"/docs/reference/blocks/dictionaries/add-item/","tags":"","title":"Add Item(s)"},{"body":"","categories":"","description":"Add an item or multiple items to a list.","excerpt":"Add an item or multiple items to a list.","ref":"/docs/reference/blocks/lists/add-item/","tags":"","title":"Add Item(s)"},{"body":"\r\rAdd Items At Beginning (Cortex.Blocks.Lists.AddItem.AddItemsAtBeginningBlock`2)\nDescription Adds Items at the beginning of a List.\nExamples Add Items at the beginning of an empty List This example will add [\"New Item 1\", \"New Item 2\"] at the beginning of [].\nProperties    Property Value Notes     List ($)List, with value [] ($)List is a variable of type IList\u003cdynamic\u003e   Items ($)Items, with value [\"New Item 1\", \"New Item 2\"] ($)Items is a variable of type IEnumerable\u003cString\u003e    Result Adding [\"New Item 1\", \"New Item 2\"] at the beginning of [] results in the variable ($)List being updated to the following:\n[\"New Item 1\", \"New Item 2\"]  Add Items at the beginning of a List This example will add [\"New Item 1\", \"New Item 2\"] at the beginning of [\"Some Text\", 1].\nProperties    Property Value Notes     List ($)List, with value [\"Some Text\", 1] ($)List is a variable of type IList\u003cdynamic\u003e   Items ($)Items, with value [\"New Item 1\", \"New Item 2\"] ($)Items is a variable of type IEnumerable\u003cString\u003e    Result Adding [\"New Item 1\", \"New Item 2\"] at the beginning of [\"Some Text\", 1] results in the variable ($)List being updated to the following:\n[\"New Item 1\", \"New Item 2\", \"Some Text\", 1]  Properties List The List where the Items are added.\nList can be any IList\u003cTItem\u003e, where TItem represents the type of items that can be added to the List.\n         Data Type IList\u003cTItem\u003e   Property Type InputOutput   Default Value ($)List with value []    Items The Items to be added at the beginning of the List.\n         Data Type IEnumerable\u003cTItem\u003e   Property Type Input   Default Value ($)Items with value []    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     CannotModifyReadOnlyListException Thrown when List is read-only.   PropertyNullException Thrown when List or Items is null.    Remarks Empty Items If Items is empty (i.e. []) there is nothing to add, so no operation is performed.\nDefining lists using literal syntax For information about how to define lists using literal syntax, see List Literals.\nDefining lists using expression syntax For information about how to define lists using expression syntax, see List Expressions.\nLists containing items of a single data type vs multiple data types For information about the different types of lists, including those that can contain only a single type of item, and those that can contain multiple types of item, see Lists.\n","categories":"","description":"Adds Items at the beginning of a List.","excerpt":"Adds Items at the beginning of a List.","ref":"/docs/reference/blocks/lists/add-item/add-items-at-beginning-block-2/","tags":"","title":"Add Items At Beginning"},{"body":"\r\rAdd Items At End (Cortex.Blocks.Lists.AddItem.AddItemsAtEndBlock`2)\nDescription Adds Items at the end of a List.\nExamples Add Items at the end of an empty List This example will add [\"New Item 1\", \"New Item 2\"] at the end of [].\nProperties    Property Value Notes     List ($)List, with value [] ($)List is a variable of type IList\u003cdynamic\u003e   Items ($)Items, with value [\"New Item 1\", \"New Item 2\"] ($)Items is a variable of type IEnumerable\u003cString\u003e    Result Adding [\"New Item 1\", \"New Item 2\"] at the end of [] results in the variable ($)List being updated to the following:\n[\"New Item 1\", \"New Item 2\"]  Add Items at the end of a List This example will add [\"New Item 1\", \"New Item 2\"] at the end of [\"Some Text\", 1].\nProperties    Property Value Notes     List ($)List, with value [\"Some Text\", 1] ($)List is a variable of type IList\u003cdynamic\u003e   Items ($)Items, with value [\"New Item 1\", \"New Item 2\"] ($)Items is a variable of type IEnumerable\u003cString\u003e    Result Adding [\"New Item 1\", \"New Item 2\"] at the end of [\"Some Text\", 1] results in the variable ($)List being updated to the following:\n[\"Some Text\", 1, \"New Item 1\", \"New Item 2\"]  Properties List The List where the Items are added.\nList can be any IList\u003cTItem\u003e, where TItem represents the type of items that can be added to the List.\n         Data Type IList\u003cTItem\u003e   Property Type InputOutput   Default Value ($)List with value []    Items The Items to be added at the end of the List.\n         Data Type IEnumerable\u003cTItem\u003e   Property Type Input   Default Value ($)Items with value []    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     CannotModifyReadOnlyListException Thrown when List is read-only.   PropertyNullException Thrown when List or Items is null.    Remarks Empty Items If Items is empty (i.e. []) there is nothing to add, so no operation is performed.\nDefining lists using literal syntax For information about how to define lists using literal syntax, see List Literals.\nDefining lists using expression syntax For information about how to define lists using expression syntax, see List Expressions.\nLists containing items of a single data type vs multiple data types For information about the different types of lists, including those that can contain only a single type of item, and those that can contain multiple types of item, see Lists.\n","categories":"","description":"Adds Items at the end of a List.","excerpt":"Adds Items at the end of a List.","ref":"/docs/reference/blocks/lists/add-item/add-items-at-end-block-2/","tags":"","title":"Add Items At End"},{"body":"\r\rAdd Items At Index (Cortex.Blocks.Lists.AddItem.AddItemsAtIndexBlock`2)\nDescription Adds Items at the specified Index of a List.\nExamples Add Items at the first index (i.e. 0) of an empty List This example will add [\"New Item 1\", \"New Item 2\"] at index 0 of [].\nProperties    Property Value Notes     List ($)List, with value [] ($)List is a variable of type IList\u003cdynamic\u003e   Items ($)Items, with value [\"New Item 1\", \"New Item 2\"] ($)Items is a variable of type IEnumerable\u003cString\u003e   Index ($)Index, with value 0 ($)Index is a variable of type Int32    Result Adding [\"New Item 1\", \"New Item 2\"] at index 0 of [] results in the variable ($)List being updated to the following:\n[\"New Item 1\", \"New Item 2\"]  Add Items at the first Index (i.e. 0) of a List This example will add [\"New Item 1\", \"New Item 2\"] at index 0 of [\"Some Text\", 1].\nProperties    Property Value Notes     List ($)List, with value [\"Some Text\", 1] ($)List is a variable of type IList\u003cdynamic\u003e   Items ($)Items, with value [\"New Item 1\", \"New Item 2\"] ($)Items is a variable of type IEnumerable\u003cString\u003e   Index ($)Index, with value 0 ($)Index is a variable of type Int32    Result Adding [\"New Item 1\", \"New Item 2\"] at index 0 of [\"Some Text\", 1] results in the variable ($)List being updated to the following:\n[\"New Item 1\", \"New Item 2\", \"Some Text\", 1]  Add Items at the end (i.e. Index equals count of items) of a List This example will add [\"New Item 1\", \"New Item 2\"] at index 2 of [\"Some Text\", 1].\nProperties    Property Value Notes     List ($)List, with value [\"Some Text\", 1] ($)List is a variable of type IList\u003cdynamic\u003e   Items ($)Items, with value [\"New Item 1\", \"New Item 2\"] ($)Items is a variable of type IEnumerable\u003cString\u003e   Index ($)Index, with value 2 ($)Index is a variable of type Int32    Result Adding [\"New Item 1\", \"New Item 2\"] at index 2 of [\"Some Text\", 1] results in the variable ($)List being updated to the following:\n[\"Some Text\", 1, \"New Item 1\", \"New Item 2\"]  Properties List The List where the Items are added.\nList can be any IList\u003cTItem\u003e, where TItem represents the type of items that can be added to the List.\n         Data Type IList\u003cTItem\u003e   Property Type InputOutput   Default Value ($)List with value []    Items The Items to be added at the specified Index of the List.\n         Data Type IEnumerable\u003cTItem\u003e   Property Type Input   Default Value ($)Items with value []    Index The Index to add the Items at.\nValid values are between and including 0 and the total count of items in the List.\nFor information about what an index is, please see Indexes.\n         Data Type Int32   Property Type Input   Default Value ($)Index with value 0    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     CannotModifyReadOnlyListException Thrown when List is read-only.   PropertyNullException Thrown when List or Items is null.   PropertyValueOutOfRangeException Thrown when Index is out of the range of the list indexes. Valid indexes are between and including 0 and the count of items in the List.    Remarks Empty Items If Items is empty (i.e. []) there is nothing to add, so no operation is performed.\nDefining lists using literal syntax For information about how to define lists using literal syntax, see List Literals.\nDefining lists using expression syntax For information about how to define lists using expression syntax, see List Expressions.\nLists containing items of a single data type vs multiple data types For information about the different types of lists, including those that can contain only a single type of item, and those that can contain multiple types of item, see Lists.\n","categories":"","description":"Adds Items at the specified Index of a List.","excerpt":"Adds Items at the specified Index of a List.","ref":"/docs/reference/blocks/lists/add-item/add-items-at-index-block-2/","tags":"","title":"Add Items At Index"},{"body":"","categories":"","description":"Add text to another text.","excerpt":"Add text to another text.","ref":"/docs/reference/blocks/text/add-text/","tags":"","title":"Add Text"},{"body":"\r\rAdd Text After Index (Cortex.Blocks.Text.AddText.AddTextAfterIndexBlock)\nDescription Adds Text To Add to another Text after the given Index.\nExamples Add Text To Add to another Text after the given Index This example will add \"|\" after \"A\" (which is at index 0) in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".\nProperties    Property Value Notes     Text ($)Text, with value \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" ($)Text is a variable of type String   Text To Add ($)TextToAdd, with value \"|\" ($)TextToAdd is a variable of type String   Index ($)Index, with value 0 ($)Index is a variable of type Int32    Result \"A\" is at index 0 in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\". Therefore, adding \"|\" after index 0 results in the variable ($)Text being updated to the following:\n\"A|BCDEFGHIJKLMNOPQRSTUVWXYZ\"  Add null or empty Text To Add to another Text after the given Index This example will try to add null or \"\" after \"A\" (which is at index 0) in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".\nProperties    Property Value Notes     Text ($)Text, with value \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" ($)Text is a variable of type String   Text To Add ($)TextToAdd, with value null or \"\" ($)TextToAdd is a variable of type String   Index ($)Index, with value 0 ($)Index is a variable of type Int32    Result Adding null or \"\" performs no operation as there is nothing to add, so the variable ($)Text will remain as follows:\n\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"  Properties Text The Text where the Text To Add is added.\n         Data Type String   Property Type InputOutput   Default Value ($)Text with value \"\"    Text To Add The Text To Add to the Text after the given Index.\n         Data Type String   Property Type Input   Default Value ($)TextToAdd with value \"\"    Index The Index to add the Text To Add after.\nFor information about what an index is, please see Indexes.\n         Data Type Int32   Property Type Input   Default Value ($)Index with value 0    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     PropertyValueOutOfRangeException Thrown when Text is null or empty (i.e. \"\").    Thrown when Index is less than zero or greater than the length of Text - 1.    Remarks Null or empty Text To Add If Text To Add is null or empty (i.e. \"\") nothing is added to Text. See Example above.\nImmutable String data type The String data type used to represent Text is immutable, which means it is read-only and cannot be changed once created.\nTo overcome this, this block creates a new String which has the Text To Add added in the correct place and re-assigns it to the variable specified in the Text property.\n","categories":"","description":"Adds text to another text after a given index.","excerpt":"Adds text to another text after a given index.","ref":"/docs/reference/blocks/text/add-text/add-text-after-index-block/","tags":"","title":"Add Text After Index"},{"body":"\r\rAdd Text At Beginning (Cortex.Blocks.Text.AddText.AddTextAtBeginningBlock)\nDescription Adds Text To Add at the beginning of another Text.\nExamples Add Text To Add at the beginning of another Text This example will add \"|\" at the beginning of \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".\nProperties    Property Value Notes     Text ($)Text, with value \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" ($)Text is a variable of type String   Text To Add ($)TextToAdd, with value \"|\" ($)TextToAdd is a variable of type String    Result Adding \"|\" at the beginning of \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" results in the variable ($)Text being updated to the following:\n\"|ABCDEFGHIJKLMNOPQRSTUVWXYZ\"  Add Text To Add at the beginning of a null or empty Text This example will try to add \"|\" at the beginning of null or \"\".\nProperties    Property Value Notes     Text ($)Text, with value null or \"\" ($)Text is a variable of type String   Text To Add ($)TextToAdd, with value \"|\" ($)TextToAdd is a variable of type String    Result Adding \"|\" to null or \"\" results in the variable ($)Text being updated to the following:\n\"|\"  Add null or empty Text To Add at the beginning of another Text This example will try to add null or \"\" at the beginnning of \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".\nProperties    Property Value Notes     Text ($)Text, with value \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" ($)Text is a variable of type String   Text To Add ($)TextToAdd, with value null or \"\" ($)TextToAdd is a variable of type String    Result Adding null or \"\" performs no operation as there is nothing to add, so the variable ($)Text will remain as follows:\n\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"  Properties Text The Text where the Text To Add is added.\n         Data Type String   Property Type InputOutput   Default Value ($)Text with value \"\"    Text To Add The Text To Add at the beginning of the Text.\n         Data Type String   Property Type Input   Default Value ($)TextToAdd with value \"\"    Exceptions No exceptions are thrown by the block.\nRemarks Null or empty Text If Text is null or empty (i.e. \"\") it is replaced with the Text To Add. See Example above.\nNull or empty Text To Add If Text To Add is null or empty (i.e. \"\") nothing is added to Text. See Example above.\nImmutable String data type The String data type used to represent Text is immutable, which means it is read-only and cannot be changed once created.\nTo overcome this, this block creates a new String which has the Text To Add added in the correct place and re-assigns it to the variable specified in the Text property.\n","categories":"","description":"Adds text at the beginning of another text.","excerpt":"Adds text at the beginning of another text.","ref":"/docs/reference/blocks/text/add-text/add-text-at-beginning-block/","tags":"","title":"Add Text At Beginning"},{"body":"\r\rAdd Text At End (Cortex.Blocks.Text.AddText.AddTextAtEndBlock)\nDescription Adds Text To Add at the end of another Text.\nExamples Add Text To Add at the end of another Text This example will add \"|\" at the end of \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".\nProperties    Property Value Notes     Text ($)Text, with value \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" ($)Text is a variable of type String   Text To Add ($)TextToAdd, with value \"|\" ($)TextToAdd is a variable of type String    Result Adding \"|\" at the end of \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" results in the variable ($)Text being updated to the following:\n\"ABCDEFGHIJKLMNOPQRSTUVWXYZ|\"  Add Text To Add at the end of a null or empty Text This example will try to add \"|\" at the end of null or \"\".\nProperties    Property Value Notes     Text ($)Text, with value null or \"\" ($)Text is a variable of type String   Text To Add ($)TextToAdd, with value \"|\" ($)TextToAdd is a variable of type String    Result Adding \"|\" to null or \"\" results in the variable ($)Text being updated to the following:\n\"|\"  Add null or empty Text To Add at the end of another Text This example will try to add null or \"\" at the end of \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".\nProperties    Property Value Notes     Text ($)Text, with value \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" ($)Text is a variable of type String   Text To Add ($)TextToAdd, with value null or \"\" ($)TextToAdd is a variable of type String    Result Adding null or \"\" performs no operation as there is nothing to add, so the variable ($)Text will remain as follows:\n\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"  Properties Text The Text where the Text To Add is added.\n         Data Type String   Property Type InputOutput   Default Value ($)Text with value \"\"    Text To Add The Text To Add at the end of the Text.\n         Data Type String   Property Type Input   Default Value ($)TextToAdd with value \"\"    Exceptions No exceptions are thrown by the block.\nRemarks Null or empty Text If Text is null or empty (i.e. \"\") it is replaced with the Text To Add. See Example above.\nNull or empty Text To Add If Text To Add is null or empty (i.e. \"\") nothing is added to Text. See Example above.\nImmutable String data type The String data type used to represent Text is immutable, which means it is read-only and cannot be changed once created.\nTo overcome this, this block creates a new String which has the Text To Add added in the correct place and re-assigns it to the variable specified in the Text property.\n","categories":"","description":"Adds text at the end of another text.","excerpt":"Adds text at the end of another text.","ref":"/docs/reference/blocks/text/add-text/add-text-at-end-block/","tags":"","title":"Add Text At End"},{"body":"\r\rAdd Text Before Index (Cortex.Blocks.Text.AddText.AddTextBeforeIndexBlock)\nDescription Adds Text To Add to another Text before the specified Index.\nExamples Add Text To Add to another Text before the given Index This example will add \"|\" before \"A\" (which is at index 0) in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".\nProperties    Property Value Notes     Text ($)Text, with value \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" ($)Text is a variable of type String   Text To Add ($)TextToAdd, with value \"|\" ($)TextToAdd is a variable of type String   Index ($)Index, with value 0 ($)Index is a variable of type Int32    Result \"A\" is at index 0 in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\". Therefore, adding \"|\" before index 0 results in the variable ($)Text being updated to the following:\n\"|ABCDEFGHIJKLMNOPQRSTUVWXYZ\"  Add null or empty Text To Add to another Text before the given Index This example will try to add null or \"\" before \"A\" (which is at index 0) in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".\nProperties    Property Value Notes     Text ($)Text, with value \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" ($)Text is a variable of type String   Text To Add ($)TextToAdd, with value null or \"\" ($)TextToAdd is a variable of type String   Index ($)Index, with value 0 ($)Index is a variable of type Int32    Result Adding null or \"\" performs no operation as there is nothing to add, so the variable ($)Text will remain as follows:\n\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"  Properties Text The Text where the Text To Add is added.\n         Data Type String   Property Type InputOutput   Default Value ($)Text with value \"\"    Text To Add The Text To Add to the Text before the given Index.\n         Data Type String   Property Type Input   Default Value ($)TextToAdd with value \"\"    Index The Index to add the Text To Add before.\nFor information about what an index is, please see Indexes.\n         Data Type Int32   Property Type Input   Default Value ($)Index with value 0    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     PropertyValueOutOfRangeException Thrown when Text is null or empty (i.e. \"\").    Thrown when Index is less than zero or greater than the length of Text - 1.    Remarks Null or empty Text To Add If Text To Add is null or empty (i.e. \"\") nothing is added to Text. See Example above.\nImmutable String data type The String data type used to represent Text is immutable, which means it is read-only and cannot be changed once created.\nTo overcome this, this block creates a new String which has the Text To Add added in the correct place and re-assigns it to the variable specified in the Text property.\n","categories":"","description":"Adds text to another text before the specified index.","excerpt":"Adds text to another text before the specified index.","ref":"/docs/reference/blocks/text/add-text/add-text-before-index-block/","tags":"","title":"Add Text Before Index"},{"body":"","categories":"","description":"Add a time period (Years, Months, Days, Hours, Minutes, Seconds and Milliseconds) to a date time.","excerpt":"Add a time period (Years, Months, Days, Hours, Minutes, Seconds and Milliseconds) to a date time.","ref":"/docs/reference/blocks/date-and-time/add-time-period/","tags":"","title":"Add Time Period"},{"body":"\r\rAdd Time Period (Cortex.Blocks.DateAndTime.AddTimePeriod.AddTimePeriodBlock)\nDescription Adds a Time Period to the specified Date Time.\nThis block can add both positive and negative TimePeriod values.\nExamples Add a positive Time Period This example will add 1 year, 1 month, 1 day, 1 hour and 30 minutes to 2021-01-01T00:00:00+00:00.\nProperties    Property Value Notes     Date Time ($)DateTime, with value of DateTimeOffset that has a text representation of 2021-01-01T00:00:00+00:00 ($)DateTime is a variable of type DateTimeOffset   Time Period ($)TimePeriod, with value of {\"Years\": 1, \"Months\": 1, \"Days\": 1, \"Hours\": 1, \"Minutes\": 30, \"Seconds\": 0, \"Milliseconds\": 0} ($)TimePeriod is a variable of type TimePeriod    Result Adding 1 year, 1 month, 1 day, 1 hour and 30 minutes to 2021-01-01T00:00:00+00:00 will result in the variable ($)DateTime being updated. Its text representation will be in the ISO 8601 Standard, which can be seen below:\n\"2022-02-02T01:30:00+00:00\"  Add a negative Time Period This example will add -1 year to 2021-01-01T00:00:00+00:00.\nProperties    Property Value Notes     Date Time ($)DateTime, with value of DateTimeOffset that has a text representation of 2021-01-01T00:00:00+00:00 ($)DateTime is a variable of type DateTimeOffset   Time Period ($)TimePeriod, with value of {\"Years\": -1, \"Months\": 0, \"Days\": 0, \"Hours\": 0, \"Minutes\": 0, \"Seconds\": 0, \"Milliseconds\": 0} ($)TimePeriod is a variable of type TimePeriod    Result Adding -1 year from 2021-01-01T00:00:00+00:00 will result in 1 year being subtracted and the variable ($)DateTime being updated. Its text representation will be in the ISO 8601 Standard, which can be seen below:\n\"2020-01-01T00:00:00+00:00\"  Properties Date Time The Date Time to add the Time Period to.\nIts text representation will be in the ISO 8601 Standard (e.g. 2021-11-05T08:48:08.0307614+00:00).\nFor more information about Date and Time, please see Working with Dates and Time.\n         Data Type DateTimeOffset   Property Type InputOutput   Default Value ($)DateTime with DateTimeOffset value that has a text representation of 0001-01-01T00:00:00+00:00    Time Period The Time Period to add to the Date Time to.\nTime Period can have positive and negative components where components are:\n Years Months Days Hours Minutes Seconds Milliseconds  When adding a Time Period, the block will first add years, followed by months, days, hours, minutes, seconds and finally milliseconds.\nWhen adding months, if the current day component is greater than the last day in the resultant month, it will update the day to the last day for that month (e.g. adding one month onto 2021-01-31T23:59:59+00:00 will equate to 2021-02-28T23:59:59+00:00).\nFor more information about Date and Time, please see Working with Dates and Time.\n         Data Type TimePeriod   Property Type Input   Default Value ($)TimePeriod with value {\"Years\": 0, \"Months\": 0, \"Days\": 0, \"Hours\": 0, \"Minutes\": 0, \"Seconds\": 0, \"Milliseconds\": 0}    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     PropertyValueOutOfRangeException Thrown when adding Time Period to Date Time will result in the Date Time being less than 0001-01-01T00:00:00+00:00 or greater than 9999-12-31T23:59:59+00:00.    Remarks Dates and Time The default text representation of Date and Time will be in the ISO 8601 Standard (e.g. 2021-11-05T08:48:08.0307614+00:00).\nFor more information, please see Working with Dates and Time.\nOrder of calculations When adding a Time Period, the block will first add years, followed by months, days, hours, minutes, seconds and finally milliseconds.\nAddition of Months When adding months to the Date Time, if the current day component is greater than the last day in the resultant month, it will update the day to the last day for that month (e.g. adding one month onto 2021-01-31T23:59:59+00:00 will equate to 2021-02-28T23:59:59+00:00).\nDaylight Savings This block copes with UTC time offsets but does not know anything about which time zone the Date Time represents; as a result it cannot take daylight savings into account as these are related to time zones rather than UTC time offsets.\n","categories":"","description":"Adds a Time Period to a specified Date Time.","excerpt":"Adds a Time Period to a specified Date Time.","ref":"/docs/reference/blocks/date-and-time/add-time-period/add-time-period-block/","tags":"","title":"Add Time Period"},{"body":"Advanced configuration changes Advanced configuration (such as port changes) can be undertaken by taking the following steps before running the PowerShell script. Some values will be modified by the script and they will take precedence, but those parameters can be removed from the script and this file used entirely if required.\n  In the “Cortex Evolution - Innovation 2022-RC.2022.1.4 - Installation Scripts” folder, locate the file “Cortex.Innovation.Install.Config.json” and open it with a text editor.\n  Change the configuration file according to your cluster, referring to the following example and details:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85  { \"customers\": [ { \"name\": \"Customer1\",  \"isPrimary\": true, \"rules\": { \"clientConnectionEndpointPort\": \"8001\", \"clusterConnectionEndpointPort\": \"8002\", \"leaseDriverEndpointPort\": \"8003\", \"serviceConnectionEndpointPort\": \"8004\", \"httpGatewayEndpointPort\": \"9080\", \"reverseProxyEndpointPort\": \"9081\", \"applicationPorts\": \"10010-10500\", \"ephemeralPorts\": \"10501-20000\" }, \"loadBalancer\": { \"installDirectory\": \"c:\\\\ProgramData\\\\loadbalancer\",  \"protocol\": \"udp\", \"balance\": \"roundrobin\", \"host\": \"lb-server:162\",  \"applicationPort\": \"10001\", \"adminCertificate\": \"loadBalancerCert\"  }, \"servers\": [ { \"serverName\": \"ha-server1\", \"iPAddress\": \"192.168.1.1\"  }, { \"serverName\": \"ha-server2\", \"iPAddress\": \"192.168.1.2\"  }, { \"serverName\": \"ha-server3\", \"iPAddress\": \"192.168.1.3\"  } ] } ], \"servers\": { \"ha-server1\": {  \"faultDomain\": \"fd:/fd1\", \"serverCertificate\": \"serverCert\"  }, \"ha-server2\": {  \"faultDomain\": \"fd:/fd2\", \"serverCertificate\": \"serverCert\"  }, \"ha-server3\": {  \"faultDomain\": \"fd:/fd3\", \"serverCertificate\": \"serverCert\"  } }, \"rules\": { \"windowsSmbRemoteRegistry\": [ \"135\", \"137\", \"138\", \"139\", \"445\" ], \"rabbitMqAmqpPorts\": [ \"5671\" ], \"rabbitMqEpmdPort\": \"4369\", \"rabbitMqErlangDistributionClientPorts\": \"35672-35682\", \"rabbitMqErlangDistributionServerPort\": \"25672\", \"rabbitMqManagementApiPort\": \"15671\" }, \"serverCertificates\": { \"serverCert\": { \"pfxCertificatePath\": \"C:\\\\Certificates\\\\wildCardCert.pfx\", \"pfxCertificatePassword\": \"pfxPassword\", \"pemRootCertificatePath\": \"\" }  }, \"adminCertificates\": { \"loadBalancerCert\": { \"pfxCertificatePath\": \"C:\\\\Certificates\\\\lbCert.pfx\", \"pfxCertificatePassword\": \"pfxPassword\", \"pemRootCertificatePath\": \"\" }  } }       Line Description     4 A name identifying the platform being installed. This should have no spaces or symbols. It will be appended to the node names that are displayed in the Service Fabric management tool.   16-23 If the bundled load balancer is not being used, delete these lines TODO: this will cause the line numbers to be wrong!!!   17 A local empty or non-existent directory on the load balancer server that the load balancer can be installed in. The directory path will be created if it does not exist. The installation user must have permissions to create and write to directories here. Ensure that all backslashes are escaped with another backslash. Environment variables cannot be used.   20 The computer name and port of the server that the load balancer should run on. This cannot be an IP address. The port must not be used by anything else.   22 The name of a certificate entry in the adminCertificates section. If this line is removed, an auto-generated self-signed certificate will be used.   26, 30, 24 The short computer names of the HA nodes. These must not contain the domain. The installation will be run on the first of these nodes.   27, 31, 35 The respective IPv4 addresses of the HA nodes.   41, 45, 49 These keys should be changed to the computer names of the HA nodes to match those on lines 26, 30 and 24   43, 47, 51 The name of a certificate entry in the serverCertificates section. This should be the same for all HA servers. If these lines are removed, an auto-generated self-signed certificate will be used. Self-signed certificates are not recommended for production systems.   72-74 Skip configuring these lines if self-signed certificates are being used.   79-81 Skip configuring these lines if self-signed certificates are being used or if the bundled load balancer is not being used.   73 This is the local path of a .PFX certificate file on the first HA server, containing a full chain certificate with private key. Ensure that all backslashes are escaped with another backslash. Environment variables cannot be used.   74 The password used to secure the .PFX file.   75 This only needs to be used if the installation has failed due to a missing root certificate. See [Troubleshooting Root Certificate Error] for information.   80 This is the local path of a .PFX certificate file on the first HA server, containing a full chain certificate with private key. Ensure that all backslashes are escaped with another backslash. Environment variables cannot be used.   81 The password used to secure the .PFX file.   82 This only needs to be used if the installation has failed due to a missing root certificate. See [Troubleshooting Root Certificate Error] for information.      Save and close the config file.\n  ","categories":"","description":"Information on installing Cortex across multiple on-premise servers with high availability (HA), with non-default installation values.\n","excerpt":"Information on installing Cortex across multiple on-premise servers with high availability (HA), with non-default installation values.\n","ref":"/docs/getting-started/on-premise/advanced/advanced-config-changes/","tags":"","title":"Advanced Configuration Changes"},{"body":"","categories":"","description":"Data types used to represent all other data types.","excerpt":"Data types used to represent all other data types.","ref":"/docs/reference/data-types/all/","tags":"","title":"All"},{"body":"Alternative architectures It is possible to minimise the number of servers used by installing SQL Express/SQL Server, Cortex Gateway and the Flow Debugger Service on either the load balancer machine or one of the application servers (4 server architecture), as shown below. A 3 node architecture is not possible as the load balancer cannot route requests to itself.\n\r\r4 Server Architecture Diagram - Web Applications on Load Balancer Server\r\r\r\r4 Server Architecture Diagram - Web Applications on Application Server\r\r\rA number of other configurations are also possible, where any combination of the load balancer, Cortex Gateway, Flow Debugger Service and Databases can be on any combination of servers. This can be particularly relevant for adding Cortex Innovation to an existing Gateway installation.\n","categories":"","description":"Information on installing Cortex on alternative architectures.\n","excerpt":"Information on installing Cortex on alternative architectures.\n","ref":"/docs/getting-started/on-premise/advanced/alternative-architectures/","tags":"","title":"Alternative Architectures"},{"body":"AnyCommand (Cortex.DataTypes.Data.AnyCommand)\nSummary Properties Command Text Parameters Known limitations None\nSee also TODO:\n ICommand AnyCommands QueryCommand NonQueryCommand  ","categories":"","description":"Holds the information for parsing a command, running a single query and non query command on a data source.","excerpt":"Holds the information for parsing a command, running a single query and non query command on a data source.","ref":"/docs/reference/data-types/data/anycommand/","tags":"","title":"AnyCommand"},{"body":"AnyCommands (Cortex.DataTypes.Data.AnyCommands)\nSummary Properties Command Text Parameters Known limitations None\nSee also TODO:\n ICommand AnyCommand QueryCommand NonQueryCommand  ","categories":"","description":"Holds the information for parsing a command, running multiple query and non query commands on a data source.","excerpt":"Holds the information for parsing a command, running multiple query and non query commands on a data source.","ref":"/docs/reference/data-types/data/anycommands/","tags":"","title":"AnyCommands"},{"body":"This is the blog section. It has two categories: News and Releases.\nFiles in these directories will be listed in reverse chronological order.\n","categories":"","description":"","excerpt":"This is the blog section. It has two categories: News and Releases.\nFiles in these directories will be listed in reverse chronological order.\n","ref":"/blog/","tags":"","title":"Docsy Blog"},{"body":"Boolean (System.Boolean)\nSummary The Boolean data type is used to represent a logical value of true or false.\n         Category: Conditional Logic   Name: Boolean   Full Name: System.Boolean   Alias: bool   Description: A logical value of true or false.   Size: 1 bit   Default Value: false   Can be used as: Nullable\u003cBoolean\u003e, Object, dynamic   Can be cast to: N/A    Remarks Create a Boolean The following table shows some of the ways that a Boolean can be created.\n   Method Example Result Editor Support Notes     Declare a Boolean literal true true Literal, Expression True    false false Literal, Expression False   Use a Boolean expression 1 == 1 true Expression Uses equals operator    1 != 1 false Expression Uses not equals operator    1 \u003e 0 true Expression Uses greater than operator    1 \u003c 0 false Expression Uses less than operator    1 \u003e= 0 true Expression Uses greater than or equals operator    1 \u003c= 0 false Expression Uses less than or equals operator    true \u0026\u0026 false false Expression Uses logical AND operator    true || false true Expression Uses logical OR operator    !(true || false) false Expression Uses logical NOT operator    Boolean.Parse(\"true\") true Expression Attempts to parse text and convert it to a Boolean value. See Boolean.Parse    Convert.ToBoolean(\"true\") true Expression Attempts to convert text to a Boolean value. See Convert.ToBoolean    Convert Boolean to Text The following table shows some of the ways that a Boolean can be converted to text.\n   Method Example Result Editor Support Notes     Use ToString true.ToString() \"True\" Expression See Boolean.ToString    ($)BooleanVariable.ToString() where ($)BooleanVariable has a value of true \"True\" Expression See Boolean.ToString   Use Convert.ToString Convert.ToString(true) \"True\" Expression See Convert.ToString    Convert.ToString(($)BooleanVariable) where ($)BooleanVariable has a value of true \"True\" Expression See Convert.ToString   Use Convert Object To Text block where Object property has a value of true \"True\" N/A See Convert Object To Text   Use Convert Object To Json block where Object property has a value of true \"true\" N/A See Convert Object To Json    Property Editor Support  The Expression Editor is available for Input properties where the data type is Boolean. The Literal Editor is available for Input properties where the data type is Boolean.  Expression syntax is not supported within the Literal Editor for the Boolean data type.   The Variable Editor is available for InputOutput and Output properties where the data type is Boolean.  Known Limitations None\nSee Also Related Types None\nRelated Concepts None\nExternal Documentation  System.Boolean  ","categories":"","description":"Used to represent a logical value of `true` or `false`.","excerpt":"Used to represent a logical value of `true` or `false`.","ref":"/docs/reference/data-types/conditional-logic/boolean/","tags":"","title":"Boolean"},{"body":"CannotModifyReadOnlyDictionaryException (Cortex.Exceptions.Dictionaries.CannotModifyReadOnlyDictionaryException)\nThe exception thrown when trying to modify a read-only dictionary.\n Dictionaries implementing IDictionary\u003cTKey, TItem\u003e have the option to be read-only.\n The format of the exception message is as follows:\n\"'\u003cproperty-display-name\u003e' cannot be because it's read-only. Please click the HelpLink for more information on how to fix this.\" How to fix If the dictionary was written directly into the block property using an expression, use a dictionary type that is not read-only, such as Dictionary\u003cTKey, TItem\u003e.\nWhen using a variable, convert the read-only dictionary to a dictionary that can be written to by using the .ToDictionary(item =\u003e item.Key, item =\u003e item.Value) expression like follows:\n($)Dictionary.ToDictionary(item =\u003e item.Key, item =\u003e item.Value); TODO: Confirm if this is all correct\n","categories":"","description":"The exception thrown when trying to modify a read-only dictionary.","excerpt":"The exception thrown when trying to modify a read-only dictionary.","ref":"/docs/reference/exceptions/dictionaries/cannotmodifyreadonlydictionaryexception/","tags":"","title":"CannotModifyReadOnlyDictionaryException"},{"body":"CannotModifyReadOnlyListException (Cortex.Exceptions.Lists.CannotModifyReadOnlyListException)\nThe exception thrown when trying to modify a read-only list.\n Lists deriving from IList\u003cT\u003e have the option to be read-only.\n The format of the exception message is as follows:\n\"The value of '\u003cproperty-display-name\u003e' cannot be modified. This is because the value of '\u003cproperty-display-name\u003e' is read-only. See the CannotModifyReadOnlyListException help page for more information on how to fix this.\" How to fix If the list was written directly into the block property using an expression, use a list type that is not read-only, such as List\u003cT\u003e.\nWhen using a variable, convert the list to a list that can be written to by using the .ToList() expression like follows:\n($)List.ToList() TODO: Confirm if this is all correct - look at cannotmodifyreadonlydictionaryexception for consistency\n","categories":"","description":"The exception thrown when trying to modify a read-only list.","excerpt":"The exception thrown when trying to modify a read-only list.","ref":"/docs/reference/exceptions/lists/cannotmodifyreadonlylistexception/","tags":"","title":"CannotModifyReadOnlyListException"},{"body":"","categories":"","description":"Check if a file exists.","excerpt":"Check if a file exists.","ref":"/docs/reference/blocks/files-and-folders/check-file/","tags":"","title":"Check File Exists"},{"body":"\r\rCheck File Exists (Cortex.Blocks.FilesAndFolders.CheckFile.CheckFileExistsBlock)\nDescription Checks if a File Exists at the specified File Path.\nExamples File exists at the specified File Path This example will check if \"C:\\Windows\\System32\\cmd.exe\" exists on the Windows server executing the flow.\nProperties    Property Value Notes     File Path ($)FilePath, with value @\"C:\\Windows\\System32\\cmd.exe\" ($)FilePath is a variable of type String   File Exists ($)FileExists, with no value ($)FileExists is a variable that will be set to a Boolean value    Result \"C:\\Windows\\System32\\cmd.exe\" is the command prompt application on Windows machines. Checking this on the Windows server executing the flow will result in the variable ($)FileExists being updated to the following:\ntrue  File does not exist at the specified File Path This example will check if \"/etc/passwd\" exists on the Windows server executing the flow.\nProperties    Property Value Notes     File Path ($)FilePath, with value \"/etc/passwd\" ($)FilePath is a variable of type String   File Exists ($)FileExists, with no value ($)FileExists is a variable that will be set to a Boolean value    Result \"/etc/passwd\" is a file that exists on Linux machines containing the list of system accounts. Checking this on the Windows server executing the flow will result in the variable ($)FileExists being updated to the following:\nfalse  Properties File Path The File Path to check a file exists at.\nThe File Path is case-insensitive, and any trailing spaces will be automatically removed.\nFor information about the supported file path formats (i.e. absolute, relative, UNC etc.) and examples of each, please see File \u0026 Folder Paths.\n         Data Type String   Property Type Input   Default Value ($)FilePath with value null    File Exists The result of the file exists check.\nIf the file exists at the specified File Path, the specified variable will be set to true, otherwise it will be set to false.\n         Data Type Boolean   Property Type Output   Default Value ($)FileExists with no value    Exceptions No exceptions are thrown by the block.\nRemarks File Paths For information about the supported file path formats (i.e. absolute, relative, UNC etc.) and examples of each, please see File \u0026 Folder Paths.\nFile Path needs escaping File Path requires \\ characters to be escaped, otherwise each unescaped \\ will be reported as an Invalid property value message when trying to debug the flow.\nEscaping can be done in two ways:\n Escaping the \\ character with another \\ character (e.g. \"C:\\\\Windows\\\\System32\\\\cmd.exe\"), or Prepending an @ character before the start of the File Path (e.g. @\"C:\\Windows\\System32\\cmd.exe\")  Null File Path If File Path is null the variable specified in the File Exists property will be set to false.\nEmpty File Path If File Path is empty (i.e. \"\") the variable specified in the File Exists property will be set to false.\nInvalid File Path If File Path is invalid (i.e. contains any of the following characters: \", *, ?, |, \u003c, \u003e, :, \\, /) the variable specified in the File Exists property will be set to false.\nFile Path points to a folder If File Path points to a folder, the variable specified in the File Exists property will be set to false.\nTo check if a folder exists, use the Check Folder Exists block.\nFile Path contains leading spaces If File Path contains leading spaces they are not removed; however, trailing spaces are removed.\nError occurs whilst checking if the file exists If any error occurs whilst checking if a file exists at the specified File Path, the variable specified in the File Exists property will be set to false.\nUser does not have necessary permissions to check if the file exists If the user the flow is executing as does not have permissions to check if a file exists at the specified File Path, the variable specified in the File Exists property will be set to false.\n","categories":"","description":"Checks if a file exists at the specified file path.","excerpt":"Checks if a file exists at the specified file path.","ref":"/docs/reference/blocks/files-and-folders/check-file/check-file-exists-block/","tags":"","title":"Check File Exists"},{"body":"","categories":"","description":"Check if a folder exists.","excerpt":"Check if a folder exists.","ref":"/docs/reference/blocks/files-and-folders/check-folder/","tags":"","title":"Check Folder Exists"},{"body":"\r\rCheck Folder Exists (Cortex.Blocks.FilesAndFolders.CheckFolder.CheckFolderExistsBlock)\nDescription Checks if a Folder Exists at the specified Folder Path.\nExamples Folder exists at the specified Folder Path This example will check if \"C:\\Windows\\System32\" exists on the Windows server executing the flow.\nProperties    Property Value Notes     Folder Path ($)FolderPath, with value @\"C:\\Windows\\System32\" ($)FolderPath is a variable of type String   Folder Exists ($)FolderExists, with no value ($)FolderExists is a variable that will be set to a Boolean value    Result \"C:\\Windows\\System32\" is the folder on Windows machines that contains files critical to the functioning of the operating system. Checking this on the Windows server executing the flow will result in the variable ($)FolderExists being updated to the following:\ntrue  Folder does not exist at the specified Folder Path This example will check if \"/etc\" exists on the Windows server executing the flow.\nProperties    Property Value Notes     Folder Path ($)FolderPath, with value \"/etc\" ($)FolderPath is a variable of type String   Folder Exists ($)FolderExists, with no value ($)FolderExists is a variable that will be set to a Boolean value    Result \"/etc\" is the folder on Linux machines containing system configuration files. Checking this on the Windows server executing the flow will result in the variable ($)FolderExists being updated to the following:\nfalse  Properties Folder Path The Folder Path to check a folder exists at.\nThe Folder Path is case-insensitive, any trailing spaces will be automatically removed, and can end with or without a trailing \\ (e.g. @\"C:\\Windows\\System32\" or @\"C:\\Windows\\System32\\\").\nFor information about the supported folder path formats (i.e. absolute, relative, UNC etc.) and examples of each, please see File \u0026 Folder Paths.\n         Data Type String   Property Type Input   Default Value ($)FolderPath with value null    Folder Exists The result of the folder exists check.\nIf the folder exists at the specified Folder Path, the specified variable will be set to true, otherwise it will be set to false.\n         Data Type Boolean   Property Type Output   Default Value ($)FolderExists with no value    Exceptions No exceptions are thrown by the block.\nRemarks Folder Paths For information about the supported folder path formats (i.e. absolute, relative, UNC etc.) and examples of each, please see File \u0026 Folder Paths.\nFolder Path needs escaping Folder Path requires \\ characters to be escaped, otherwise each unescaped \\ will be reported as an Invalid property value message when trying to debug the flow.\nEscaping can be done in two ways:\n Escaping the \\ character with another \\ character (e.g. \"C:\\\\Windows\\\\System32\"), or Prepending an @ character before the start of the Folder Path (e.g. @\"C:\\Windows\\System32\")  Null Folder Path If Folder Path is null the variable specified in the Folder Exists property will be set to false.\nEmpty Folder Path If Folder Path is empty (i.e. \"\") the variable specified in the Folder Exists property will be set to false.\nInvalid Folder Path If Folder Path is invalid (i.e. contains any of the following characters: \", *, ?, |, \u003c, \u003e, :, \\, /) the variable specified in the Folder Exists property will be set to false.\nFolder Path points to a file If Folder Path points to a file, the variable specified in the Folder Exists property will be set to false.\nTo check if a file exists, use the Check File Exists block.\nFolder Path contains leading spaces If Folder Path contains leading spaces they are not removed; however, trailing spaces are removed.\nError occurs whilst checking if the folder exists If any error occurs whilst checking if a folder exists at the specified Folder Path, the variable specified in the Folder Exists property will be set to false.\nUser does not have necessary permissions to check if the folder exists If the user the flow is executing as does not have permissions to check if a folder exists at the specified Folder Path, the variable specified in the Folder Exists property will be set to false.\n","categories":"","description":"Checks if a folder exists at the specified folder path.","excerpt":"Checks if a folder exists at the specified folder path.","ref":"/docs/reference/blocks/files-and-folders/check-folder/check-folder-exists-block/","tags":"","title":"Check Folder Exists"},{"body":"","categories":"","description":"Data types used for working with collections such as Lists, Dictionaries and Structures.","excerpt":"Data types used for working with collections such as Lists, Dictionaries and Structures.","ref":"/docs/reference/data-types/collections/","tags":"","title":"Collections"},{"body":"CommandException (Cortex.Exceptions.Data.CommandException)\nException thrown when any command execution has resulted in an exception being thrown.\nThe format of the exception message is as follows:\n\"TODO. Please click the HelpLink for more information on how to fix this.\" TODO: This is an example of how we can do exceptions with categories and error codes\n   Category Error Code Notes     BasicCredentials 300 Some notes    301 Some notes    302 Some notes   BasicCredentials 300 Some notes    301 Some notes    302 Some notes   BasicCredentials 300 Some notes    301 Some notes    302 Some notes   BasicCredentials 300 Some notes    301 Some notes    302 Some notes   BasicCredentials 300 Some notes    301 Some notes    302 Some notes   BasicCredentials 300 Some notes    301 Some notes    302 Some notes   BasicCredentials 300 Some notes    301 Some notes    302 Some notes   BasicCredentials 300 Some notes    301 Some notes    302 Some notes   BasicCredentials 300 Some notes    301 Some notes    302 Some notes    BasicCredentials.AccessTokenUri 300 How to fix TODO:\n301 How to fix TODO:\n302 How to fix TODO:\n","categories":"","description":"Exception thrown when any command execution has resulted in an exception being thrown.","excerpt":"Exception thrown when any command execution has resulted in an exception being thrown.","ref":"/docs/reference/exceptions/data/commandexception/","tags":"","title":"CommandException"},{"body":"","categories":"","description":"Exceptions related to commonly occurring errors","excerpt":"Exceptions related to commonly occurring errors","ref":"/docs/reference/exceptions/common/","tags":"","title":"Common"},{"body":"","categories":"","description":"","excerpt":"","ref":"/community/","tags":"","title":"Community"},{"body":"Complex Types ","categories":"","description":"This page describes the concept of Primitive Types.","excerpt":"This page describes the concept of Primitive Types.","ref":"/docs/reference/concepts/fundamentals/complex-types/","tags":"","title":"Complex Types"},{"body":"","categories":"","description":"Data types used for working with conditional logic.","excerpt":"Data types used for working with conditional logic.","ref":"/docs/reference/data-types/conditional-logic/","tags":"","title":"Conditional Logic"},{"body":"ConnectionDetails (Cortex.DataTypes.Data.ConnectionDetails)\nSummary Properties Known limitations None\nSee also TODO:\n","categories":"","description":"Holds the information used to establish and maintain a connection to a data source.","excerpt":"Holds the information used to establish and maintain a connection to a data source.","ref":"/docs/reference/data-types/data/connectiondetails/","tags":"","title":"ConnectionDetails"},{"body":"ConnectionType (Cortex.DataTypes.Data.ConnectionType)\nSummary Properties Known limitations None\nSee also TODO:\n","categories":"","description":"Specifies the type of data source for a data connection.","excerpt":"Specifies the type of data source for a data connection.","ref":"/docs/reference/data-types/data/connectiontype/","tags":"","title":"ConnectionType"},{"body":"\r\rContains All Text (Cortex.Blocks.Text.ContainsText.ContainsAllTextBlock)\nDescription Checks if Text contains all of the texts in a given set of Texts To Find.\nSearch Options can be specified to choose whether to use a ContainsText, PatternMatching or Regex search to perform the check.\nExamples Text contains all of the texts in Texts To Find This example will check whether \"The quick brown fox jumps over the lazy dog\" contains all of the texts in [\"The\", \"quick\", \"brown\", \"fox\"].\nIt performs a case-sensitive, culture-insensitive comparison of text.\nProperties    Property Value Notes     Text ($)Text, with value \"The quick brown fox jumps over the lazy dog\" ($)Text is a variable of type String   Texts To Find ($)TextsToFind, with value [\"The\", \"quick\", \"brown\", \"fox\"] ($)TextsToFind is a variable of type IEnumerable\u003cString\u003e   Search Options ($)SearchOptions, with value SearchOptions.ContainsText ($)SearchOptions is a variable of type SearchOptions   Comparison Type ($)ComparisonType, with value StringComparison.Ordinal ($)ComparisonType is a variable of type StringComparison   Contains All Text ($)ContainsAllText, with no value ($)ContainsAllText is a variable that will be set to a Boolean value    Result \"The quick brown fox jumps over the lazy dog\" contains all of the texts in [\"The\", \"quick\", \"brown\", \"fox\"]. Therefore, the variable ($)ContainsAllText will be updated to the following:\ntrue  Text does not contain all of the texts in Texts To Find This example will check whether \"The quick brown fox jumps over the lazy dog\" contains all of the texts in [\"the\", \"slow\", \"brown\", \"fox\"].\nIt performs a case-sensitive, culture-insensitive comparison of text.\nProperties    Property Value Notes     Text ($)Text, with value \"The quick brown fox jumps over the lazy dog\" ($)Text is a variable of type String   Texts To Find ($)TextsToFind, with value [\"the\", \"slow\", \"brown\", \"fox\"] ($)TextsToFind is a variable of type IEnumerable\u003cString\u003e   Search Options ($)SearchOptions, with value SearchOptions.ContainsText ($)SearchOptions is a variable of type SearchOptions   Comparison Type ($)ComparisonType, with value StringComparison.Ordinal ($)ComparisonType is a variable of type StringComparison   Contains All Text ($)ContainsAllText, with no value ($)ContainsAllText is a variable that will be set to a Boolean value    Result \"The quick brown fox jumps over the lazy dog\" does not contain all of the texts in [\"the\", \"slow\", \"brown\", \"fox\"]; \"slow\" is missing, and \"the\" does not match \"The\" as the specified Comparison Type uses case-sensitive matching. Therefore, the variable ($)ContainsAllText will be updated to the following:\nfalse  Text contains text that matches all of the patterns in Texts To Find This example will check whether \"The quick brown fox jumps over the lazy dog\" contains text that matches all of the patterns in [\"?he\", \"?uick\", \"*?own\", \"fox\"].\nIt performs a case-sensitive, culture-insensitive comparison of text.\nProperties    Property Value Notes     Text ($)Text, with value \"The quick brown fox jumps over the lazy dog\" ($)Text is a variable of type String   Texts To Find ($)TextsToFind, with value [\"?he\", \"?uick\", \"*?own\", \"fox\"] ($)TextsToFind is a variable of type IEnumerable\u003cString\u003e   Search Options ($)SearchOptions, with value SearchOptions.PatternMatching ($)SearchOptions is a variable of type SearchOptions   Comparison Type ($)ComparisonType, with value StringComparison.Ordinal ($)ComparisonType is a variable of type StringComparison   Contains All Text ($)ContainsAllText, with no value ($)ContainsAllText is a variable that will be set to a Boolean value    Result \"The quick brown fox jumps over the lazy dog\" contains text that matches all of the patterns in [\"?he\", \"?uick\", \"*?own\", \"fox\"]. Therefore, the variable ($)ContainsAllText will be updated to the following:\ntrue  Text contains text that matches all of the regexes in Texts To Find This example will check whether \"The quick brown fox jumps over the lazy dog\" contains text that matches all of the regexes in [\"^The\", \"(quick|fast)\", \"b.* \", \"(fox|Fox)\"].\nIt performs a case-sensitive, culture-insensitive comparison of text.\nProperties    Property Value Notes     Text ($)Text, with value \"The quick brown fox jumps over the lazy dog\" ($)Text is a variable of type String   Texts To Find ($)TextsToFind, with value [\"^The\", \"(quick|fast)\", \"b.* \", \"(fox|Fox)\"] ($)TextsToFind is a variable of type IEnumerable\u003cString\u003e   Search Options ($)SearchOptions, with value SearchOptions.Regex ($)SearchOptions is a variable of type SearchOptions   Comparison Type ($)ComparisonType, with value StringComparison.Ordinal ($)ComparisonType is a variable of type StringComparison   Contains All Text ($)ContainsAllText, with no value ($)ContainsAllText is a variable that will be set to a Boolean value    Result \"The quick brown fox jumps over the lazy dog\" contains text that matches all of the regexes in [\"^The\", \"(quick|fast)\", \"b.* \", \"(fox|Fox)\"]. Therefore, the variable ($)ContainsAllText will be updated to the following:\ntrue  Properties Text The Text to check whether it contains all of the texts in the given set of Texts To Find.\n         Data Type String   Property Type Input   Default Value ($)Text with value \"\"    Texts To Find The set of Texts To Find to check are all contained in Text.\n         Data Type IEnumerable\u003cString\u003e   Property Type Input   Default Value ($)TextsToFind with value []    Search Options Search Options can be specified to choose whether items in Texts To Find should be interpreted as a ContainsText, PatternMatching or Regex search:\n SearchOptions.ContainsText matches text exactly; as long as the Text contains the text specified in Texts To Find it will be considered a match. SearchOptions.PatternMatching allows wildcard text matching using Pattern Matching Syntax:  * wildcard character can be used to match 0 or more characters. ? wildcard character can be used to match 0 or 1 character. All other characters are treated as a literal character.   SearchOptions.Regex allows regex text matching using .Net Regex Syntax.  Please note that with SearchOptions.ContainsText overlapping matches are detected (e.g. searching for \"aa\" in \"aaa\" matches \"aa\" at index 0 and \"aa\" at index 1). With SearchOptions.Regex only \"aa\" at index 0 will be matched.\n         Data Type SearchOptions   Property Type Input   Default Value ($)SearchOptions with value SearchOptions.ContainsText    Comparison Type The Comparison Type specifying the rules used to determine whether each text in Texts To Find is contained in Text\nFor information about the supported values for the Comparison Type property and examples of how it is determined whether two pieces of text match, please see Text Equality.\n         Data Type StringComparison   Property Type Input   Default Value ($)ComparisonType with value StringComparison.Ordinal    Contains All Text The result of the contains all text check.\nIf all of the texts in Texts To Find are contained in Text, the specified variable will be set to true, otherwise it will be set to false.\n         Data Type Boolean   Property Type Output   Default Value ($)ContainsAllText with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     ArgumentException Thrown when Comparison Type is not one of the specified StringComparison types (e.g. (StringComparison)10).    Thrown when Search Options is not one of the specified SearchOptions types (e.g. (SearchOptions)10).   PropertyNullException Thrown when Texts To Find is null.   RegexMatchTimeoutException Thrown when Search Options is either SearchOptions.Regex or SearchOptions.PatternMatching and the execution time of the search exceeds 30 seconds.   RegexParsingFailedException Thrown when Search Options is SearchOptions.Regex and one or more items in Texts To Find are not a valid regex (e.g. ().    Remarks Comparison Types For information about the supported values for the Comparison Type property and examples of how it is determined whether two pieces of text match, please see Text Equality.\nNull or empty Text If Text is null or empty (i.e. \"\"), the variable specified in the Contains All Text property is set to false.\nNull or empty Texts To Find If Texts To Find is empty or contains any null or empty (i.e. \"\") text, the variable specified in the Contains All Text property is set to false.\nKnown Limitations If Search Options is set to SearchOptions.Regex or SearchOptions.PatternMatching and Comparison Type is set to StringComparison.CurrentCulture, some characters such as æ that is equivalent to ae may not evaluate as equal.\n","categories":"","description":"Checks if text contains all of the texts in a given set of texts.","excerpt":"Checks if text contains all of the texts in a given set of texts.","ref":"/docs/reference/blocks/text/contains-text/contains-all-text-block/","tags":"","title":"Contains All Text"},{"body":"\r\rContains Any Text (Cortex.Blocks.Text.ContainsText.ContainsAnyTextBlock)\nDescription Checks if Text contains any of the texts in a given set of Texts To Find.\nSearch Options can be specified to choose whether to use a ContainsText, PatternMatching or Regex search to perform the check.\nExamples Text contains any of the texts in Texts To Find This example will check whether \"The quick brown fox jumps over the lazy dog\" contains at least one of the texts in [\"The\", \"fast\", \"red\", \"fox\"].\nIt performs a case-sensitive, culture-insensitive comparison of text.\nProperties    Property Value Notes     Text ($)Text, with value \"The quick brown fox jumps over the lazy dog\" ($)Text is a variable of type String   Texts To Find ($)TextsToFind, with value [\"The\", \"fast\", \"red\", \"fox\"] ($)TextsToFind is a variable of type IEnumerable\u003cString\u003e   Search Options ($)SearchOptions, with value SearchOptions.ContainsText ($)SearchOptions is a variable of type SearchOptions   Comparison Type ($)ComparisonType, with value StringComparison.Ordinal ($)ComparisonType is a variable of type StringComparison   Contains Any Text ($)ContainsAnyText, with no value ($)ContainsAnyText is a variable that will be set to a Boolean value    Result \"The quick brown fox jumps over the lazy dog\" contains the text \"The\" and \"fox\" in [\"The\", \"fast\", \"red\", \"fox\"]. Therefore, the variable ($)ContainsAnyText will be updated to the following:\ntrue  Text does not contain any of the texts in Texts To Find This example will check whether \"The quick brown fox jumps over the lazy dog\" contains at least one of the texts in [\"the\", \"slow\", \"red\", \"Fox\"].\nIt performs a case-sensitive, culture-insensitive comparison of text.\nProperties    Property Value Notes     Text ($)Text, with value \"The quick brown fox jumps over the lazy dog\" ($)Text is a variable of type String   Texts To Find ($)TextsToFind, with value [\"the\", \"slow\", \"red\", \"Fox\"] ($)TextsToFind is a variable of type IEnumerable\u003cString\u003e   Search Options ($)SearchOptions, with value SearchOptions.ContainsText ($)SearchOptions is a variable of type SearchOptions   Comparison Type ($)ComparisonType, with value StringComparison.Ordinal ($)ComparisonType is a variable of type StringComparison   Contains Any Text ($)ContainsAnyText, with no value ($)ContainsAnyText is a variable that will be set to a Boolean value    Result \"The quick brown fox jumps over the lazy dog\" does not contain any of the texts in [\"the\", \"slow\", \"red\", \"Flow\"]; \"slow\" and \"red\" are both missing, and \"the\" and \"Fox\" do not match \"The\" and \"fox\" respectively as the specified Comparison Type uses case-sensitive matching. Therefore, the variable ($)ContainsAnyText will be updated to the following:\nfalse  Text contains text that matches any of the patterns in Texts To Find This example will check whether \"The quick brown fox jumps over the lazy dog\" contains text that matches any of the patterns in [\"?he\", \"Q?ick\", \"B*?wn\", \"Fox\"].\nIt performs a case-sensitive, culture-insensitive comparison of text.\nProperties    Property Value Notes     Text ($)Text, with value \"The quick brown fox jumps over the lazy dog\" ($)Text is a variable of type String   Texts To Find ($)TextsToFind, with value [\"?he\", \"Q?ick\", \"B*?wn\", \"Fox\"] ($)TextsToFind is a variable of type IEnumerable\u003cString\u003e   Search Options ($)SearchOptions, with value SearchOptions.PatternMatching ($)SearchOptions is a variable of type SearchOptions   Comparison Type ($)ComparisonType, with value StringComparison.Ordinal ($)ComparisonType is a variable of type StringComparison   Contains Any Text ($)ContainsAnyText, with no value ($)ContainsAnyText is a variable that will be set to a Boolean value    Result \"The quick brown fox jumps over the lazy dog\" contains text that matches one of the patterns in [\"?he\", \"Q?ick\", \"B*?wn\", \"Fox\"]; \"?he\" matches \"The\" and \"the\". Therefore, the variable ($)ContainsAnyText will be updated to the following:\ntrue  Text contains text that matches any of the regexes in Texts To Find This example will check whether \"The quick brown fox jumps over the lazy dog\" contains text that matches any of the regexes in [\"^The\", \"(Quick|Fast)\", \"b.* \", \"(fox|Fox)$\"].\nIt performs a case-sensitive, culture-insensitive comparison of text.\nProperties    Property Value Notes     Text ($)Text, with value \"The quick brown fox jumps over the lazy dog\" ($)Text is a variable of type String   Texts To Find ($)TextsToFind, with value [\"^The\", \"(Quick|Fast)\", \"b.* \", \"(fox|Fox)$\"] ($)TextsToFind is a variable of type IEnumerable\u003cString\u003e   Search Options ($)SearchOptions, with value SearchOptions.Regex ($)SearchOptions is a variable of type SearchOptions   Comparison Type ($)ComparisonType, with value StringComparison.Ordinal ($)ComparisonType is a variable of type StringComparison   Contains Any Text ($)ContainsAnyText, with no value ($)ContainsAnyText is a variable that will be set to a Boolean value    Result \"The quick brown fox jumps over the lazy dog\" contains text that matches any of the regexes in [\"^The\", \"(Quick|Fast)\", \"b.* \", \"(fox|Fox)$\"]; \"^The\" matches \"The\" at the start of the sentence. Therefore, the variable ($)ContainsAnyText will be updated to the following:\ntrue  Properties Text The Text to check whether it contains any of the texts in the given set of Texts To Find.\n         Data Type String   Property Type Input   Default Value ($)Text with value \"\"    Texts To Find The set of Texts To Find to check any are contained in Text.\n         Data Type IEnumerable\u003cString\u003e   Property Type Input   Default Value ($)TextsToFind with value []    Search Options Search Options can be specified to choose whether items in Texts To Find should be interpreted as a ContainsText, PatternMatching or Regex search:\n SearchOptions.ContainsText matches text exactly; as long as the Text contains the text specified in Texts To Find it will be considered a match. SearchOptions.PatternMatching allows wildcard text matching using Pattern Matching Syntax:  * wildcard character can be used to match 0 or more characters. ? wildcard character can be used to match 0 or 1 character. All other characters are treated as a literal character.   SearchOptions.Regex allows regex text matching using .Net Regex Syntax.  Please note that with SearchOptions.ContainsText overlapping matches are detected (e.g. searching for \"aa\" in \"aaa\" matches \"aa\" at index 0 and \"aa\" at index 1). With SearchOptions.Regex only \"aa\" at index 0 will be matched.\n         Data Type SearchOptions   Property Type Input   Default Value ($)SearchOptions with value SearchOptions.ContainsText    Comparison Type The Comparison Type specifying the rules used to determine whether each text in Texts To Find is contained in Text\nFor information about the supported values for the Comparison Type property and examples of how it is determined whether two pieces of text match, please see Text Equality.\n         Data Type StringComparison   Property Type Input   Default Value ($)ComparisonType with value StringComparison.Ordinal    Contains Any Text The result of the contains any text check.\nIf any of the texts in Texts To Find is contained in Text, the specified variable will be set to true, otherwise it will be set to false.\n         Data Type Boolean   Property Type Output   Default Value ($)ContainsAnyText with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     ArgumentException Thrown when Comparison Type is not one of the specified StringComparison types (e.g. (StringComparison)10).    Thrown when Search Options is not one of the specified SearchOptions types (e.g. (SearchOptions)10).   PropertyNullException Thrown when Texts To Find is null.   RegexMatchTimeoutException Thrown when Search Options is either SearchOptions.Regex or SearchOptions.PatternMatching and the execution time of the search exceeds 30 seconds.   RegexParsingFailedException Thrown when Search Options is SearchOptions.Regex and one or more items in Texts To Find are not a valid regex (e.g. ().    Remarks Comparison Types For information about the supported values for the Comparison Type property and examples of how it is determined whether two pieces of text match, please see Text Equality.\nNull or empty Text If Text is null or empty (i.e. \"\"), the variable specified in the Contains Any Text property is set to false.\nNull or empty Texts To Find If Texts To Find is empty or only contains null or empty (i.e. \"\") text, the variable specified in the Contains Any Text property is set to false.\nKnown Limitations If Search Options is set to SearchOptions.Regex or SearchOptions.PatternMatching and Comparison Type is set to StringComparison.CurrentCulture, some characters such as æ that is equivalent to ae may not evaluate as equal.\n","categories":"","description":"Checks if text contains any of the texts in a given set of texts.","excerpt":"Checks if text contains any of the texts in a given set of texts.","ref":"/docs/reference/blocks/text/contains-text/contains-any-text-block/","tags":"","title":"Contains Any Text"},{"body":"\r\rContains Item With Key (Cortex.Blocks.Dictionaries.ContainsItem.ContainsItemWithKeyBlock`3)\nDescription Checks if Dictionary contains at least one item with the specified Key.\nExamples Dictionary contains item with Key This example will check whether {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} contains at least one item with the key \"Key1\".\nProperties    Property Value Notes     Dictionary ($)Dictionary, with value {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} ($)Dictionary is a variable of type IDictionary\u003cString, Int32\u003e   Key ($)Key, with value \"Key1\" ($)Key is a variable of type String   Contains Item ($)ContainsItem, with no value ($)ContainsItem is a variable that will be set to a Boolean value    Result {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} contains one item with the key Key1. Therefore, the variable ($)ContainsItem will be updated to the following:\ntrue  Dictionary does not contain item with Key This example will check whether {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} contains at least one item with the key \"Key10\".\nProperties    Property Value Notes     Dictionary ($)Dictionary, with value {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} ($)Dictionary is a variable of type IDictionary\u003cString, Int32\u003e   Key ($)Key, with value \"Key10\" ($)Key is a variable of type String   Contains Item ($)ContainsItem, with no value ($)ContainsItem is a variable that will be set to a Boolean value    Result {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} does not contain any items with the key \"Key10\". Therefore, the variable ($)ContainsItem will be updated to the following:\nfalse  Properties Dictionary The Dictionary to check whether it contains at least one item with the specified Key.\nDictionary can be any IDictionary\u003cTKey, TItem\u003e, where TKey represents the type of keys used to lookup items in the Dictionary, and TItem represents the type of items in the Dictionary.\n         Data Type IDictionary\u003cTKey, TItem\u003e   Property Type Input   Default Value ($)Dictionary with value {}    Key The Key to check for matching items.\nFor information and examples of how it is determined whether an item has a specified key, please see Object Equality.\nFor information about what a key is, please see Keys.\n         Data Type TKey   Property Type Input   Default Value ($)Key with value null    Contains Item The result of the contains item check.\nIf Dictionary contains at least one item with the specified Key, the specified variable will be set to true, otherwise it will be set to false.\n         Data Type Boolean   Property Type Output   Default Value ($)ContainsItem with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     PropertyNullException Thrown when Dictionary or Key are null.    Remarks Key Equality For information and examples of how it is determined whether an item has a specified key, please see Object Equality.\nEmpty Dictionary If Dictionary is empty (i.e. {}), the variable specified in the Contains Item property is set to false.\nDefining dictionaries using literal syntax For information about how to define dictionaries using literal syntax, see Dictionary Literals.\nDefining dictionaries using expression syntax For information about how to define dictionaries using expression syntax, see Dictionary Expressions.\nDictionaries containing items with same data types vs different data types For information about the different types of dictionaries, including those that can contain only the same type of item, and those that can contain different types of item, see Dictionaries.\n","categories":"","description":"Checks if a Dictionary contains at least one item with the specified key.","excerpt":"Checks if a Dictionary contains at least one item with the specified key.","ref":"/docs/reference/blocks/dictionaries/contains-item/contains-item-with-key-block-3/","tags":"","title":"Contains Item With Key"},{"body":"\r\rContains Item With Key And Value (Cortex.Blocks.Dictionaries.ContainsItem.ContainsItemWithKeyAndValueBlock`3)\nDescription Checks if Dictionary contains at least one item with the specified Key and matching the specified Value.\nExamples Dictionary contains item with Key and Value This example will check whether {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} contains at least one item with the key \"Key1\" and value 1.\nProperties    Property Value Notes     Dictionary ($)Dictionary, with value {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} ($)Dictionary is a variable of type IDictionary\u003cString, Int32\u003e   Key ($)Key, with value \"Key1\" ($)Key is a variable of type String   Value ($)Value, with value 1 ($)Value is a variable of type Int32   Contains Item ($)ContainsItem, with no value ($)ContainsItem is a variable that will be set to a Boolean value    Result {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} contains one item with the key Key1 and value 1. Therefore, the variable ($)ContainsItem will be updated to the following:\ntrue  Dictionary does not contain item with Key and Value This example will check whether {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} contains at least one item with the key \"Key1\" and value 10.\nProperties    Property Value Notes     Dictionary ($)Dictionary, with value {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} ($)Dictionary is a variable of type IDictionary\u003cString, Int32\u003e   Key ($)Key, with value \"Key1\" ($)Key is a variable of type String   Value ($)Value, with value 10 ($)Value is a variable of type Int32   Contains Item ($)ContainsItem, with no value ($)ContainsItem is a variable that will be set to a Boolean value    Result {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} contains one item with the key \"Key1\", but its value is not 10. Therefore, the variable ($)ContainsItem will be updated to the following:\nfalse  Properties Dictionary The Dictionary to check whether it contains at least one item with the specified Key and matching Value.\nDictionary can be any IDictionary\u003cTKey, TItem\u003e, where TKey represents the type of keys used to lookup items in the Dictionary, and TItem represents the type of items in the Dictionary.\n         Data Type IDictionary\u003cTKey, TItem\u003e   Property Type Input   Default Value ($)Dictionary with value {}    Key The Key to check for matching items.\nFor information and examples of how it is determined whether an item has a specified key, please see Object Equality.\nFor information about what a key is, please see Keys.\n         Data Type TKey   Property Type Input   Default Value ($)Key with value null    Value The Value to check for matching items.\nFor information and examples of how it is determined whether an item matches a specified value, please see Object Equality.\n         Data Type TItem   Property Type Input   Default Value ($)Value with value null    Contains Item The result of the contains item check.\nIf Dictionary contains at least one item with the specified Key and matching Value, the specified variable will be set to true, otherwise it will be set to false.\n         Data Type Boolean   Property Type Output   Default Value ($)ContainsItem with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     InvalidPropertyValueException Thrown when Value is null and Dictionary only accepts non-nullable value types.   PropertyNullException Thrown when Dictionary or Key are null.    Remarks Key Equality For information and examples of how it is determined whether an item has a specified key, please see Object Equality.\nItem Equality For information and examples of how it is determined whether an item matches a specified value, please see Object Equality.\nEmpty Dictionary If Dictionary is empty (i.e. {}), the variable specified in the Contains Item property is set to false.\nDefining dictionaries using literal syntax For information about how to define dictionaries using literal syntax, see Dictionary Literals.\nDefining dictionaries using expression syntax For information about how to define dictionaries using expression syntax, see Dictionary Expressions.\nDictionaries containing items with same data types vs different data types For information about the different types of dictionaries, including those that can contain only the same type of item, and those that can contain different types of item, see Dictionaries.\n","categories":"","description":"Checks if a Dictionary contains at least one item with the specified key and matching the specified value.","excerpt":"Checks if a Dictionary contains at least one item with the specified key and matching the specified value.","ref":"/docs/reference/blocks/dictionaries/contains-item/contains-item-with-key-and-value-block-3/","tags":"","title":"Contains Item With Key And Value"},{"body":"\r\rContains Item With Value (Cortex.Blocks.Dictionaries.ContainsItem.ContainsItemWithValueBlock`3)\nDescription Checks if Dictionary contains at least one item matching Value.\nExamples Dictionary contains item with Value This example will check whether {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} contains the value 1.\nProperties    Property Value Notes     Dictionary ($)Dictionary, with value {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} ($)Dictionary is a variable of type IDictionary\u003cString, Int32\u003e   Value ($)Value, with value 1 ($)Value is a variable of type Int32   Contains Item ($)ContainsItem, with no value ($)ContainsItem is a variable that will be set to a Boolean value    Result {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} contains two items with the value 1. Therefore, the variable ($)ContainsItem will be updated to the following:\ntrue  Dictionary does not contain item with Value This example will check whether {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} contains the value 10.\nProperties    Property Value Notes     Dictionary ($)Dictionary, with value {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} ($)Dictionary is a variable of type IDictionary\u003cString, Int32\u003e   Value ($)Value, with value 10 ($)Value is a variable of type Int32   Contains Item ($)ContainsItem, with no value ($)ContainsItem is a variable that will be set to a Boolean value    Result {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} does not contain any items with the value 10. Therefore, the variable ($)ContainsItem will be updated to the following:\nfalse  Properties Dictionary The Dictionary to check whether it contains at least one item matching the specified Value.\nItems are considered matching if they have the specified Value.\nDictionary can be any IDictionary\u003cTKey, TItem\u003e, where TKey represents the type of keys used to lookup items in the Dictionary, and TItem represents the type of items in the Dictionary.\n         Data Type IDictionary\u003cTKey, TItem\u003e   Property Type Input   Default Value ($)Dictionary with value {}    Value The Value to check for matching items.\nFor information and examples of how it is determined whether an item matches a specified value, please see Object Equality.\n         Data Type TItem   Property Type Input   Default Value ($)Value with value null    Contains Item The result of the contains item check.\nIf Dictionary contains at least one item matching the specified Value, the specified variable will be set to true, otherwise it will be set to false.\n         Data Type Boolean   Property Type Output   Default Value ($)ContainsItem with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     InvalidPropertyValueException Thrown when Value is null and Dictionary only accepts non-nullable value types.   PropertyNullException Thrown when Dictionary is null.    Remarks Item Equality For information and examples of how it is determined whether an item matches a specified value, please see Object Equality.\nEmpty Dictionary If Dictionary is empty (i.e. {}), the variable specified in the Contains Item property is set to false.\nDefining dictionaries using literal syntax For information about how to define dictionaries using literal syntax, see Dictionary Literals.\nDefining dictionaries using expression syntax For information about how to define dictionaries using expression syntax, see Dictionary Expressions.\nDictionaries containing items with same data types vs different data types For information about the different types of dictionaries, including those that can contain only the same type of item, and those that can contain different types of item, see Dictionaries.\n","categories":"","description":"Checks if a Dictionary contains at least one item matching the specified value.","excerpt":"Checks if a Dictionary contains at least one item matching the specified value.","ref":"/docs/reference/blocks/dictionaries/contains-item/contains-item-with-value-block-3/","tags":"","title":"Contains Item With Value"},{"body":"\r\rContains Item With Value (Cortex.Blocks.Lists.ContainsItem.ContainsItemWithValueBlock`2)\nDescription Checks if List contains at least one item matching Value.\nExamples List contains item with Value This example will check whether [1, 2, 3, 3, 2, 1] contains the value 1.\nProperties    Property Value Notes     List ($)List, with value [1, 2, 3, 3, 2, 1] ($)List is a variable of type IList\u003cInt32\u003e   Value ($)Value, with value 1 ($)Value is a variable of type Int32   Contains Item ($)ContainsItem, with no value ($)ContainsItem is a variable that will be set to a Boolean value    Result [1, 2, 3, 3, 2, 1] contains two items with the value 1. Therefore, the variable ($)ContainsItem will be updated to the following:\ntrue  List does not contain item with Value This example will check whether [1, 2, 3, 3, 2, 1] contains the value 10.\nProperties    Property Value Notes     List ($)List, with value [1, 2, 3, 3, 2, 1] ($)List is a variable of type IList\u003cInt32\u003e   Value ($)Value, with value 10 ($)Value is a variable of type Int32   Contains Item ($)ContainsItem, with no value ($)ContainsItem is a variable that will be set to a Boolean value    Result [1, 2, 3, 3, 2, 1] does not contain any items with the value 10. Therefore, the variable ($)ContainsItem will be updated to the following:\nfalse  Properties List The List to check whether it contains at least one item matching the specified Value.\nItems are considered matching if they have the specified Value.\nList can be any IList\u003cTItem\u003e, where TItem represents the type of items in the List.\n         Data Type IList\u003cTItem\u003e   Property Type Input   Default Value ($)List with value []    Value The Value to check for matching items.\nFor information and examples of how it is determined whether an item matches a specified value, please see Object Equality.\n         Data Type TItem   Property Type Input   Default Value ($)Value with value null    Contains Item The result of the contains item check.\nIf List contains at least one item matching the specified Value, the specified variable will be set to true, otherwise it will be set to false.\n         Data Type Boolean   Property Type Output   Default Value ($)ContainsItem with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     InvalidPropertyValueException Thrown when Value is null and List only accepts non-nullable value types.   PropertyNullException Thrown when List is null.    Remarks Item Equality For information and examples of how it is determined whether an item matches a specified value, please see Object Equality.\nEmpty List If List is empty (i.e. []), the variable specified in the Contains Item property is set to false.\nDefining lists using literal syntax For information about how to define lists using literal syntax, see List Literals.\nDefining lists using expression syntax For information about how to define lists using expression syntax, see List Expressions.\nLists containing items of a single data type vs multiple data types For information about the different types of lists, including those that can contain only a single type of item, and those that can contain multiple types of item, see Lists.\n","categories":"","description":"Checks if a List contains at least one item matching the specified value.","excerpt":"Checks if a List contains at least one item matching the specified value.","ref":"/docs/reference/blocks/lists/contains-item/contains-item-with-value-block-2/","tags":"","title":"Contains Item With Value"},{"body":"","categories":"","description":"Check if an item or multiple items are contained in a dictionary.","excerpt":"Check if an item or multiple items are contained in a dictionary.","ref":"/docs/reference/blocks/dictionaries/contains-item/","tags":"","title":"Contains Item(s)"},{"body":"","categories":"","description":"Check if an item or multiple items are contained in a list.","excerpt":"Check if an item or multiple items are contained in a list.","ref":"/docs/reference/blocks/lists/contains-item/","tags":"","title":"Contains Item(s)"},{"body":"\r\rContains Items With Keys (Cortex.Blocks.Dictionaries.ContainsItem.ContainsItemsWithKeysBlock`3)\nDescription Checks if Dictionary contains at least one item with each of the specified Keys.\nExamples Dictionary contains items with Keys This example will check whether {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} contains at least one item with each of the keys in [\"Key1\", \"Key2\", \"Key3\"].\nProperties    Property Value Notes     Dictionary ($)Dictionary, with value {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} ($)Dictionary is a variable of type IDictionary\u003cString, Int32\u003e   Keys ($)Keys, with value [\"Key1\", \"Key2\", \"Key3\"] ($)Keys is a variable of type IEnumerable\u003cString\u003e   Contains Items ($)ContainsItems, with no value ($)ContainsItems is a variable that will be set to a Boolean value    Result {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} contains at least one item matching each of the values in [\"Key1\", \"Key2\", \"Key3\"]; it contains one item with the key \"Key1\", one item with the key \"Key2\" and one item with the key \"Key3\". Therefore, the variable ($)ContainsItems will be updated to the following:\ntrue  Dictionary does not contain items with Keys This example will check whether {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} contains at least one item with each of the keys in [\"Key1\", \"Key2\", \"Key3\", \"Key10\"].\nProperties    Property Value Notes     Dictionary ($)Dictionary, with value {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} ($)Dictionary is a variable of type IDictionary\u003cString, Int32\u003e   Keys ($)Keys, with value [\"Key1\", \"Key2\", \"Key3\", \"Key10\"] ($)Keys is a variable of type IEnumerable\u003cString\u003e   Contains Items ($)ContainsItems, with no value ($)ContainsItems is a variable that will be set to a Boolean value    Result {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} does not contain at least one item matching each of the values in [\"Key1\", \"Key2\", \"Key3\"]; it contains one item with the key \"Key1\", one item with the key \"Key2\" and one item with the key \"Key3\", but no items with the key \"Key10\". Therefore, the variable ($)ContainsItems will be updated to the following:\nfalse  Properties Dictionary The Dictionary to check whether it contains at least one item with each of the specified Keys.\nDictionary can be any IDictionary\u003cTKey, TItem\u003e, where TKey represents the type of keys used to lookup items in the Dictionary, and TItem represents the type of items in the Dictionary.\n         Data Type IDictionary\u003cTKey, TItem\u003e   Property Type Input   Default Value ($)Dictionary with value {}    Keys The Keys to check for matching items.\nFor information and examples of how it is determined whether an item has a specified key, please see Object Equality.\nFor information about what a key is, please see Keys.\n         Data Type IEnumerable\u003cTKey\u003e   Property Type Input   Default Value ($)Keys with value []    Contains Items The result of the contains items check.\nIf Dictionary contains at least one item with each of the specified Keys, the specified variable will be set to true, otherwise it will be set to false.\n         Data Type Boolean   Property Type Output   Default Value ($)ContainsItems with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     ArgumentNullException Thrown when any key in Keys is null   PropertyNullException Thrown when Dictionary or Keys are null.    Remarks Key Equality For information and examples of how it is determined whether an item has a specified key, please see Object Equality.\nEmpty Dictionary If Dictionary is empty (i.e. {}), the variable specified in the Contains Items property is set to false.\nEmpty Keys If Keys is empty (i.e. []), the variable specified in the Contains Items property is set to false.\nDefining dictionaries using literal syntax For information about how to define dictionaries using literal syntax, see Dictionary Literals.\nDefining dictionaries using expression syntax For information about how to define dictionaries using expression syntax, see Dictionary Expressions.\nDictionaries containing items with same data types vs different data types For information about the different types of dictionaries, including those that can contain only the same type of item, and those that can contain different types of item, see Dictionaries.\n","categories":"","description":"Checks if a Dictionary contains at least one item with each of the specified keys.","excerpt":"Checks if a Dictionary contains at least one item with each of the specified keys.","ref":"/docs/reference/blocks/dictionaries/contains-item/contains-items-with-keys-block-3/","tags":"","title":"Contains Items With Keys"},{"body":"\r\rContains Items With Values (Cortex.Blocks.Dictionaries.ContainsItem.ContainsItemsWithValuesBlock`3)\nDescription Checks if Dictionary contains at least one item matching each of the specified Values.\nExamples Dictionary contains items with Values This example will check whether {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} contains at least one item matching each of the values in [1, 2, 3].\nProperties    Property Value Notes     Dictionary ($)Dictionary, with value {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} ($)Dictionary is a variable of type IDictionary\u003cString, Int32\u003e   Values ($)Values, with value [1, 2, 3] ($)Values is a variable of type IEnumerable\u003cInt32\u003e   Contains Items ($)ContainsItems, with no value ($)ContainsItems is a variable that will be set to a Boolean value    Result {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} contains at least one item matching each of the values in [1, 2, 3]; it contains two items with the value 1, two items with the value 2 and two items with the value 3. Therefore, the variable ($)ContainsItems will be updated to the following:\ntrue  Dictionary does not contain items with Values This example will check whether {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} contains at least one item matching each of the values in [1, 2, 3, 10].\nProperties    Property Value Notes     Dictionary ($)Dictionary, with value {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} ($)Dictionary is a variable of type IDictionary\u003cString, Int32\u003e   Values ($)Values, with value [1, 2, 3, 10] ($)Values is a variable of type IEnumerable\u003cInt32\u003e   Contains Items ($)ContainsItems, with no value ($)ContainsItems is a variable that will be set to a Boolean value    Result {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} does not contain at least one item matching each of the values in [1, 2, 3, 10]; it contains two items with the value 1, two items with the value 2 and two items with the value 3, but no items with the value 10. Therefore, the variable ($)ContainsItems will be updated to the following:\nfalse  Properties Dictionary The Dictionary to check whether it contains at least one item matching each of the specified Values.\nItems are considered matching if they have a value matching one of the specified Values.\nDictionary can be any IDictionary\u003cTKey, TItem\u003e, where TKey represents the type of keys used to lookup items in the Dictionary, and TItem represents the type of items in the Dictionary.\n         Data Type IDictionary\u003cTKey, TItem\u003e   Property Type Input   Default Value ($)Dictionary with value {}    Values The Values to check for matching items.\nFor information and examples of how it is determined whether an item matches a specified value, please see Object Equality.\n         Data Type IEnumerable\u003cTItem\u003e   Property Type Input   Default Value ($)Values with value []    Contains Items The result of the contains items check.\nIf Dictionary contains at least one item matching each of the specified Values, the specified variable will be set to true, otherwise it will be set to false.\n         Data Type Boolean   Property Type Output   Default Value ($)ContainsItems with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     PropertyNullException Thrown when Dictionary or Values are null.    Remarks Item Equality For information and examples of how it is determined whether an item matches a specified value, please see Object Equality.\nEmpty Dictionary If Dictionary is empty (i.e. {}), the variable specified in the Contains Items property is set to false.\nEmpty Values If Values is empty (i.e. []), the variable specified in the Contains Items property is set to false.\nDefining dictionaries using literal syntax For information about how to define dictionaries using literal syntax, see Dictionary Literals.\nDefining dictionaries using expression syntax For information about how to define dictionaries using expression syntax, see Dictionary Expressions.\nDictionaries containing items with same data types vs different data types For information about the different types of dictionaries, including those that can contain only the same type of item, and those that can contain different types of item, see Dictionaries.\n","categories":"","description":"Checks if a Dictionary contains at least one item matching each of the specified values.","excerpt":"Checks if a Dictionary contains at least one item matching each of the specified values.","ref":"/docs/reference/blocks/dictionaries/contains-item/contains-items-with-values-block-3/","tags":"","title":"Contains Items With Values"},{"body":"\r\rContains Items With Values (Cortex.Blocks.Lists.ContainsItem.ContainsItemsWithValuesBlock`2)\nDescription Checks if List contains at least one item matching each of the specified Values.\nExamples List contains items with Values This example will check whether [1, 2, 3, 3, 2, 1] contains at least one item matching each of the values in [1, 2, 3].\nProperties    Property Value Notes     List ($)List, with value [1, 2, 3, 3, 2, 1] ($)List is a variable of type IList\u003cInt32\u003e   Values ($)Values, with value [1, 2, 3] ($)Values is a variable of type IEnumerable\u003cInt32\u003e   Contains Items ($)ContainsItems, with no value ($)ContainsItems is a variable that will be set to a Boolean value    Result [1, 2, 3, 3, 2, 1] contains at least one item matching each of the values in [1, 2, 3]; it contains two items with the value 1, two items with the value 2 and two items with the value 3. Therefore, the variable ($)ContainsItems will be updated to the following:\ntrue  List does not contain items with Values This example will check whether [1, 2, 3, 3, 2, 1] contains at least one item matching each of the values in [1, 2, 3, 10].\nProperties    Property Value Notes     List ($)List, with value [1, 2, 3, 3, 2, 1] ($)List is a variable of type IList\u003cInt32\u003e   Values ($)Values, with value [1, 2, 3, 10] ($)Values is a variable of type IEnumerable\u003cInt32\u003e   Contains Items ($)ContainsItems, with no value ($)ContainsItems is a variable that will be set to a Boolean value    Result [1, 2, 3, 3, 2, 1] does not contain at least one item matching each of the values in [1, 2, 3, 10]; it contains two items with the value 1, two items with the value 2 and two items with the value 3, but no items with the value 10. Therefore, the variable ($)ContainsItems will be updated to the following:\nfalse  Properties List The List to check whether it contains at least one item matching each of the specified Values.\nItems are considered matching if they have a value matching one of the specified Values.\nList can be any IList\u003cTItem\u003e, where TItem represents the type of items in the List.\n         Data Type IList\u003cTItem\u003e   Property Type Input   Default Value ($)List with value []    Values The Values to check for matching items.\nFor information and examples of how it is determined whether an item matches a specified value, please see Object Equality.\n         Data Type IEnumerable\u003cTItem\u003e   Property Type Input   Default Value ($)Values with value []    Contains Items The result of the contains items check.\nIf List contains at least one item matching each of the specified Values, the specified variable will be set to true, otherwise it will be set to false.\n         Data Type Boolean   Property Type Output   Default Value ($)ContainsItems with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     PropertyNullException Thrown when List or Values are null.    Remarks Item Equality For information and examples of how it is determined whether an item matches a specified value, please see Object Equality.\nEmpty List If List is empty (i.e. []), the variable specified in the Contains Items property is set to false.\nEmpty Values If Values is empty (i.e. []), the variable specified in the Contains Items property is set to false.\nDefining lists using literal syntax For information about how to define lists using literal syntax, see List Literals.\nDefining lists using expression syntax For information about how to define lists using expression syntax, see List Expressions.\nLists containing items of a single data type vs multiple data types For information about the different types of lists, including those that can contain only a single type of item, and those that can contain multiple types of item, see Lists.\n","categories":"","description":"Checks if a List contains at least one item matching each of the specified values.","excerpt":"Checks if a List contains at least one item matching each of the specified values.","ref":"/docs/reference/blocks/lists/contains-item/contains-items-with-values-block-2/","tags":"","title":"Contains Items With Values"},{"body":"","categories":"","description":"Check if text is contained in another text.","excerpt":"Check if text is contained in another text.","ref":"/docs/reference/blocks/text/contains-text/","tags":"","title":"Contains Text"},{"body":"\r\rContains Text (Cortex.Blocks.Text.ContainsText.ContainsTextBlock)\nDescription Checks if Text contains Text To Find.\nSearch Options can be specified to choose whether to use a ContainsText, PatternMatching or Regex search to perform the check.\nExamples Text contains Text To Find This example will check whether \"The quick brown fox jumps over the lazy dog\" contains the text \"quick brown fox\".\nIt performs a case-sensitive, culture-insensitive comparison of text.\nProperties    Property Value Notes     Text ($)Text, with value \"The quick brown fox jumps over the lazy dog\" ($)Text is a variable of type String   Text To Find ($)TextToFind, with value \"quick brown fox\" ($)TextToFind is a variable of type String   Search Options ($)SearchOptions, with value SearchOptions.ContainsText ($)SearchOptions is a variable of type SearchOptions   Comparison Type ($)ComparisonType, with value StringComparison.Ordinal ($)ComparisonType is a variable of type StringComparison   Contains Text ($)ContainsText, with no value ($)ContainsText is a variable that will be set to a Boolean value    Result \"The quick brown fox jumps over the lazy dog\" contains the text \"quick brown fox\". Therefore, the variable ($)ContainsText will be updated to the following:\ntrue  Text does not contain Text To Find This example will check whether \"The quick brown fox jumps over the lazy dog\" contains the text \"quick red fox\".\nIt performs a case-sensitive, culture-insensitive comparison of text.\nProperties    Property Value Notes     Text ($)Text, with value \"The quick brown fox jumps over the lazy dog\" ($)Text is a variable of type String   Text To Find ($)TextToFind, with value \"quick red fox\" ($)TextToFind is a variable of type String   Search Options ($)SearchOptions, with value SearchOptions.ContainsText ($)SearchOptions is a variable of type SearchOptions   Comparison Type ($)ComparisonType, with value StringComparison.Ordinal ($)ComparisonType is a variable of type StringComparison   Contains Text ($)ContainsText, with no value ($)ContainsText is a variable that will be set to a Boolean value    Result \"The quick brown fox jumps over the lazy dog\" does not contain \"quick red fox\". Therefore, the variable ($)ContainsText will be updated to the following:\nfalse  Text contains text that matches the pattern in Text To Find This example will check whether \"The quick brown fox jumps over the lazy dog\" contains text that matches the pattern \"*?he\".\nIt performs a case-sensitive, culture-insensitive comparison of text.\nProperties    Property Value Notes     Text ($)Text, with value \"The quick brown fox jumps over the lazy dog\" ($)Text is a variable of type String   Text To Find ($)TextToFind, with value \"?he\" ($)TextToFind is a variable of type String   Search Options ($)SearchOptions, with value SearchOptions.PatternMatching ($)SearchOptions is a variable of type SearchOptions   Comparison Type ($)ComparisonType, with value StringComparison.Ordinal ($)ComparisonType is a variable of type StringComparison   Contains Text ($)ContainsText, with no value ($)ContainsText is a variable that will be set to a Boolean value    Result \"The quick brown fox jumps over the lazy dog\" contains \"The\" and \"the\" that matches the pattern \"?he\". Therefore, the variable ($)ContainsText will be updated to the following:\ntrue  Text contains text that matches the regex in Text To Find This example will check whether \"The quick brown fox jumps over the lazy dog\" contains text that matches the regex \"^The\".\nIt performs a case-sensitive, culture-insensitive comparison of text.\nProperties    Property Value Notes     Text ($)Text, with value \"The quick brown fox jumps over the lazy dog\" ($)Text is a variable of type String   Text To Find ($)TextToFind, with value \"^The\" ($)TextToFind is a variable of type String   Search Options ($)SearchOptions, with value SearchOptions.Regex ($)SearchOptions is a variable of type SearchOptions   Comparison Type ($)ComparisonType, with value StringComparison.Ordinal ($)ComparisonType is a variable of type StringComparison   Contains Text ($)ContainsText, with no value ($)ContainsText is a variable that will be set to a Boolean value    Result \"The quick brown fox jumps over the lazy dog\" contains \"The\" at the start of the sentence that matches the regex \"^The\". Therefore, the variable ($)ContainsText will be updated to the following:\ntrue  Properties Text The Text to check whether it contains Text To Find.\n         Data Type String   Property Type Input   Default Value ($)Text with value \"\"    Text To Find The Text To Find in Text.\n         Data Type String   Property Type Input   Default Value ($)TextToFind with value \"\"    Search Options Search Options can be specified to choose whether Text To Find should be interpreted as a ContainsText, PatternMatching or Regex search:\n SearchOptions.ContainsText matches text exactly; as long as the Text contains the text specified in Text To Find it will be considered a match. SearchOptions.PatternMatching allows wildcard text matching using Pattern Matching Syntax:  * wildcard character can be used to match 0 or more characters. ? wildcard character can be used to match 0 or 1 character. All other characters are treated as a literal character.   SearchOptions.Regex allows regex text matching using .Net Regex Syntax.  Please note that with SearchOptions.ContainsText overlapping matches are detected (e.g. searching for \"aa\" in \"aaa\" matches \"aa\" at index 0 and \"aa\" at index 1). With SearchOptions.Regex only \"aa\" at index 0 will be matched.\n         Data Type SearchOptions   Property Type Input   Default Value ($)SearchOptions with value SearchOptions.ContainsText    Comparison Type The Comparison Type specifying the rules used to determine whether Text To Find is contained in Text\nFor information about the supported values for the Comparison Type property and examples of how it is determined whether two pieces of text match, please see Text Equality.\n         Data Type StringComparison   Property Type Input   Default Value ($)ComparisonType with value StringComparison.Ordinal    Contains Text The result of the contains text check.\nIf Text To Find is contained in Text, the specified variable will be set to true, otherwise it will be set to false.\n         Data Type Boolean   Property Type Output   Default Value ($)ContainsText with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     ArgumentException Thrown when Comparison Type is not one of the specified StringComparison types (e.g. (StringComparison)10).    Thrown when Search Options is not one of the specified SearchOptions types (e.g. (SearchOptions)10).   RegexMatchTimeoutException Thrown when Search Options is either SearchOptions.Regex or SearchOptions.PatternMatching and the execution time of the search exceeds 30 seconds.   RegexParsingFailedException Thrown when Search Options is SearchOptions.Regex and Text To Find is not a valid regex (e.g. ().    Remarks Comparison Types For information about the supported values for the Comparison Type property and examples of how it is determined whether two pieces of text match, please see Text Equality.\nNull or empty Text If Text is null or empty (i.e. \"\"), the variable specified in the Contains Text property is set to false.\nNull or empty Text To Find If Text To Find is null or empty (i.e. \"\"), the variable specified in the Contains Text property is set to false.\nKnown Limitations If Search Options is set to SearchOptions.Regex or SearchOptions.PatternMatching and Comparison Type is set to StringComparison.CurrentCulture, some characters such as æ that is equivalent to ae may not evaluate as equal.\n","categories":"","description":"Checks if text contains another text.","excerpt":"Checks if text contains another text.","ref":"/docs/reference/blocks/text/contains-text/contains-text-block/","tags":"","title":"Contains Text"},{"body":"","categories":"","description":"Convert a date time to and from text.","excerpt":"Convert a date time to and from text.","ref":"/docs/reference/blocks/date-and-time/convert-date-time/","tags":"","title":"Convert Date Time"},{"body":"\r\rConvert Date Time To Text (Cortex.Blocks.DateAndTime.ConvertDateTime.ConvertDateTimeToTextBlock)\nDescription Converts a Date Time to Text.\nAdditional options can be specified:\n Format Template can be specified to define the format the Date Time should be converted to (e.g. \"dd/MM/yyyy\"). Format Provider can be specified to define the cultural rules used to control the formatting (e.g. new CultureInfo(\"en-US\") will apply American English rules to the formatting).  Examples ISO 8601 Standard Format This example will convert a Date Time representing midnight on 31st December 2021 (with 0 UTC time offset) to the ISO 8601 Standard format (i.e. \"yyyy-MM-ddTHH:mm:ss.fffffffzzz\").\nProperties    Property Value Notes     Date Time ($)DateTime, with value of DateTimeOffset that has a text representation of 2021-12-31T00:00:00+00:00 ($)DateTime is a variable of type DateTimeOffset   Format Template ($)FormatTemplate, with value null ($)FormatTemplate is a variable of type String   Format Provider ($)FormatProvider, with value null ($)FormatProvider is a variable of type IFormatProvider   Text ($)Text, with no value ($)Text is a variable that will be set to a String value    Result Converting a Date Time representing midnight on 31st December 2021 (with a 0 UTC time offset and without specifying any format template or provider) will result in the variable ($)Text being updated to the following ISO 8601 Standard text representation:\n\"2021-12-31T00:00:00.0000000+00:00\"  Default format for Invariant Culture This example will convert a Date Time representing midnight on 31st December 2021 (with 0 UTC time offset) to the default format for Invariant Culture (i.e. \"MM/dd/yyyy HH:mm:ss zzz\").\nProperties    Property Value Notes     Date Time ($)DateTime, with value of DateTimeOffset that has a text representation of 2021-12-31T00:00:00+00:00 ($)DateTime is a variable of type DateTimeOffset   Format Template ($)FormatTemplate, with value null ($)FormatTemplate is a variable of type String   Format Provider ($)FormatProvider, with value CultureInfo.InvariantCulture ($)FormatProvider is a variable of type IFormatProvider   Text ($)Text, with no value ($)Text is a variable that will be set to a String value    Result Converting a Date Time representing midnight on 31st December 2021 (with a 0 UTC time offset and without a format template), but specifying Invariant Culture text representation, will result in the variable ($)Text being updated to the following:\n\"12/31/2021 00:00:00 +00:00\"  Full Date Long Time format for Invariant Culture This example will convert a Date Time representing midnight on 31st December 2021 (with 0 UTC time offset) to the Full Date Long Time format for Invariant Culture (i.e. \"dddd, dd MMMM yyyy HH:mm:ss\").\nProperties    Property Value Notes     Date Time ($)DateTime, with value of DateTimeOffset that has a text representation of 2021-12-31T00:00:00+00:00 ($)DateTime is a variable of type DateTimeOffset   Format Template ($)FormatTemplate, with value \"F\" ($)FormatTemplate is a variable of type String   Format Provider ($)FormatProvider, with value CultureInfo.InvariantCulture ($)FormatProvider is a variable of type IFormatProvider   Text ($)Text, with no value ($)Text is a variable that will be set to a String value    Result Converting a Date Time representing midnight on 31st December 2021 (with a 0 UTC time offset), and specifying the Full Date Long Time format for Invariant Culture, will result in the variable ($)Text being updated to the following:\n\"Friday, 31 December 2021 00:00:00\"  Default format for American English (“en-US”) This example will convert a Date Time representing midnight on 31st December 2021 (with 0 UTC time offset) to the default format for American English \"en-US\" (i.e. \"MM/d/yyyy h:m:s tt zzz\").\nProperties    Property Value Notes     Date Time ($)DateTime, with value of DateTimeOffset that has a text representation of 2021-12-31T00:00:00+00:00 ($)DateTime is a variable of type DateTimeOffset   Format Template ($)FormatTemplate, with value null ($)FormatTemplate is a variable of type String   Format Provider ($)FormatProvider, with value new CultureInfo(\"en-US\") ($)FormatProvider is a variable of type IFormatProvider   Text ($)Text, with no value ($)Text is a variable that will be set to a String value    Result Converting a Date Time representing midnight on 31st December 2021 (with a 0 UTC time offset and without a format template), but specifying an American English \"en-US\" text representation, will result in the variable ($)Text being updated to the following:\n\"12/31/2021 12:00:00 AM +00:00\"  Full Date Long Time format for American English (“en-US”) This example will convert a Date Time representing midnight on 31st December 2021 (with 0 UTC time offset) to the Full Date Long Time format for American English \"en-US\" (i.e. \"dddd, MMMM d, yyyy h:m:s tt\").\nProperties    Property Value Notes     Date Time ($)DateTime, with value of DateTimeOffset that has a text representation of 2021-12-31T00:00:00+00:00 ($)DateTime is a variable of type DateTimeOffset   Format Template ($)FormatTemplate, with value \"F\" ($)FormatTemplate is a variable of type String   Format Provider ($)FormatProvider, with value new CultureInfo(\"en-US\") ($)FormatProvider is a variable of type IFormatProvider   Text ($)Text, with no value ($)Text is a variable that will be set to a String value    Result Converting a Date Time representing midnight on 31st December 2021 (with a 0 UTC time offset), and specifying the Full Date Long Time format for American English \"en-US\", will result in the variable ($)Text being updated to the following:\n\"Friday, December 31, 2021 12:00:00 AM\"  Properties Date Time The Date Time to convert to Text.\nBy default, if no Format Template or Format Provider are specified, the resultant Text will be in the ISO 8601 Standard (e.g. 2021-11-05T08:48:08.0307614+00:00).\nFor more information about Date and Time, please see Working with Dates and Time.\n         Data Type DateTimeOffset   Property Type Input   Default Value ($)DateTime with DateTimeOffset value that has a text representation of 0001-01-01T00:00:00+00:00    Format Template Format Template can be specified to define the format the Date Time should be converted to (e.g. \"dd/MM/yyyy\" -\u003e \"31/12/2021\").\nIf Format Template contains valid format specifiers (e.g. \"dd\" for 2 digit day representation), they will be subsitituted based on the Date Time; characters that are not format specifiers will be passed through as literal text.\nIf Format Template is not specified, null or empty (i.e. \"\"), the default format template of the specified Format Provider is used. If Format Provider is also not specified or null the ISO 8601 Standard format will be used (i.e. \"yyyy-MM-ddTHH:mm:ss.fffffffzzz\").\nFor information about format templates and specifiers, please see Date and Time Formats.\n         Data Type String   Property Type Input   Default Value ($)FormatTemplate with value null    Format Provider Format Provider can be specified to define the cultural rules used to control the formatting (e.g. new CultureInfo(\"en-US\") will apply American English rules to the formatting.).\nIf Format Provider is not specified or null, CultureInfo.InvariantCulture will be used; CultureInfo.InvariantCulture is associated with the English language but not with any country/region. For more information, please see Invariant Culture rules.\n         Data Type IFormatProvider   Property Type Input   Default Value ($)FormatProvider with value null    Text The Text representation of the Date Time.\n         Data Type String   Property Type Output   Default Value ($)Text with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     FormatException Thrown when Format Template is a single invalid format specifier (i.e. \"a\").    Remarks Dates and Time The default text representation of Date and Time will be in the ISO 8601 Standard (e.g. 2021-11-05T08:48:08.0307614+00:00).\nFor more information, please see Working with Dates and Time.\nFormat Template and Specifiers Please note that changes to operating system date and time formats, could result in some of the examples above displaying different results.\nFor information about format templates and specifiers, please see Date and Time Formats.\nNull or Empty Format Template If Format Template is not specified, null or empty (i.e. \"\"), the default format template of the specified Format Provider is used. If Format Provider is also not specified or null the ISO 8601 Standard format will be used (i.e. \"yyyy-MM-ddTHH:mm:ss.fffffffzzz\").\nNull Format Provider If Format Provider is not specified or null, CultureInfo.InvariantCulture will be used; CultureInfo.InvariantCulture is associated with the English language but not with any country/region. For more information, please see Invariant Culture rules.\n","categories":"","description":"Converts a Date Time to Text.","excerpt":"Converts a Date Time to Text.","ref":"/docs/reference/blocks/date-and-time/convert-date-time/convert-date-time-to-text-block/","tags":"","title":"Convert Date Time To Text"},{"body":"","categories":"","description":"Convert json to and from other data types.","excerpt":"Convert json to and from other data types.","ref":"/docs/reference/blocks/json/convert-json/","tags":"","title":"Convert Json"},{"body":"\r\rConvert Json To Object (Cortex.Blocks.Json.ConvertJson.ConvertJsonToObjectBlock)\nDescription Converts Json to an Object.\nAn additional Settings option can be specified to control how the conversion should deal with things such as:\n null objects Date Time formats and offsets Number formats Text escaping Type information  For information about the default Settings used if none are specified, as well as all other options that can be configured, please see JsonSerializerSettings.\nExamples Convert Json to a List (without Type information) This example will convert \"[[1, 2, 3], [4, 5, 6]]\" into a List\u003cObject\u003e.\nProperties    Property Value Notes     Json ($)Json, with value \"[[1, 2, 3], [4, 5, 6]]\" ($)Json is a variable of type String   Settings ($)Settings, with value null ($)Settings is a variable of type JsonSerializerSettings   Object ($)Object, with no value ($)Object is a variable that will be set to a dynamic value (i.e. in this example to a List\u003cObject\u003e).    Result Converting \"[[1, 2, 3], [4, 5, 6]]\" to an object results in the variable ($)Object being updated to the following:\n[ [ 1, 2, 3 ], [ 4, 5, 6 ] ] As the Json does not include any type information, ($)Object will be a List\u003cObject\u003e, rather than a List\u003cList\u003cInt32\u003e\u003e. This is because when performing the conversion there is no type information to tell the converter that the items in the list are List\u003cInt32\u003e data types.\nSee Convert Json to a List (with Type information) for an example on how to include type information in the Json.\n Convert Json to a List (with Type information) This example will convert \"[[1, 2, 3], [4, 5, 6]]\" into a List\u003cList\u003cInt32\u003e\u003e, rather than a List\u003cObject\u003e as above.\nFor this to work, type information needs to be included in the Json representation. This can be seen below:\n{ \"$type\": \"System.Collections.Generic.List`1[[System.Collections.Generic.List`1[[System.Int32, System.Private.CoreLib]], System.Private.CoreLib]], System.Private.CoreLib\", \"$values\": [ { \"$type\": \"System.Collections.Generic.List`1[[System.Int32, System.Private.CoreLib]], System.Private.CoreLib\", \"$values\": [1,2,3] }, { \"$type\": \"System.Collections.Generic.List`1[[System.Int32, System.Private.CoreLib]], System.Private.CoreLib\", \"$values\": [4,5,6] } ] } Realistically, this example is only useful if you have already produced Json including type information by using the Convert Object To Json block. If this is the case, you can then convert it back with the correct data types.\nProperties    Property Value Notes     Json ($)Json, with complex value as shown above ($)Json is a variable of type String   Settings ($)Settings, with value new JsonSerializerSettings{TypeNameHandling = TypeNameHandling.All} ($)Settings is a variable of type JsonSerializerSettings   Object ($)Object, with no value ($)Object is a variable that will be set to a dynamic value (i.e. in this example to a List\u003cList\u003cInt32\u003e\u003e).    Result Converting:\n{ \"$type\": \"System.Collections.Generic.List`1[[System.Collections.Generic.List`1[[System.Int32, System.Private.CoreLib]], System.Private.CoreLib]], System.Private.CoreLib\", \"$values\": [ { \"$type\": \"System.Collections.Generic.List`1[[System.Int32, System.Private.CoreLib]], System.Private.CoreLib\", \"$values\": [1,2,3] }, { \"$type\": \"System.Collections.Generic.List`1[[System.Int32, System.Private.CoreLib]], System.Private.CoreLib\", \"$values\": [4,5,6] } ] } to an object results in the variable ($)Object being updated to the following:\n[ [ 1, 2, 3 ], [ 4, 5, 6 ] ] As the Json does include type information, ($)Object will be a List\u003cList\u003cInt32\u003e\u003e, rather than a List\u003cObject\u003e.\n Properties Json The Json to convert into an Object.\nDuring the conversion it will be attempted to convert the Json to the correct data type where possible. If the correct data type cannot be determined, then collection data types will be converted to a List\u003cdynamic\u003e, and other objects will be converted to a Structure.\n         Data Type String   Property Type Input   Default Value ($)Json with value null    Settings Optional Settings that can be specified to control how the conversion should deal with things such as:\n null objects Date Time formats and offsets Number formats Text escaping  For information about the default Settings used if none are specified, as well as all other options that can be configured, please see JsonSerializerSettings.\n         Data Type JsonSerializerSettings   Property Type Input   Default Value ($)Settings with value null    Object The Object that has been converted from Json.\n         Data Type dynamic   Property Type Output   Default Value ($)Object with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     JsonReaderException Thrown when an error occurs reading the Json.   JsonSerializationException Thrown when an error occurs converting the Json to an Object.   PropertyEmptyException Thrown when Json is empty (i.e. \"\").   PropertyNullException Thrown when Json is null.    Remarks “{}” Json If Json is set to the text \"{}\", Object will be set to an empty Structure.\n“[]” Json If Json is set to the text \"[]\", Object will be set to an empty List\u003cdynamic\u003e.\n“null” Json If Json is set to the text \"null\", Object will be set to null.\nRound-tripping For most data types it should be possible to pass the Json created by a Convert Object To Json block to this block, and then pass the Object created by this block back to a Convert Object To Json block; this is called round-tripping.\nIt should be noted however, that not all data types will be able to be round-tripped.\nAn example of a data type that is not able to be round-tripped is HttpRequestHeaders. As it does not contain a public constructor it will not be able to be converted from its Json representation back into an HttpRequestHeaders; instead a JsonSerializationException will be thrown with a message like: \"Cannot create and populate list type System.Net.Http.Headers.HttpRequestHeaders\".\n","categories":"","description":"Converts Json to an Object.","excerpt":"Converts Json to an Object.","ref":"/docs/reference/blocks/json/convert-json/convert-json-to-object-block/","tags":"","title":"Convert Json To Object"},{"body":"","categories":"","description":"Convert an object to other data types.","excerpt":"Convert an object to other data types.","ref":"/docs/reference/blocks/objects/convert-object/","tags":"","title":"Convert Object"},{"body":"\r\rConvert Object To Json (Cortex.Blocks.Json.ConvertJson.ConvertObjectToJsonBlock)\nDescription Converts an Object to Json.\nAn additional Settings option can be specified to control how the conversion should deal with things such as:\n null objects Date Time formats and offsets Number formats Text escaping Type information  For information about the default Settings used if none are specified, as well as all other options that can be configured, please see JsonSerializerSettings.\nExamples Convert a List to Json (without Type information) This example will convert [[1, 2, 3], [4, 5, 6]] to its Json representation, without including type information.\nProperties    Property Value Notes     Object ($)Object, with value [[1, 2, 3], [4, 5, 6]] ($)Object is a variable of type List\u003cList\u003cInt32\u003e\u003e   Settings ($)Settings, with value null ($)Settings is a variable of type JsonSerializerSettings   Json ($)Json, with no value ($)Json is a variable that will be set to a String value.    Result Converting [[1, 2, 3], [4, 5, 6]] to Json results in the variable ($)Json being updated to the following:\n\"[[1, 2, 3],[4, 5, 6]]\" As the resultant Json does not include any type information, if this Json was then used as input to the Convert Json To Object block, the resultant object would be a List\u003cObject\u003e, rather than a List\u003cList\u003cInt32\u003e\u003e.\nSee Convert a List To Json (with Type information) for an example on how to include type information in the Json.\n Convert a List to Json (with Type information) This example will convert [[1, 2, 3], [4, 5, 6]] to its Json representation, including type information.\nProperties    Property Value Notes     Object ($)Object, with value [[1, 2, 3], [4, 5, 6]] ($)Object is a variable of type List\u003cList\u003cInt32\u003e\u003e   Settings ($)Settings, with value new JsonSerializerSettings{TypeNameHandling = TypeNameHandling.All} ($)Settings is a variable of type JsonSerializerSettings   Json ($)Json, with no value ($)Json is a variable that will be set to a String value.    Result Converting [[1, 2, 3], [4, 5, 6]] to its Json representation (including type information) results in the variable ($)Json being updated to the following:\n{ \"$type\": \"System.Collections.Generic.List`1[[System.Collections.Generic.List`1[[System.Int32, System.Private.CoreLib]], System.Private.CoreLib]], System.Private.CoreLib\", \"$values\": [ { \"$type\": \"System.Collections.Generic.List`1[[System.Int32, System.Private.CoreLib]], System.Private.CoreLib\", \"$values\": [1,2,3] }, { \"$type\": \"System.Collections.Generic.List`1[[System.Int32, System.Private.CoreLib]], System.Private.CoreLib\", \"$values\": [4,5,6] } ] }  Properties Object The Object to convert to Json.\nObject can be any data type.\n         Data Type dynamic   Property Type Input   Default Value ($)Object with value null    Settings Optional Settings that can be specified to control how the conversion should deal with things such as:\n null objects Date Time formats and offsets Number formats Text escaping  For information about the default Settings used if none are specified, as well as all other options that can be configured, please see JsonSerializerSettings.\n         Data Type JsonSerializerSettings   Property Type Input   Default Value ($)Settings with value null    Json The Json that has been converted from Object.\n         Data Type String   Property Type Output   Default Value ($)Json with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     JsonSerializationException Thrown when an error occurs converting the Object to Json.    Remarks Object is empty Structure or Object If Object is set to an empty Structure or Object, Json is set to the text \"{}\".\nObject is empty List If Object is set to an empty List, Json is set to the text \"[]\".\nNull Object If Object is set to null, Json will be set to the text \"null\".\nRound-tripping For most data types it should be possible to pass the Json created by this block to the Convert Json To Object block, and then pass the Object created by the Convert Json To Object block back to this block; this is called round-tripping.\nIt should be noted however, that not all data types will be able to be round-tripped.\nAn example of a data type that is not able to be round-tripped is HttpRequestHeaders. As it does not contain a public constructor it will not be able to be converted from its Json representation back into an HttpRequestHeaders; instead a JsonSerializationException will be thrown with a message like: \"Cannot create and populate list type System.Net.Http.Headers.HttpRequestHeaders\".\n","categories":"","description":"Converts an Object To Json.","excerpt":"Converts an Object To Json.","ref":"/docs/reference/blocks/json/convert-json/convert-object-to-json-block/","tags":"","title":"Convert Object To Json"},{"body":"\r\rConvert Object To Text (Cortex.Blocks.Object.ConvertObject.ConvertObjectToTextBlock`1)\nDescription Converts the given Object to Text.\nIt does this by replacing all {Property} format parameters in the specified Format Template with the corresponding property value from the given Object.\nAn additional Format Provider option can be specified to define the cultural rules used to control the formatting (e.g. new CultureInfo(\"en-US\") will apply American English rules to the formatting).\nExamples Convert Structure to Text This example will convert:\n{ \"LastPaymentAmount\": 99.99, \"PercentagePaidOff\": 0.8000, \"PercentageRemaining\": 0.2000, \"TotalPaidOff\": 350.99, \"TotalRemaining\": 40 } to text, based on the following format template:\n\"Your latest payment of {LastPaymentAmount:C2} has been received. You have paid {PercentagePaidOff:P0} of your total and have {TotalRemaining:C2} outstanding.\" The format parameter {LastPaymentAmount:C2} will display the 99.99 as U.S currency to two decimal places (i.e. $99.99):\n LastPaymentAmount - is replaced by the value of the \"LastPaymentAmount\" property (i.e. 99.99). C - indicates to include the currency symbol for the specified culture (i.e. $). 2 - indicates to format the value to two decimal places.  The format parameter {PercentagePaidOff:P0} will display the 0.8000 as a percentage to zero decimal places (i.e. 80 %):\n PercentagePaidOff - is replaced by the value of the \"PercentagePaidOff\" (i.e. 0.8000). P - indicates the value should be formatted as a percentage. 0 - indicates to format the percentage value to zero decimal places.  The format parameter {TotalRemaining:C2} will display the 40 as U.S currency to two decimal places (i.e. $40.00):\n TotalRemaining - is replaced by the value of the \"TotalRemaining\" property (i.e. 40). C - indicates to include the currency symbol for the specified culture (i.e. $). 2 - indicates to format the value to two decimal places.  For information about format templates and parameters, please see Text Formatting.\nProperties    Property Value Notes     Object ($)Object, with value {\"LastPaymentAmount\":99.99, \"PercentagePaidOff\":0.8000, \"PercentageRemaining\":0.2000, \"TotalPaidOff\":350.99, \"TotalRemaining\":40} ($)Object is a variable of type Structure   Format Template ($)FormatTemplate, with value \"Your latest payment of {LastPaymentAmount:C2} has been received. You have paid {PercentagePaidOff:P0} of your total and have {TotalRemaining:C2} outstanding.\" ($)FormatTemplate is a variable of type String   Format Provider ($)FormatProvider, with value new CultureInfo(\"en-US\") ($)FormatProvider is a variable of type IFormatProvider   Text ($)Text, with no value ($)Text is a variable that will be set to a String value    Result Converting:\n{ \"LastPaymentAmount\": 99.99, \"PercentagePaidOff\": 0.8000, \"PercentageRemaining\": 0.2000, \"TotalPaidOff\": 350.99, \"TotalRemaining\": 40 } to text, based on the following format template:\n\"Your latest payment of {LastPaymentAmount:C2} has been received. You have paid {PercentagePaidOff:P0} of your total and have {TotalRemaining:C2} outstanding.\" results in the variable ($)Text being updated to the following:\n\"Your latest payment of $99.99 has been received. You have paid 80 % of your total and have $40.00 outstanding.\"  Properties Object The Object to convert to Text.\nAll {Property} format parameters which match a property name in the Object will be replaced by that property’s value.\nThe values of matching properties do not have to be text, they can be any data type. Any non-text value will be converted to its text representation when it is replaced.\nFor information about how types are converted to their text representation please see Converting Objects To Text.\n         Data Type TObject   Property Type Input   Default Value ($)Object with value null    Format Template Format Template can be specified to define the format of the resultant Text.\nAll {Property} format parameters in Format Template will be replaced with the corresponding property value from the Object.\n{Property} format parameters are case-sensitive, so must exactly match the property name in the Object; those that do not will not be replaced.\nIf Format Template is not specified, null or empty (i.e. \"\"), or does not contain any {Property} format parameters, nothing is replaced; Text will be set to the value of Format Template.\nFor information about format templates and parameters, please see Text Formatting.\n         Data Type String   Property Type Input   Default Value ($)FormatTemplate with value null    Format Provider Format Provider can be specified to define the cultural rules used to control the formatting (e.g. new CultureInfo(\"en-US\") will apply American English rules to the formatting.).\nIf Format Provider is not specified or null, CultureInfo.InvariantCulture will be used; CultureInfo.InvariantCulture is associated with the English language but not with any country/region. For more information, please see Invariant Culture rules.\n         Data Type IFormatProvider   Property Type Input   Default Value ($)FormatProvider with value null    Text The formatted Text that results from replacing all {Property} format parameters in Format Template with their corresponding property value from the given Object.\n         Data Type String   Property Type Output   Default Value ($)Text with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     FormatException Thrown when Format Template contains a format parameter that is invalid or not well-formed (e.g. \"Cost is {TotalCost:Q2}, as \"Q\" is not a valid format parameter).   PropertyNullException Thrown when Object is null.    Remarks Text Formatting Please note that changes to operating system settings, could result in some of the examples above displaying different results.\nFor information about format templates and parameters, please see Text Formatting.\nNull or Empty Format Template If Format Template is not specified, null or empty (i.e. \"\"), or does not contain any {Property} format parameters, nothing is replaced; Text will be set to the value of Format Template.\nNull Format Provider If Format Provider is not specified or null, CultureInfo.InvariantCulture will be used; CultureInfo.InvariantCulture is associated with the English language but not with any country/region. For more information, please see Invariant Culture rules.\nNested Properties Format parameters support nested properties, which means given an object like the following:\n{ \"LastPaymentAmount\": 99.99, \"PaidOff\": { \"Percentage\": 0.8000, \"Total\": 350.99 }, \"Remaining\": { \"Remaining\": 0.2000, \"Total\": 40 } } that nested property values such as PaidOff.Total can be accessed. This is done by using the following format parameter syntax:\n\"{PaidOff.Total}\" Known Limitations Currently the block does not support indexing into properties (i.e. ListProperty[0] or DictionaryProperty[\"key\"]).\n","categories":"","description":"Converts an object to text by replacing all `{Property}` format parameters in a specified format template with the Object's corresponding property value.","excerpt":"Converts an object to text by replacing all `{Property}` format parameters in a specified format template with the Object's corresponding property value.","ref":"/docs/reference/blocks/objects/convert-object/convert-object-to-text-block-1/","tags":"","title":"Convert Object To Text"},{"body":"\r\rConvert Structure To Xml (Cortex.Blocks.Xml.ConvertXml.ConvertStructureToXmlBlock)\nDescription Converts a Structure to Xml.\nEach top level Key will be converted using the following rules:\n Keys become Nodes Items become the values of the corresponding node.  Each inner key will be converted using the following rules:\n Inner keys become inner nodes within their parent node. Items of inner keys become the values of the corresponding inner nodes.  For example:\n\"topLevelNode\": { \"innerNode\" : \"innerNodeValue\" } will be converted into:\n@\"\u003ctopLevelNode\u003e \u003cinnerNode\u003einnerNodeValue\u003c/innerNode\u003e \u003c/topLevelNode\u003e\" Examples Convert a Structure To Xml This example will convert the Structure below to its Xml representation.\n{ \"node1\" : \"1\", \"node2\" : \"2\", \"node3\" : \"3\" } Properties    Property Value Notes     Structure ($)Structure, with value {{ \"node1\" : \"1\"}, {\"node2\" : \"2\"}, {\"node3\" : \"3\"}} ($)Structure is a variable of type Structure   Xml ($)Xml, with no value ($)Xml is a variable that will be set to a String value.    Result Converting:\n{ \"node1\" : \"1\", \"node2\" : \"2\", \"node3\" : \"3\" } to Xml results in the variable ($)Xml being updated to the following:\n@\"\u003cCortex_DataTypes_Dictionaries_Structure\u003e \u003cnode1\u003e1\u003c/node1\u003e \u003cnode2\u003e2\u003c/node2\u003e \u003cnode3\u003e3\u003c/node3\u003e \u003c/Cortex_DataTypes_Dictionaries_Structure\u003e\"  The \"Cortex_DataTypes_Dictionaries_Structure\" root node is added as there is no single top level key. The \"node1\" Key is converted into a child node of \"Cortex_DataTypes_Dictionaries_Structure\" with its corresponding Item as the value. The \"node2\" Key is converted into a child node of \"Cortex_DataTypes_Dictionaries_Structure\" with its corresponding Item as the value. The \"node3\" Key is converted into a child node of \"Cortex_DataTypes_Dictionaries_Structure\" with its corresponding Item as the value.   Convert a Complex Structure to Xml This example will convert the Structure below to its Xml representation. This scenario is unlikely unless Xml has been converted to a Structure and is being Round-Tripped.\n{ \"topLevelKey\": { \"@topLevelAttribute\" : \"exampleAttribute\", \"innerKey\" : { \"@innerNodeAttribute\" : \"exampleInnerNodeAttribute\", \"nestedKey\": \"nested key text\", \"#text\": \"inner key text\" }, \"id\": [ 1, 2, 3 ], } } Properties    Property Value Notes     Structure ($)Structure, with value\"{\"topLevelNode\": {\"@topLevelAttribute\" : \"exampleAttribute\", \"innerNode\" : { \"@innerNodeAttribute\" : \"exampleInnerNodeAttribute\", \"nestedNode\": \"nested node text\", \"#text\": \"inner node text\" }, \"id\": [ 1, 2, 3 ], } }\" ($)Structure is a variable of type Structure   Xml ($)Xml, with no value ($)Xml is a variable that will be set to a String value.    Result Converting:\n{ \"topLevelKey\": { \"@topLevelAttribute\" : \"exampleAttribute\", \"innerKey\" : { \"@innerNodeAttribute\" : \"exampleInnerNodeAttribute\", \"nestedKey\": \"nested key text\", \"#text\": \"inner key text\" }, \"id\": [ 1, 2, 3 ], } } to Xml results in the variable ($)Xml being updated to the following:\n@\"\u003ctopLevelKey topLevelAttribute=\"\"exampleAttribute\"\"\u003e \u003cinnerKey innerNodeAttribute=\"\"exampleInnerNodeAttribute\"\"\u003e \u003cnestedKey\u003enested key text\u003c/nestedKey\u003e inner key text \u003c/innerKey\u003e \u003cid\u003e1\u003c/id\u003e \u003cid\u003e2\u003c/id\u003e \u003cid\u003e3\u003c/id\u003e \u003c/topLevelKey\u003e\"  The key \"topLevelKey\" is converted into the \"topLevelKey\" node. The key \"@topLevelAttribute\" is converted into the \"topLevelAttribute\" attribute with its corresponding item as the value. The key \"innerKey\" is converted into the \"innerKey\" node. The key \"@innerNodeAttribute\" is converted into the \"innerNodeAttribute\" attribute with its corresponding item as the value. The key \"nestedKey\" is converted into the \"nestedKey\" node with its corresponding item as the value. The key \"#text\" is converted into the value of the \"innerKey\" key with its corresponding item as the value. The key \"id\" is converted into three \"id\" nodes with each corresponding item as their values.   Properties Structure The Structure to convert into Xml.\nFor more information about Structures, please see Working with Structures.\n         Data Type Structure   Property Type Input   Default Value ($)Structure with value null    Xml The Xml that has been converted from the Structure.\n         Data Type String   Property Type Output   Default Value ($)Xml with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     PropertyNullException Thrown when Structure is null.   PropertyEmptyException Thrown when Structure does not contain any items.   XmlSerializationException Thrown when Structure has a key that is an empty string.    Thrown when the Structure includes an xml declaration key (e.g. \"?xml\" can only accept the following attributes: \"@version\", \"@encoding\" and \"@standalone\".) or a document type definition key (e.g. \"!DOCTYPE\" can only accept the following attributes: \"@name\", \"@public\", \"@system\" and \"@internalSubset\").    Thrown when the Structure includes an xml declaration key (e.g. \"?xml\") with an attribute that has an invalid Primitive Value. (e.g. Key: \"@version\", Value: false, where \"@version\" must be a numeric value).    Thrown when the Structure includes a document type definition key (e.g. \"!DOCTYPE\") that has an attribute with an invalid Primitive Value. (e.g. Key: \"@name\", Value: 22, where \"@name\" must be a text value).    Thrown when the Structure includes an attribute key with a Complex Type as a value. (e.g. Key: \"@name\", Value: new UserCredentials{...}).    Remarks Attributes If a Node requires an attribute, the attribute is defined by a Key where the key is the attribute name with an \"@\" before it and the Item is the attribute data, for example:\n{ \"node\": { \"@attribute\": \"Attribute Value\", \"innernode\": \"Inner Node Value\" } } The Xml example above would be converted to the following Structure\n@\"\u003cnode attribute=\"Attribute Value\"\u003e \u003cinnerNode\u003eInner Node Value\u003c/innerNode\u003e \u003c/node\u003e\" Primitive Values within Attribute Keys Attribute keys may only have Primitive Values as shown in the example below. An XmlSerializationException will be thrown if a Complex Value is used as an attribute key.\n{ \"node\": { \"@validAttribute\": \"Attribute Value\", \"@invalidAttribute\": new ComplexValue(\"Invalid\"), } } Key Restrictions An Xml declaration key (e.g. \"?xml\") can only accept the following attributes: \"@version\", \"@encoding\" and \"@standalone\".\nA document type definition key (e.g. \"!DOCTYPE\") can only accept the following attributes: \"@name\", \"@public\", \"@system\" and \"@internalSubset\".\n\"$id\", \"$ref\", \"$type\", \"$value\" and \"values\" are reserved words and should not be used as keys.\nText Nodes If a key contains a structure as its item, the inner keys are converted into Nodes with their corresponding items as the values. The key \"#text\" is converted into value of its parent node.\n{ \"node\": { \"innerNode\": { \"@attrubute\": \"attributeValue\", \"#text\": \"Inner Node Value\" }, \"#text\": \"Node Value\" } } The Structure example above would be converted to the following Xml.\n@\"\u003cnode\u003e \u003cinnerNode attribute=\"attributeValue\"\u003e Inner Node Value \u003c/innerNode\u003e Node Value \u003c/node\u003e\" Duplicate Nodes at the Same Level If there are multiple duplicate nodes at the same level, they are defined using a Key where the key is the duplicated node name and the Item is a list of each of the corresponding duplicate node’s values, for example:\n{ \"node\": { \"duplicateNode\": [\"First Duplicate Node\", \"Second Duplicate Node\"], \"distinctNode\": \"Distinct Node\" } } The Structure example above would be converted to the following Xml.\n@\"\u003cnode\u003e \u003cduplicateNode\u003e First Duplicate Node \u003c/duplicateNode\u003e \u003cduplicateNode\u003e Second Duplicate Node \u003c/duplicateNode\u003e \u003cdistinctNode\u003e Distinct Node \u003c/distinctNode\u003e \u003c/node\u003e\" Using Non-Alphanumeric Symbols within Node Names Any non-alphanumeric symbol (i.e. symbols that are not \"0\" to \"9\", \"a\" to \"z\", or \"A\" to \"Z\") will be converted to their respective Unicode values when used within a Key. For example, \"!\" and \"\u0026\" are both non-alphanumeric symbols and would be converted to \"x0021\" and \"x0026\" respectively.\nFor more information on characters and their Unicode values please see Character Sets\nRound-tripping It should be possible to pass the Xml created by this block to the Convert Xml To Structure block, and then pass the Structure created by the Convert Xml To Structure block back to this block, as long all values within the Xml are Strings; this is called round-tripping.\n\u003cCortex_DataTypes_Dictionaries_Structure\u003e Node \"\u003cCortex_DataTypes_Dictionaries_Structure\u003e\" is added as a root node when the Structure has more than one top level key to ensure that valid Xml is produced.\n{ \"node1\" : \"1\", \"node2\" : \"2\", \"node3\" : \"3\" } The Xml example above would be converted to the following Structure.\n@\"\u003cCortex_DataTypes_Dictionaries_Structure\u003e \u003cnode1\u003e1\u003c/node1\u003e \u003cnode2\u003e2\u003c/node2\u003e \u003cnode3\u003e3\u003c/node3\u003e \u003c/Cortex_DataTypes_Dictionaries_Structure\u003e\" ","categories":"","description":"Converts a Structure To Xml.","excerpt":"Converts a Structure To Xml.","ref":"/docs/reference/blocks/xml/convert-xml/convert-structure-to-xml-block/","tags":"","title":"Convert Structure To Xml"},{"body":"\r\rConvert Text To Date Time (Cortex.Blocks.DateAndTime.ConvertDateTime.ConvertTextToDateTimeBlock)\nDescription Converts Text to a Date Time.\nAdditional options can be specified:\n Format Template can be specified to explicity define the format of the Text (e.g. \"dd/MM/yyyy\"). Format Provider can be specified to define the cultural rules used to control the conversion (e.g. new CultureInfo(\"en-US\") will apply American English rules to the conversion).  Examples ISO 8601 Standard Format ISO 8601 Standard format is \"yyyy-MM-ddTHH:mm:ss.fffffffzzz\".\nThis example will convert \"2021-12-31T00:00:00.0000000+00:00\" to a Date Time representing midnight on 31st December 2021 (with 0 UTC time offset).\nProperties    Property Value Notes     Text ($)Text, with value \"2021-12-31T00:00:00+00:00\" ($)Text is a variable of type String   Format Template ($)FormatTemplate, with value null ($)FormatTemplate is a variable of type String   Format Provider ($)FormatProvider, with value null ($)FormatProvider is a variable of type IFormatProvider   Date Time ($)DateTime, with no value ($)DateTime is a variable that will be set to a DateTimeOffset value    Result Converting \"2021-12-31T00:00:00.0000000+00:00\" to a Date Time (without specifying any format template or provider) will result in the variable ($)DateTime being updated to a Date Time representing midnight on 31st December 2021 (with 0 UTC time offset). Its text representation will be in the ISO 8601 Standard, which can be seen below:\n\"2021-12-31T00:00:00.0000000+00:00\"  Default format for Invariant Culture Default format for Invariant Culture is \"MM/dd/yyyy HH:mm:ss zzz\".\nThis example will convert \"12/31/2021 00:00:00 +00:00\" to a Date Time representing midnight on 31st December 2021 (with 0 UTC time offset).\nProperties    Property Value Notes     Text ($)Text, with value \"12/31/2021 00:00:00 +00:00\" ($)Text is a variable of type String   Format Template ($)FormatTemplate, with value null ($)FormatTemplate is a variable of type String   Format Provider ($)FormatProvider, with value CultureInfo.InvariantCulture ($)FormatProvider is a variable of type IFormatProvider   Date Time ($)DateTime, with no value ($)DateTime is a variable that will be set to a DateTimeOffset value    Result Converting \"12/31/2021 00:00:00 +00:00\" to a Date Time without specifying a format template but specifying Invariant Culture, will result in the variable ($)DateTime being updated to a Date Time representing midnight on 31st December 2021 (with 0 UTC time offset). Its text representation will be in the ISO 8601 Standard, which can be seen below:\n\"2021-12-31T00:00:00.0000000+00:00\"  Full Date Long Time format for Invariant Culture Full Date Long Time format for Invariant Culture is \"dddd, dd MMMM yyyy HH:mm:ss\".\nThis example will convert \"Friday, 31 December 2021 00:00:00\" to a Date Time representing midnight on 31st December 2021 (with 0 UTC time offset).\n   Property Value Notes     Text ($)Text, with value \"Friday, 31 December 2021 00:00:00\" ($)Text is a variable of type String   Format Template ($)FormatTemplate, with value \"F\" ($)FormatTemplate is a variable of type String   Format Provider ($)FormatProvider, with value CultureInfo.InvariantCulture ($)FormatProvider is a variable of type IFormatProvider   Date Time ($)DateTime, with no value ($)DateTime is a variable that will be set to a DateTimeOffset value    Result Converting \"Friday, 31 December 2021 00:00:00\" to a Date Time specifying the Full Date Long Time format for Invariant Culture, will result in the variable ($)DateTime being updated to a Date Time representing midnight on 31st December 2021 (with 0 UTC time offset). Its text representation will be in the ISO 8601 Standard, which can be seen below:\n\"2021-12-31T00:00:00.0000000+00:00\"  Default format for American English (“en-US”) Default format for American English (“en-US”) is \"MM/d/yyyy h:m:s tt zzz\".\nThis example will convert \"12/31/2021 12:00:00 AM +00:00\" to a Date Time representing midnight on 31st December 2021 (with 0 UTC time offset).\n   Property Value Notes     Text ($)Text, with value \"12/31/2021 12:00:00 AM +00:00\" ($)Text is a variable of type String   Format Template ($)FormatTemplate, with value null ($)FormatTemplate is a variable of type String   Format Provider ($)FormatProvider, with value new CultureInfo(\"en-US\") ($)FormatProvider is a variable of type IFormatProvider   Date Time ($)DateTime, with no value ($)DateTime is a variable that will be set to a DateTimeOffset value    Result Converting \"12/31/2021 12:00:00 AM +00:00\" to a Date Time without specifying a format template but specifying American English \"en-US\", will result in the variable ($)DateTime being updated to a Date Time representing midnight on 31st December 2021 (with 0 UTC time offset). Its text representation will be in the ISO 8601 Standard, which can be seen below:\n\"2021-12-31T00:00:00.0000000+00:00\"  Full Date Long Time format for American English (“en-US”) Full Date Long Time format for American English (“en-US”) is \"dddd, MMMM d, yyyy h:m:s tt\".\nThis example will convert \"Friday, December 31, 2021 12:00:00 AM\" to a Date Time representing midnight on 31st December 2021 (with 0 UTC time offset).\nProperties    Property Value Notes     Text ($)Text, with value \"Friday, December 31, 2021 12:00:00 AM\" ($)Text is a variable of type String   Format Template ($)FormatTemplate, with value \"F\" ($)FormatTemplate is a variable of type String   Format Provider ($)FormatProvider, with value new CultureInfo(\"en-US\") ($)FormatProvider is a variable of type IFormatProvider   Date Time ($)DateTime, with no value ($)DateTime is a variable that will be set to a DateTimeOffset value    Result Converting \"Friday, December 31, 2021 12:00:00 AM\" to a Date Time specifying the Full Date Long Time format for American English \"en-US\", will result in the variable ($)DateTime being updated to a Date Time representing midnight on 31st December 2021 (with 0 UTC time offset). Its text representation will be in the ISO 8601 Standard, which can be seen below:\n\"2021-12-31T00:00:00.0000000+00:00\"  Properties Text The Text to convert to a Date Time.\n         Data Type String   Property Type Input   Default Value ($)Text with no value    Format Template Format Template can be specified to define the format the Text is in (e.g. \"dd/MM/yyyy\").\nIf Format Template does not contain any valid format specifiers (e.g. \"ww/ww/wwww\") and the text exactly matches the Format Template (e.g. \"ww/ww/wwww\"), then Date Time is set to a DateTimeOffset value that represents the current Date and Time.\nIf Format Template is not specified, null or empty (i.e. \"\"), the ISO 8601 Standard format will be used for the conversion (i.e. \"yyyy-MM-ddTHH:mm:ss.fffffffzzz\").\nIf the ISO 8601 Standard format fails, then the default template of the specified Format Provider will be used; if there is no specified Format Provider, then Invariant Culture rules will be used instead.\nFor information about format templates and specifiers, please see Date and Time Formats.\n         Data Type String   Property Type Input   Default Value ($)FormatTemplate with value null    Format Provider Format Provider can be specified to define the cultural rules used to control the conversion (e.g. new CultureInfo(\"en-US\") will apply American English rules to the conversion).\nIf Format Provider is not specified or null, CultureInfo.InvariantCulture will be used; CultureInfo.InvariantCulture is associated with the English language but not with any country/region. For more information, please see Invariant Culture rules.\n         Data Type IFormatProvider   Property Type Input   Default Value ($)FormatProvider with value null    Date Time The Date Time that has been converted from Text.\nIts text representation will be in the ISO 8601 Standard (e.g. 2021-11-05T08:48:08.0307614+00:00).\nFor more information about Date and Time, please see Working with Dates and Time.\n         Data Type DateTimeOffset   Property Type Output   Default Value ($)DateTime with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     FormatException Thrown when Format Template does not contain any valid specifiers (e.g. \"ww/ww/wwww\").    Thrown when Format Template contains non-specifier characters, and Text does not match the characters exactly (e.g. \"01/10/2021 12:00\" and \"dd/ww/yyyy hh:mm\" will throw, but \"01/ww/2021 12:00\" and \"dd/ww/yyyy hh:mm\" does not).    Thrown when Format Template is null or empty (i.e. \"\") and the Text does not match the ISO 8601 Standard format, the default format of the Format Provider (e.g. \"31/12/2021 00:00\" and \"dd/MM/yyyy\").   PropertyEmptyException Thrown when Text is empty (i.e. \"\").   PropertyNullException Thrown when Text is null.    Remarks Dates and Time The default text representation of Date and Time will be in the ISO 8601 Standard (e.g. 2021-11-05T08:48:08.0307614+00:00).\nFor more information, please see Working with Dates and Time.\nFormat Template and Specifiers Please note that changes to operating system date and time formats, could result in some of the examples above displaying different results.\nFor information about format templates and specifiers, please see Date and Time Formats.\nNull or Empty Format Template If Format Template is not specified, null or empty (i.e. \"\"), the ISO 8601 Standard format will be used for the conversion (i.e. \"yyyy-MM-ddTHH:mm:ss.fffffffzzz\").\nIf the ISO 8601 Standard format fails, then the default template of the specified Format Provider will be used; if there is no specified Format Provider, then Invariant Culture rules will be used instead.\nNull Format Provider If Format Provider is not specified or null, CultureInfo.InvariantCulture will be used; CultureInfo.InvariantCulture is associated with the English language but not with any country/region. For more information, please see Invariant Culture rules.\n","categories":"","description":"Converts Text to a Date Time.","excerpt":"Converts Text to a Date Time.","ref":"/docs/reference/blocks/date-and-time/convert-date-time/convert-text-to-date-time-block/","tags":"","title":"Convert Text To Date Time"},{"body":"","categories":"","description":"Convert text to a different format (e.g. `\"lowercase\"`, `\"UPPERCASE\"`, `\"Title Case\"`, `\"camelCase\"`, `\"PascalCase\"`).","excerpt":"Convert text to a different format (e.g. `\"lowercase\"`, `\"UPPERCASE\"`, `\"Title Case\"`, `\"camelCase\"`, `\"PascalCase\"`).","ref":"/docs/reference/blocks/text/convert-to/","tags":"","title":"Convert To"},{"body":"\r\rConvert To Camel Case (Cortex.Blocks.Text.ConvertTo.ConvertToCamelCaseBlock)\nDescription Converts Text to camel case.\nConverting to camel case will result in all words (except the first) having their first letter capitalized, all other letters lower cased, and all spaces and punctuation being removed (e.g. \"TEXT to convert to camel-case!\" will be converted to \"textToConvertToCamelCase\").\nExamples Text converted to camel case This example will convert \"The quick brown fox jumps over the lazy dog\" to camel case.\nIt performs a culture-insensitive conversion of the text.\nProperties    Property Value Notes     Text ($)Text, with value \"The quick brown fox jumps over the lazy dog\" ($)Text is a variable of type String   Culture Info ($)CultureInfo, with value CultureInfo.InvariantCulture ($)CultureInfo is a variable of type CultureInfo    Result Converting \"The quick brown fox jumps over the lazy dog\" to camel case will result in the variable ($)Text being updated to the following:\n\"theQuickBrownFoxJumpsOverTheLazyDog\"  Properties Text The Text to convert to camel case.\n         Data Type String   Property Type InputOutput   Default Value ($)Text with value \"\"    Culture Info The Culture Info used to perform the conversion of the Text.\nFor information about the supported values for the Culture Info property and examples of how it affects casing rules, please see Text Casing.\n         Data Type CultureInfo   Property Type Input   Default Value ($)CultureInfo with value CultureInfo.InvariantCulture    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     InvalidPropertyValueException Thrown when the culture identifier of the Culture Info is invalid (e.g. new CultureInfo(\"InvalidCultureIdentifier\"))    Remarks Culture Info For information about the supported values for the CultureInfo property and examples of how it affects casing rules, please see Text Casing.\nNull Culture Info If Culture Info is null, it will be set to CultureInfo.InvariantCulture.\nNull or empty Text If Text is null or empty (i.e. \"\"), no operation is performed.\nImmutable String data type The String data type used to represent Text is immutable, which means it is read-only and cannot be changed once created.\nTo overcome this, this block creates a new String which has the Text converted to camel case and re-assigns it to the variable specified in the Text property.\n","categories":"","description":"Converts text to camel case (e.g. `\"camelCase\"`).","excerpt":"Converts text to camel case (e.g. `\"camelCase\"`).","ref":"/docs/reference/blocks/text/convert-to/convert-to-camel-case-block/","tags":"","title":"Convert To Camel Case"},{"body":"\r\rConvert To Lower Case (Cortex.Blocks.Text.ConvertTo.ConvertToLowerCaseBlock)\nDescription Converts Text to lower case.\nConverting to lower case will result in all letters being lower cased; spaces and punctuation will be preserved (e.g. \"TEXT to convert to lower-case!\" will be converted to \"text to convert to lower-case!\").\nExamples Text converted to lower case This example will convert \"The quick brown fox jumps over the lazy dog\" to lower case.\nIt performs a culture-insensitive conversion of the text.\nProperties    Property Value Notes     Text ($)Text, with value \"The quick brown fox jumps over the lazy dog\" ($)Text is a variable of type String   Culture Info ($)CultureInfo, with value CultureInfo.InvariantCulture ($)CultureInfo is a variable of type CultureInfo    Result Converting \"The quick brown fox jumps over the lazy dog\" to lower case will result in the variable ($)Text being updated to the following:\n\"the quick brown fox jumps over the lazy dog\"  Properties Text The Text to convert to lower case.\n         Data Type String   Property Type InputOutput   Default Value ($)Text with value \"\"    Culture Info The Culture Info used to perform the conversion of the Text.\nFor information about the supported values for the Culture Info property and examples of how it affects casing rules, please see Text Casing.\n         Data Type CultureInfo   Property Type Input   Default Value ($)CultureInfo with value CultureInfo.InvariantCulture    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     InvalidPropertyValueException Thrown when the culture identifier of the Culture Info is invalid (e.g. new CultureInfo(\"InvalidCultureIdentifier\"))    Remarks Culture Info For information about the supported values for the CultureInfo property and examples of how it affects casing rules, please see Text Casing.\nNull Culture Info If Culture Info is null, it will be set to CultureInfo.InvariantCulture.\nNull or empty Text If Text is null or empty (i.e. \"\"), no operation is performed.\nImmutable String data type The String data type used to represent Text is immutable, which means it is read-only and cannot be changed once created.\nTo overcome this, this block creates a new String which has the Text converted to lower case and re-assigns it to the variable specified in the Text property.\n","categories":"","description":"Converts text to lower case (e.g. `\"lowercase\"`).","excerpt":"Converts text to lower case (e.g. `\"lowercase\"`).","ref":"/docs/reference/blocks/text/convert-to/convert-to-lower-case-block/","tags":"","title":"Convert To Lower Case"},{"body":"\r\rConvert To Pascal Case (Cortex.Blocks.Text.ConvertTo.ConvertToPascalCaseBlock)\nDescription Converts Text to pascal case.\nConverting to pascal case will result in all words having their first letter capitalized, all other letters lower cased, and all spaces and punctuation being removed (e.g. \"TEXT to convert to pascal-case!\" will be converted to \"TextToConvertToPascalCase\").\nExamples Text converted to pascal case This example will convert \"The quick brown fox jumps over the lazy dog\" to pascal case.\nIt performs a culture-insensitive conversion of the text.\nProperties    Property Value Notes     Text ($)Text, with value \"The quick brown fox jumps over the lazy dog\" ($)Text is a variable of type String   Culture Info ($)CultureInfo, with value CultureInfo.InvariantCulture ($)CultureInfo is a variable of type CultureInfo    Result Converting \"The quick brown fox jumps over the lazy dog\" to pascal case will result in the variable ($)Text being updated to the following:\n\"TheQuickBrownFoxJumpsOverTheLazyDog\"  Properties Text The Text to convert to pascal case.\n         Data Type String   Property Type InputOutput   Default Value ($)Text with value \"\"    Culture Info The Culture Info used to perform the conversion of the Text.\nFor information about the supported values for the Culture Info property and examples of how it affects casing rules, please see Text Casing.\n         Data Type CultureInfo   Property Type Input   Default Value ($)CultureInfo with value CultureInfo.InvariantCulture    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     InvalidPropertyValueException Thrown when the culture identifier of the Culture Info is invalid (e.g. new CultureInfo(\"InvalidCultureIdentifier\"))    Remarks Culture Info For information about the supported values for the CultureInfo property and examples of how it affects casing rules, please see Text Casing.\nNull Culture Info If Culture Info is null, it will be set to CultureInfo.InvariantCulture.\nNull or empty Text If Text is null or empty (i.e. \"\"), no operation is performed.\nImmutable String data type The String data type used to represent Text is immutable, which means it is read-only and cannot be changed once created.\nTo overcome this, this block creates a new String which has the Text converted to pascal case and re-assigns it to the variable specified in the Text property.\n","categories":"","description":"Converts text to pascal case (e.g. `\"PascalCase\"`).","excerpt":"Converts text to pascal case (e.g. `\"PascalCase\"`).","ref":"/docs/reference/blocks/text/convert-to/convert-to-pascal-case-block/","tags":"","title":"Convert To Pascal Case"},{"body":"\r\rConvert To Title Case (Cortex.Blocks.Text.ConvertTo.ConvertToTitleCaseBlock)\nDescription Converts Text to title case.\nConverting to title case will result in all words having their first letter capitalized and all other letters lower cased; except for words that are entirely upper cased, such as acronyms, which remain upper cased; spaces and punctuation will be preserved (e.g. \"TEXT to convert to title-case!\" will be converted to \"TEXT To Convert To Title-Case!\").\nExamples Text converted to title case This example will convert \"The quick brown fox jumps over the lazy dog\" to title case.\nIt performs a culture-insensitive conversion of the text.\nProperties    Property Value Notes     Text ($)Text, with value \"The quick brown fox jumps over the lazy dog\" ($)Text is a variable of type String   Culture Info ($)CultureInfo, with value CultureInfo.InvariantCulture ($)CultureInfo is a variable of type CultureInfo    Result Converting \"The quick brown fox jumps over the lazy dog\" to title case will result in the variable ($)Text being updated to the following:\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"  Properties Text The Text to convert to title case.\n         Data Type String   Property Type InputOutput   Default Value ($)Text with value \"\"    Culture Info The Culture Info used to perform the conversion of the Text.\nFor information about the supported values for the Culture Info property and examples of how it affects casing rules, please see Text Casing.\n         Data Type CultureInfo   Property Type Input   Default Value ($)CultureInfo with value CultureInfo.InvariantCulture    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     InvalidPropertyValueException Thrown when the culture identifier of the Culture Info is invalid (e.g. new CultureInfo(\"InvalidCultureIdentifier\"))    Remarks Culture Info For information about the supported values for the CultureInfo property and examples of how it affects casing rules, please see Text Casing.\nNull Culture Info If Culture Info is null, it will be set to CultureInfo.InvariantCulture.\nNull or empty Text If Text is null or empty (i.e. \"\"), no operation is performed.\nImmutable String data type The String data type used to represent Text is immutable, which means it is read-only and cannot be changed once created.\nTo overcome this, this block creates a new String which has the Text converted to title case and re-assigns it to the variable specified in the Text property.\n","categories":"","description":"Converts text to title case (e.g. `\"Title Case\"`).","excerpt":"Converts text to title case (e.g. `\"Title Case\"`).","ref":"/docs/reference/blocks/text/convert-to/convert-to-title-case-block/","tags":"","title":"Convert To Title Case"},{"body":"\r\rConvert To Upper Case (Cortex.Blocks.Text.ConvertTo.ConvertToUpperCaseBlock)\nDescription Converts Text to upper case.\nConverting to upper case will result in all letters being upper cased; spaces and punctuation will be preserved (e.g. \"TEXT to convert to upper-case!\" will be converted to \"TEXT TO CONVERT TO UPPER-CASE!\").\nExamples Text converted to upper case This example will convert \"The quick brown fox jumps over the lazy dog\" to upper case.\nIt performs a culture-insensitive conversion of the text.\nProperties    Property Value Notes     Text ($)Text, with value \"The quick brown fox jumps over the lazy dog\" ($)Text is a variable of type String   Culture Info ($)CultureInfo, with value CultureInfo.InvariantCulture ($)CultureInfo is a variable of type CultureInfo    Result Converting \"The quick brown fox jumps over the lazy dog\" to upper case will result in the variable ($)Text being updated to the following:\n\"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\"  Properties Text The Text to convert to upper case.\n         Data Type String   Property Type InputOutput   Default Value ($)Text with value \"\"    Culture Info The Culture Info used to perform the conversion of the Text.\nFor information about the supported values for the Culture Info property and examples of how it affects casing rules, please see Text Casing.\n         Data Type CultureInfo   Property Type Input   Default Value ($)CultureInfo with value CultureInfo.InvariantCulture    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     InvalidPropertyValueException Thrown when the culture identifier of the Culture Info is invalid (e.g. new CultureInfo(\"InvalidCultureIdentifier\"))    Remarks Culture Info For information about the supported values for the CultureInfo property and examples of how it affects casing rules, please see Text Casing.\nNull Culture Info If Culture Info is null, it will be set to CultureInfo.InvariantCulture.\nNull or empty Text If Text is null or empty (i.e. \"\"), no operation is performed.\nImmutable String data type The String data type used to represent Text is immutable, which means it is read-only and cannot be changed once created.\nTo overcome this, this block creates a new String which has the Text converted to upper case and re-assigns it to the variable specified in the Text property.\n","categories":"","description":"Converts text to upper case (e.g. `\"UPPERCASE\"`).","excerpt":"Converts text to upper case (e.g. `\"UPPERCASE\"`).","ref":"/docs/reference/blocks/text/convert-to/convert-to-upper-case-block/","tags":"","title":"Convert To Upper Case"},{"body":"","categories":"","description":"Convert xml to and from other data types.","excerpt":"Convert xml to and from other data types.","ref":"/docs/reference/blocks/xml/convert-xml/","tags":"","title":"Convert Xml"},{"body":"\r\rConvert Xml To Structure (Cortex.Blocks.Xml.ConvertXml.ConvertXmlToStructureBlock)\nDescription Converts Xml to a Structure.\nEach top level Node will be converted using the following rules:\n Node names become Keys Node values become Items  Each inner Node will be converted using the following rules:\n Inner node names become Keys within the top level node’s Item Inner node values become the corresponding Item for their Key  For example:\n@\"\u003ctopLevelNode\u003e \u003cinnerNode\u003einnerNodeValue\u003c/innerNode\u003e \u003c/topLevelNode\u003e\" will be converted into:\n\"topLevelNode\": { \"innerNode\" : \"innerNodeValue\" } Examples Convert Xml to a Structure This example will convert the Xml below to its Structure representation.\n@\"\u003ctopLevelNode topLevelAttribute=\"\"exampleAttribute\"\"\u003e \u003cinnerNode innerNodeAttribute=\"\"exampleInnerNodeAttribute\"\"\u003e \u003cnestedNode\u003enested node text\u003c/nestedNode\u003e inner node text \u003c/innerNode\u003e \u003cid\u003e1\u003c/id\u003e \u003cid\u003e2\u003c/id\u003e \u003cid\u003e3\u003c/id\u003e \u003c/topLevelNode\u003e\" Properties    Property Value Notes     Xml ($)Xml, with value \"\u003ctopLevelNode topLevelAttribute=\"\"exampleAttribute\"\"\u003e\u003cinnerNode innerNodeAttribute=\"\"exampleInnerNodeAttribute\"\"\u003e\u003cnestedNode\u003enested node text\u003c/nestedNode\u003einner node text\u003c/innerNode\u003e\u003cid\u003e1\u003c/id\u003e\u003cid\u003e2\u003c/id\u003e\u003cid\u003e3\u003c/id\u003e\u003c/topLevelNode\u003e\" ($)Xml is a variable of type String   Structure ($)Structure, with no value ($)Structure is a variable that will be set to a Structure value    Result Converting:\n@\"\u003ctopLevelNode topLevelAttribute=\"\"exampleAttribute\"\"\u003e \u003cinnerNode innerNodeAttribute=\"\"exampleInnerNodeAttribute\"\"\u003e \u003cnestedNode\u003enested node text\u003c/nestedNode\u003e inner node text \u003c/innerNode\u003e \u003cid\u003e1\u003c/id\u003e \u003cid\u003e2\u003c/id\u003e \u003cid\u003e3\u003c/id\u003e \u003c/topLevelNode\u003e\" to a Structure results in the variable ($)Structure being updated to the following:\n{ \"topLevelNode\": { \"@topLevelAttribute\" : \"exampleAttribute\", \"innerNode\" : { \"@innerNodeAttribute\" : \"exampleInnerNodeAttribute\", \"nestedNode\": \"nested node text\", \"#text\": \"inner node text\" }, \"id\": [ 1, 2, 3 ], } }  The node \"topLevelNode\" is converted into the \"topLevelNode\" key. The attribute \"topLevelAttribute\" is converted into the \"@topLevelAttribute\" key with its corresponding value as the item. The node \"innerNode\" is converted into the \"innerNode\" key. The attribute \"innerNodeAttribute\" is converted into the \"@innerNodeAttribute\" key with its corresponding value as the item. The node \"nestedNode\" is converted into the \"nestedNode\" key with its corresponding value as the item. The value of \"innerNode\" is converted into the \"#text\" key with its corresponding value as the item. The three \"id\" nodes are converted into a single \"id\" key with each corresponding value being an entry of the item list.   Convert Round-tripped Xml to a Structure This example will convert the Xml below to its Structure representation. This example will only occur when a Structure is Converted to Xml using the Convert Structure To Xml block and is then converted again using this block. This is called Round-Tripping.\nProperties    Property Value Notes     Xml ($)Xml, with value \"\u003cCortex_DataTypes_Dictionaries_Structure\u003e\u003cnode1\u003e1\u003c/node1\u003e\u003cnode2\u003e2\u003c/node2\u003e\u003cnode3\u003e3\u003c/node3\u003e\u003c/Cortex_DataTypes_Dictionaries_Structure\u003e\" ($)Xml is a variable of type String   Structure ($)Structure, with no value ($)Structure is a variable that will be set to a Structure value    Result Converting:\n@\"\u003cCortex_DataTypes_Dictionaries_Structure\u003e \u003cnode1\u003e1\u003c/node1\u003e \u003cnode2\u003e2\u003c/node2\u003e \u003cnode3\u003e3\u003c/node3\u003e \u003c/Cortex_DataTypes_Dictionaries_Structure\u003e\" to a Structure results in the variable ($)Structure being updated to the following:\n{ \"node1\" : \"1\", \"node2\" : \"2\", \"node3\" : \"3\" }  The \"Cortex_DataTypes_Dictionaries_Structure\" root node is removed and the child nodes are all at the root level. The \"node1\" Node is converted into a Key of \"node1\" with its corresponding value as the Item. The \"node2\" Node is converted into a Key of \"node2\" with its corresponding value as the Item. The \"node3\" Node is converted into a Key of \"node3\" with its corresponding value as the Item.   Properties Xml The Xml to convert into a Structure.\n         Data Type String   Property Type Input   Default Value ($)Xml with value \"\"    Structure The Structure that has been converted from the Xml.\nFor more information about Structures, please see Working with Structures.\n         Data Type Structure   Property Type Output   Default Value ($)Structure with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     PropertyNullException Thrown when Xml is null.   PropertyEmptyException Thrown when Xml is empty (i.e. \"\").   XmlSerializationException Thrown when the Xml is not valid (i.e the Xml contains an ampersand symbol or is missing a root node).    Remarks Attributes If a Node has an attribute, the attribute is converted to a Key where the key is the attribute name with an \"@\" before it and the value is the attribute data, for example:\n@\"\u003cnode attribute=\"Attribute Value\"\u003e \u003cinnerNode\u003eInner Node Value\u003c/innerNode\u003e \u003c/node\u003e\" The Xml example above would be converted to the following Structure\n{ \"node\": { \"@attribute\": \"Attribute Value\", \"innernode\": \"Inner Node Value\" } } Text Nodes If a node contains a value and inner nodes or attributes, the inner nodes and attributes are converted into Keys with their corresponding values as the Items. The value of the node is converted into the \"#text\" key with its value as the item.\n@\"\u003cnode\u003e \u003cinnerNode attribute=\"attributeValue\"\u003e Inner Node Value \u003c/innerNode\u003e Node Value \u003c/node\u003e\" The Xml example above would be converted to the following Structure.\n{ \"node\": { \"innerNode\": { \"@attrubute\": \"attributeValue\", \"#text\": \"Inner Node Value\" }, \"#text\": \"Node Value\" } } Duplicate Nodes at the Same Level If a node contains duplicate nodes at the same level, they are converted into a Key where the key is the duplicated node name and the Item is a list of each of the corresponding duplicate node’s values, for example:\n@\"\u003cnode\u003e \u003cduplicateNode\u003e First Duplicate Node \u003c/duplicateNode\u003e \u003cduplicateNode\u003e Second Duplicate Node \u003c/duplicateNode\u003e \u003cdistinctNode\u003e Distinct Node \u003c/distinctNode\u003e \u003c/node\u003e\" The Xml example above would be converted to the following Structure.\n{ \"node\": { \"duplicateNode\": [\"First Duplicate Node\", \"Second Duplicate Node\"], \"distinctNode\": \"Distinct Node\" } } Using Non-Alphanumeric Symbols within Node Names Any non-alphanumeric symbol (i.e. symbols that are not \"0\" to \"9\", \"a\" to \"z\", or \"A\" to \"Z\") will be converted to their respective Unicode values when used within a node name. For example, \"!\" and \"\u0026\" are both non-alphanumeric symbols and would be converted to \"x0021\" and \"x0026\" respectively.\nFor more information on characters and their Unicode values please see Character Sets\nRound-tripping It should be possible to pass the Structure created by this block to the Convert Structure To Xml block, and then pass the Xml created by the Convert Structure To Xml block back to this block, as long all values within the Xml are Strings; this is called round-tripping.\n\u003cCortex_DataTypes_Dictionaries_Structure\u003e Node The Convert Structure To Xml adds \"\u003cCortex_DataTypes_Dictionaries_Structure\u003e\" as a root node when the structure has more than one top level key to ensure that valid Xml is produced.\nWhen the \"\u003cCortex_DataTypes_Dictionaries_Structure\u003e\" root node is converted from Xml to a Structure the root node is removed and any inner nodes become the top level keys.\n@\"\u003cCortex_DataTypes_Dictionaries_Structure\u003e \u003cnode1\u003e1\u003c/node1\u003e \u003cnode2\u003e2\u003c/node2\u003e \u003cnode3\u003e3\u003c/node3\u003e \u003c/Cortex_DataTypes_Dictionaries_Structure\u003e\" The Xml example above would be converted to the following Structure.\n{ \"node1\" : \"1\", \"node2\" : \"2\", \"node3\" : \"3\" } This example will only occur when a Structure is Converted to Xml and is then converted again using this block. This is called Round-Tripping.\n","categories":"","description":"Converts Xml to a Structure.","excerpt":"Converts Xml to a Structure.","ref":"/docs/reference/blocks/xml/convert-xml/convert-xml-to-structure-block/","tags":"","title":"Convert Xml To Structure"},{"body":"Converting Objects To Text Overview TODO: Overview/summary\nTODO: .ToString() - talk about that some objects will just return their name, text formatting format providers etc.\nTODO: {{}} - synonomous with .ToString()\nTODO: Json Serialize\nTODO: Xml Serialize\nTODO: Convert.ToString()\nString interpolation This is referenced by these pages (not exclusive)\n Execute Command Block  TODO: String.Format\nBlocks that automatically convert Objects to Text TODO\n Format Text With Value Format Text With Values Split text? Convert Object To Text - need to make it clear how this works - does tostring and if tostring returns class name does json serialisation Others?  ","categories":"","description":"This page describes how to convert objects to their text representation.","excerpt":"This page describes how to convert objects to their text representation.","ref":"/docs/reference/concepts/fundamentals/converting-objects-to-text/","tags":"","title":"Converting Objects To Text"},{"body":"\r\rCopy File (Cortex.Blocks.FilesAndFolders.CopyFile.CopyFileBlock)\nDescription Copies a file at the specified File Path to the given Destination Path, with an option to Overwrite the file if it already exists.\nExamples Copy a file to a folder keeping the same file name This example will copy \"C:\\Source\\OriginalFile.txt\" to \"C:\\Destination\", with the same file name of \"OriginalFile.txt\".\nIn this example assume \"C:\\Destination\" does not already contain a file named \"OriginalFile.txt\", so overwrite can be set to either true or false and it will still work.\nProperties    Property Value Notes     File Path ($)FilePath, with value @\"C:\\Source\\OriginalFile.txt\" ($)FilePath is a variable of type String   Destination Path ($)DestinationPath, with value @\"C:\\Destination\" ($)DestinationPath is a variable of type String   Overwrite ($)Overwrite, with value false ($)Overwrite is a variable of type Boolean    Result Copying \"C:\\Source\\OriginalFile.txt\" to \"C:\\Destination\" that does not already contain a file named \"OriginalFile.txt\" will:\n Create a new file at \"C:\\Destination\\OriginalFile.txt\" with:  The content copied from \"C:\\Source\\OriginalFile.txt\". The Date Created set to the time the copy occurred. The Date Accessed set to the time the copy occurred. The Date Modified copied from \"C:\\Source\\OriginalFile.txt\". The File Attributes copied from \"C:\\Source\\OriginalFile.txt\".     Copy a file to a folder with a new name This example will copy \"C:\\Source\\OriginalFile.txt\" to \"C:\\Destination\", with a new file name of \"NewFile.txt\".\nTo rename the file when it is being copied, please note that the Destination Path must be a file path, rather than a folder path (e.g. \"C:\\Destination\\NewFile.txt\" rather than \"C:\\Destination\").\nIn this example assume \"C:\\Destination\" does not already contain a file named \"NewFile.txt\", so overwrite can be set to either true or false and it will still work.\nProperties    Property Value Notes     File Path ($)FilePath, with value @\"C:\\Source\\OriginalFile.txt\" ($)FilePath is a variable of type String   Destination Path ($)DestinationPath, with value @\"C:\\Destination\\NewFile.txt\" ($)DestinationPath is a variable of type String   Overwrite ($)Overwrite, with value false ($)Overwrite is a variable of type Boolean    Result Copying \"C:\\Source\\OriginalFile.txt\" to the path \"C:\\Destination\\NewFile.txt\" that does not already exist will:\n Create a new file at \"C:\\Destination\\NewFile.txt\" with:  The content copied from \"C:\\Source\\OriginalFile.txt\". The Date Created set to the time the copy occurred. The Date Accessed set to the time the copy occurred. The Date Modified copied from \"C:\\Source\\OriginalFile.txt\". The File Attributes copied from \"C:\\Source\\OriginalFile.txt\".     Copy a file to a folder overwriting any file that already exists with the same name This example will copy \"C:\\Source\\FileAlreadyExists.txt\" to \"C:\\Destination\", with the same file name of \"FileAlreadyExists.txt\".\nIn this example assume \"C:\\Destination\" already contains a file named \"FileAlreadyExists.txt\", so overwrite must be set to true to ensure the content of the existing file can be overwritten.\nProperties    Property Value Notes     File Path ($)FilePath, with value @\"C:\\Source\\FileAlreadyExists.txt\" ($)FilePath is a variable of type String   Destination Path ($)DestinationPath, with value @\"C:\\Destination\" ($)DestinationPath is a variable of type String   Overwrite ($)Overwrite, with value true ($)Overwrite is a variable of type Boolean    Result Copying \"C:\\Source\\FileAlreadyExists.txt\" to \"C:\\Destination\" and overwriting the existing file named \"FileAlreadyExists.txt\" will:\n Overwrite the existing file at \"C:\\Destination\\FileAlreadyExists.txt\" with:  The content copied from \"C:\\Source\\FileAlreadyExists.txt\". The Date Created left unchanged. The Date Accessed set to the time the copy occurred. The Date Modified copied from \"C:\\Source\\FileAlreadyExists.txt\". The File Attributes copied from \"C:\\Source\\FileAlreadyExists.txt\".     Properties File Path The File Path to copy the file from.\nThe File Path is case-insensitive, cannot contain any wildcard characters, and any trailing spaces will be automatically removed.\nFor information about the supported file path formats (i.e. absolute, relative, UNC etc.) and examples of each, please see File \u0026 Folder Paths.\n         Data Type String   Property Type Input   Default Value ($)FilePath with value null    Destination Path The Destination Path to copy the file to.\nThe Destination Path is case-insensitive, cannot contain any wildcard characters, and any trailing spaces will be automatically removed.\nThe Destination Path can either point to a folder or a file:\n If it points to a folder, the copied file will have the name specified in the File Path. If it points to a file, the copied file will have the name specified in the Destination Path.  Any non-existing folders within the Destination Path will be automatically created.\nFor information about the supported file and folder path formats (i.e. absolute, relative, UNC etc.) and examples of each, including how it is determined if a path points to a folder or a file, please see File \u0026 Folder Paths.\n         Data Type String   Property Type Input   Default Value ($)DestinationPath with value null    Overwrite Option to Overwrite the file in the Destination Path if it already exists.\nIf the file exists, Overwrite must be set to true, otherwise an OperationFailedException will be thrown. By default, this is set to false to avoid implicit and accidental overwriting of existing files.\n         Data Type Boolean   Property Type Input   Default Value ($)Overwrite with value false    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     InvalidPathException The Destination Path contains leading spaces.    The Destination Path contains only whitespace, or the NUL character (i.e. \\0), or contains one or more invalid characters (i.e. \", *, ?, |, \u003c, \u003e, :, \\, /) in any file or folder names.    The Destination Path (if it points to a file), or the Destination Path (if it points to a folder) plus the file name, exceeds the system-defined maximum length (typically 32,767 characters).   OperationFailedException The File Path does not exist.    The File Path points to a folder.    The File Path contains leading spaces.    The File Path contains only whitespace, or the NUL character (i.e. \\0), or contains one or more invalid characters (i.e. \", *, ?, |, \u003c, \u003e, :, \\, /) in any file or folder names.    The File Path exceeds the system-defined maximum length (typically 32,767 characters).    The File Path or Destination Path is invalid (for example, it is on an unmapped drive).    The file in the specified Destination Path exists and overwrite is false.    The file in the specified Destination Path exists, is read-only and overwrite is true.    The file in the specified Destination Path exists, is hidden and overwrite is true, but the file in the specified File Path is not hidden.    The user the flow is executing as does not have the required permissions to copy the file (e.g. not having read access to the File Path or write access to the Destination Path).    An unexpected error occurs when copying the file.   PropertyEmptyException Thrown when File Path or Destination Path are empty (i.e. \"\").   PropertyNullException Thrown when File Path or Destination Path are null.    Remarks File and Folder Paths For information about the supported file and folder path formats (i.e. absolute, relative, UNC etc.) and examples of each, including how it is determined if a path points to a folder or a file, please see File \u0026 Folder Paths.\nFile Path and Destination Path need escaping File Path and Destination Path require \\ characters to be escaped, otherwise each unescaped \\ will be reported as an Invalid property value message when trying to debug the flow.\nEscaping can be done in two ways:\n Escaping the \\ character with another \\ character (e.g. \"C:\\\\Source\\\\OriginalFile.txt\"), or Prepending an @ character before the start of the File Path (e.g. @\"C:\\Source\\OriginalFile.txt\") and Destination Path (e.g. @\"C:\\Destination\").  File Attributes When copying a file from the File Path to the new Destination Path, all of the file’s attributes will also be copied.\nFor information about the file attributes (i.e. ReadOnly, Hidden, Archive etc.), please see File \u0026 Folder Attributes.\n","categories":"","description":"Copies a file at the specified file path to the given destination path.","excerpt":"Copies a file at the specified file path to the given destination path.","ref":"/docs/reference/blocks/files-and-folders/copy-file/copy-file-block/","tags":"","title":"Copy File"},{"body":"","categories":"","description":"Copy a file or multiple files.","excerpt":"Copy a file or multiple files.","ref":"/docs/reference/blocks/files-and-folders/copy-file/","tags":"","title":"Copy File(s)"},{"body":"\r\rCopy Files (Cortex.Blocks.FilesAndFolders.CopyFile.CopyFilesBlock)\nDescription Copies files at the specified File Paths to the given Destination Path, with an option to Overwrite the files if they already exist.\nExamples Copy files to a folder keeping the same file names This example will copy [\"C:\\Source\\OriginalFile1.txt\", \"C:\\Source\\OriginalFile2.txt\"] to \"C:\\Destination\", with the same file names of \"OriginalFile1.txt\" and \"OriginalFile2.txt\".\nIn this example assume \"C:\\Destination\" does not already contain a file named \"OriginalFile1.txt\" or a file named \"OriginalFile2.txt\", so overwrite can be set to either true or false and it will still work.\nProperties    Property Value Notes     File Paths ($)FilePaths, with value [@\"C:\\Source\\OriginalFile1.txt\", @\"C:\\Source\\OriginalFile2.txt\"] ($)FilePaths is a variable of type IEnumerable\u003cString\u003e   Destination Path ($)DestinationPath, with value @\"C:\\Destination\" ($)DestinationPath is a variable of type String   Overwrite ($)Overwrite, with value false ($)Overwrite is a variable of type Boolean    Result Copying [\"C:\\Source\\OriginalFile1.txt\", \"C:\\Source\\OriginalFile2.txt\"] to \"C:\\Destination\" that does not already contain files named \"OriginalFile1.txt\" and \"OriginalFile2.txt\" will:\n Create a new file at \"C:\\Destination\\OriginalFile1.txt\" with:  The content copied from \"C:\\Source\\OriginalFile1.txt\". The Date Created set to the time the copy occurred. The Date Accessed set to the time the copy occurred. The Date Modified copied from \"C:\\Source\\OriginalFile1.txt\". The File Attributes copied from \"C:\\Source\\OriginalFile1.txt\".   Create a new file at \"C:\\Destination\\OriginalFile2.txt\" with:  The content copied from \"C:\\Source\\OriginalFile2.txt\". The Date Created set to the time the copy occurred. The Date Accessed set to the time the copy occurred. The Date Modified copied from \"C:\\Source\\OriginalFile2.txt\". The File Attributes copied from \"C:\\Source\\OriginalFile2.txt\".     Copy files to a folder overwriting any files that already exists with the same names This example will copy [\"C:\\Source\\FileAlreadyExists1.txt\", \"C:\\Source\\FileAlreadyExists2.txt\"] to \"C:\\Destination\", with the same file names of \"FileAlreadyExists1.txt\" and \"FileAlreadyExists2.txt\".\nIn this example assume \"C:\\Destination\" already contains a file named \"FileAlreadyExists1.txt\" and a file named \"FileAlreadyExists2.txt\", so overwrite must be set to true to ensure the content of the existing files can be overwritten.\nProperties    Property Value Notes     File Paths ($)FilePaths, with value [@\"C:\\Source\\FileAlreadyExists1.txt\", @\"C:\\Source\\FileAlreadyExists2.txt\"] ($)FilePaths is a variable of type IEnumerable\u003cString\u003e   Destination Path ($)DestinationPath, with value @\"C:\\Destination\" ($)DestinationPath is a variable of type String   Overwrite ($)Overwrite, with value true ($)Overwrite is a variable of type Boolean    Result Copying [\"C:\\Source\\FileAlreadyExists1.txt\", \"C:\\Source\\FileAlreadyExists2.txt\"] to \"C:\\Destination\" and overwriting the existing files named \"FileAlreadyExists1.txt\" and \"FileAlreadyExists2.txt\" will:\n Overwrite the existing file at \"C:\\Destination\\FileAlreadyExists1.txt\" with:  The content copied from \"C:\\Source\\FileAlreadyExists1.txt\". The Date Created left unchanged. The Date Accessed set to the time the copy occurred. The Date Modified copied from \"C:\\Source\\FileAlreadyExists1.txt\". The File Attributes copied from \"C:\\Source\\FileAlreadyExists1.txt\".   Overwrite the existing file at \"C:\\Destination\\FileAlreadyExists2.txt\" with:  The content copied from \"C:\\Source\\FileAlreadyExists2.txt\". The Date Created left unchanged. The Date Accessed set to the time the copy occurred. The Date Modified copied from \"C:\\Source\\FileAlreadyExists2.txt\". The File Attributes copied from \"C:\\Source\\FileAlreadyExists2.txt\".     Properties File Paths The File Paths to copy the files from.\nEach file path in File Paths is case-insensitive, cannot contain any wildcard characters, and any trailing spaces will be automatically removed.\nFor information about the supported file path formats (i.e. absolute, relative, UNC etc.) and examples of each, please see File \u0026 Folder Paths.\n         Data Type IEnumerable\u003cString\u003e   Property Type Input   Default Value ($)FilePaths with value []    Destination Path The Destination Path to copy the files to.\nThe Destination Path is case-insensitive, cannot contain any wildcard characters, and any trailing spaces will be automatically removed.\nThe Destination Path must point to a folder, otherwise an InvalidPathException will be thrown.\nThe copied files will have the names specified in the File Paths.\nAny non-existing folders within the Destination Path will be automatically created.\nFor information about the supported file and folder path formats (i.e. absolute, relative, UNC etc.) and examples of each, including how it is determined if a path points to a folder or a file, please see File \u0026 Folder Paths.\n         Data Type String   Property Type Input   Default Value ($)DestinationPath with value null    Overwrite Option to Overwrite the files in the Destination Path if they already exist.\nIf any file exists, Overwrite must be set to true, otherwise an OperationFailedException will be thrown. By default, this is set to false to avoid implicit and accidental overwriting of existing files.\n         Data Type Boolean   Property Type Input   Default Value ($)Overwrite with value false    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     InvalidPathException The Destination Path does not point to a folder.    The Destination Path contains leading spaces.    The Destination Path contains only whitespace, or the NUL character (i.e. \\0), or contains one or more invalid characters (i.e. \", *, ?, |, \u003c, \u003e, :, \\, /) in any file or folder names.    The Destination Path (if it points to a file), or the Destination Path (if it points to a folder) plus the file name, exceeds the system-defined maximum length (typically 32,767 characters).   OperationFailedException Any file path in File Paths is null or empty (i.e. \"\"). For more information, see Null or Empty File Paths    Any file path in File Paths is duplicated. For more information, see Duplicate File Paths    Any file path in File Paths does not exist.    Any file path in File Paths points to a folder.    Any file path in File Paths contains leading spaces.    Any file path in File Paths contains only whitespace, or the NUL character (i.e. \\0), or contains one or more invalid characters (i.e. \", *, ?, |, \u003c, \u003e, :, \\, /) in any file or folder names.    Any file path in File Paths exceeds the system-defined maximum length (typically 32,767 characters).    Any file path in File Paths or Destination Path is invalid (for example, it is on an unmapped drive).    Any file path in File Paths exists in the specified Destination Path and overwrite is false.    Any file path in File Paths exists in the specified Destination Path with the same name, is read-only and overwrite is true.    Any file path in File Paths exists in the specified Destination Path with the same name, is hidden and overwrite is true, but the file in the specified File Paths is not hidden.    The user the flow is executing as does not have the required permissions to copy any file (e.g. not having read access to a file path in File Paths or write access to the Destination Path).    An unexpected error occurs when copying a file.   PropertyEmptyException Thrown when File Paths does not contain any items, or Destination Path is empty (i.e. \"\").   PropertyNullException Thrown when File Paths or Destination Path are null.    Remarks File and Folder Paths For information about the supported file and folder path formats (i.e. absolute, relative, UNC etc.) and examples of each, including how it is determined if a path points to a folder or a file, please see File \u0026 Folder Paths.\nFile Paths and Destination Path need escaping Each file path in File Paths and Destination Path require \\ characters to be escaped, otherwise each unescaped \\ will be reported as an Invalid property value message when trying to debug the flow.\nEscaping can be done in two ways:\n Escaping the \\ character with another \\ character (e.g. \"C:\\\\Source\\\\OriginalFile.txt\"), or Prepending an @ character before the start of the file path (e.g. @\"C:\\Source\\OriginalFile.txt\") and Destination Path (e.g. @\"C:\\Destination\").  File Attributes When copying a file in the File Paths to the new Destination Path, all of the file’s attributes will also be copied.\nFor information about the file attributes (i.e. ReadOnly, Hidden, Archive etc.), please see File \u0026 Folder Attributes.\nHandling of Exceptions If an exception occurs when trying to copy a file in the File Paths, it will be recorded and the block will continue processing the remaining files. Once all files are processed, recorded exceptions will be thrown within an OperationFailedException.\n","categories":"","description":"Copies files at the specified file paths to the given destination path.","excerpt":"Copies files at the specified file paths to the given destination path.","ref":"/docs/reference/blocks/files-and-folders/copy-file/copy-files-block/","tags":"","title":"Copy Files"},{"body":"\r\rCopy Folder (Cortex.Blocks.FilesAndFolders.CopyFolder.CopyFolderBlock)\nDescription Copies a folder at the specified Folder Path to the given Destination Path, with an option to copy the folder and its content, or just its Content Only.\nAn option can also be specified to Overwrite anything being copied that already exists in the Destination Path.\nExamples Copy a folder and its content This example will copy \"C:\\Source\\Folder\" and its content to \"C:\\Destination\".\nIn this example assume:\n \"C:\\Source\\Folder\" contains:  An empty sub-folder named \"SubFolder\". A file named \"File.txt\".   \"C:\\Destination\" does not already contain a folder named \"Folder\", so overwrite can be set to either true or false and it will still work.  Properties    Property Value Notes     Folder Path ($)FolderPath, with value @\"C:\\Source\\Folder\" ($)FolderPath is a variable of type String   Destination Path ($)DestinationPath, with value @\"C:\\Destination\" ($)DestinationPath is a variable of type String   Overwrite ($)Overwrite, with value false ($)Overwrite is a variable of type Boolean   Content Only ($)ContentOnly, with value false ($)ContentOnly is a variable of type Boolean    Result Copying \"C:\\Source\\Folder\" and its content to \"C:\\Destination\" that does not already contain a folder named \"Folder\" will:\n Create a new folder at \"C:\\Destination\\Folder\" with:  The Date Created set to the time the copy occurred. The Date Accessed set to the time the copy occurred. The Date Modified set to the time the copy occurred. The Folder attributes copied from \"C:\\Source\\Folder\".   Create a new folder at \"C:\\Destination\\Folder\\SubFolder\" with:  The Date Created set to the time the copy occurred. The Date Accessed set to the time the copy occurred. The Date Modified set to the time the copy occurred. The Folder attributes copied from \"C:\\Source\\Folder\\SubFolder\".   Create a new file at \"C:\\Destination\\Folder\\File.txt\" with:  The content copied from \"C:\\Source\\Folder\\File.txt\". The Date Created set to the time the copy occurred. The Date Accessed set to the time the copy occurred. The Date Modified copied from \"C:\\Source\\Folder\\File.txt\". The File attributes copied from \"C:\\Source\\Folder\\File.txt\".     Copy a folder and its content, overwriting any content that already exists This example will copy \"C:\\Source\\Folder\" and its content to \"C:\\Destination\", overwriting any content that already exists.\nIn this example assume:\n \"C:\\Source\\Folder\" contains:  An empty sub-folder named \"SubFolder\". An empty sub-folder named \"SubFolderAlreadyExists\". A file named \"File.txt\". A file named \"FileAlreadyExists.txt\".   \"C:\\Destination\" already contains a folder named \"Folder\", which already contains:  A folder named \"SubFolderAlreadyExists\". A file named \"FileAlreadyExists.txt\".    Therefore, overwrite must be set to true to ensure the existing \"SubFolderAlreadyExists\" and \"FileAlreadyExists.txt\" can be overwritten.\nProperties    Property Value Notes     Folder Path ($)FolderPath, with value @\"C:\\Source\\Folder\" ($)FolderPath is a variable of type String   Destination Path ($)DestinationPath, with value @\"C:\\Destination\" ($)DestinationPath is a variable of type String   Overwrite ($)Overwrite, with value true ($)Overwrite is a variable of type Boolean   Content Only ($)ContentOnly, with value false ($)ContentOnly is a variable of type Boolean    Result Copying \"C:\\Source\\Folder\" and its content to \"C:\\Destination\" with the Overwrite option set to true, and where \"C:\\Destination\\Folder\", \"C:\\Destination\\Folder\\SubFolderAlreadyExists\" and \"C:\\Destination\\Folder\\FileAlreadyExists.txt\" already exist will:\n Overwrite the existing folder at \"C:\\Destination\\Folder\" with:  The Date Created left unchanged. The Date Accessed left unchanged. The Date Modified left unchanged. The Folder attributes left unchanged.   Create a new empty folder at \"C:\\Destination\\Folder\\SubFolder\" with:  The Date Created set to the time the copy occurred. The Date Accessed set to the time the copy occurred. The Date Modified set to the time the copy occurred. The Folder attributes copied from \"C:\\Source\\Folder\\SubFolder\".   Overwrite the existing folder at \"C:\\Destination\\Folder\\SubFolderAlreadyExists\" with:  The content left unchanged. The Date Created left unchanged. The Date Accessed left unchanged. The Date Modified left unchanged. The Folder attributes left unchanged.   Create a new file at \"C:\\Destination\\Folder\\File.txt\" with:  The content copied from \"C:\\Source\\Folder\\File.txt\". The Date Created set to the time the copy occurred. The Date Accessed set to the time the copy occurred. The Date Modified copied from \"C:\\Source\\Folder\\File.txt\". The File attributes copied from \"C:\\Source\\Folder\\File.txt\".   Overwrite the existing file at \"C:\\Destination\\Folder\\FileAlreadyExists.txt\" with:  The content copied from \"C:\\Source\\Folder\\FileAlreadyExists.txt\". The Date Created left unchanged. The Date Accessed set to the time the copy occurred. The Date Modified copied from \"C:\\Source\\Folder\\FileAlreadyExists.txt\". The File attributes copied from \"C:\\Source\\Folder\\FileAlreadyExists.txt\".     Copy a folder’s content only This example will copy \"C:\\Source\\Folder\" content only to \"C:\\Destination\".\nIn this example assume:\n \"C:\\Source\\Folder\" contains:  An empty sub-folder named \"SubFolder\". A file named \"File.txt\".   \"C:\\Destination\" does not already contain a folder named \"SubFolder\" or a file named \"File.txt\", so overwrite can be set to either true or false and it will still work.  Properties    Property Value Notes     Folder Path ($)FolderPath, with value @\"C:\\Source\\Folder\" ($)FolderPath is a variable of type String   Destination Path ($)DestinationPath, with value @\"C:\\Destination\" ($)DestinationPath is a variable of type String   Overwrite ($)Overwrite, with value false ($)Overwrite is a variable of type Boolean   Content Only ($)ContentOnly, with value true ($)ContentOnly is a variable of type Boolean    Result Copying \"C:\\Source\\Folder\" content only to \"C:\\Destination\" that does not already contain a folder named \"SubFolder\" or a file named \"File.txt\" will:\n Create a new folder at \"C:\\Destination\\SubFolder\" with:  The Date Created set to the time the copy occurred. The Date Accessed set to the time the copy occurred. The Date Modified set to the time the copy occurred. The Folder attributes copied from \"C:\\Source\\Folder\\SubFolder\".   Create a new file at \"C:\\Destination\\File.txt\" with:  The content copied from \"C:\\Source\\Folder\\File.txt\". The Date Created set to the time the copy occurred. The Date Accessed set to the time the copy occurred. The Date Modified copied from \"C:\\Source\\Folder\\File.txt\". The File attributes copied from \"C:\\Source\\Folder\\File.txt\".     Copy a folder’s content only, overwriting any content that already exists This example will copy \"C:\\Source\\Folder\" content only to \"C:\\Destination\", overwriting any content that already exists.\nIn this example assume:\n \"C:\\Source\\Folder\" contains:  An empty sub-folder named \"SubFolder\". An empty sub-folder named \"SubFolderAlreadyExists\". A file named \"File.txt\". A file named \"FileAlreadyExists.txt\".   \"C:\\Destination\" already contains:  A folder named \"SubFolderAlreadyExists\". A file named \"FileAlreadyExists.txt\".    Therefore, overwrite must be set to true to ensure the existing \"SubFolderAlreadyExists\" and \"FileAlreadyExists.txt\" can be overwritten.\nProperties    Property Value Notes     Folder Path ($)FolderPath, with value @\"C:\\Source\\Folder\" ($)FolderPath is a variable of type String   Destination Path ($)DestinationPath, with value @\"C:\\Destination\" ($)DestinationPath is a variable of type String   Overwrite ($)Overwrite, with value true ($)Overwrite is a variable of type Boolean   Content Only ($)ContentOnly, with value true ($)ContentOnly is a variable of type Boolean    Result Copying \"C:\\Source\\Folder\" content only to \"C:\\Destination\" with the Overwrite option set to true, and where \"C:\\Destination\\SubFolderAlreadyExists\" and \"C:\\Destination\\FileAlreadyExists.txt\" already exist will:\n Create a new empty folder at \"C:\\Destination\\SubFolder\" with:  The Date Created set to the time the copy occurred. The Date Accessed set to the time the copy occurred. The Date Modified set to the time the copy occurred. The Folder attributes copied from \"C:\\Source\\Folder\\SubFolder\".   Overwrite the existing folder at \"C:\\Destination\\SubFolderAlreadyExists\" with:  The content left unchanged. The Date Created left unchanged. The Date Accessed left unchanged. The Date Modified left unchanged. The Folder attributes left unchanged.   Create a new file at \"C:\\Destination\\File.txt\" with:  The content copied from \"C:\\Source\\Folder\\File.txt\". The Date Created set to the time the copy occurred. The Date Accessed set to the time the copy occurred. The Date Modified copied from \"C:\\Source\\Folder\\File.txt\". The File attributes copied from \"C:\\Source\\Folder\\File.txt\".   Overwrite the existing file at \"C:\\Destination\\FileAlreadyExists.txt\" with:  The content copied from \"C:\\Source\\Folder\\FileAlreadyExists.txt\". The Date Created left unchanged. The Date Accessed set to the time the copy occurred. The Date Modified copied from \"C:\\Source\\Folder\\FileAlreadyExists.txt\". The File attributes copied from \"C:\\Source\\Folder\\FileAlreadyExists.txt\".     Copy a folder and its content to the same location but with a different name If it is required to copy a folder and its content into the same folder it is currently located in, but with a different name, then it is not possible to do with this block; the Duplicate Folder block must be used instead.\n Copy a folder and its content to a different location but with a different name If it is required to copy a folder and its content into a different folder than the one it is currently located in, but with a different name, then it is not possible to do with this block; the Rename Folder block must be used instead.\n Properties Folder Path The Folder Path to copy the folder and/or its content from.\nThe Folder Path is case-insensitive, cannot contain any wildcard characters, and any trailing spaces will be automatically removed.\nFor information about the supported folder path formats (i.e. absolute, relative, UNC etc.) and examples of each, please see File \u0026 Folder Paths.\n         Data Type String   Property Type Input   Default Value ($)FolderPath with value null    Destination Path The Destination Path to copy the folder and/or its content to.\nThe Destination Path is case-insensitive, cannot contain any wildcard characters, and any trailing spaces will be automatically removed.\nThe Destination Path must point to a folder, otherwise an InvalidPathException will be thrown.\nThe copied folders and files will have the same names as the folders and files copied.\nAny non-existing folders within the Destination Path will be automatically created.\nFor information about the supported file and folder path formats (i.e. absolute, relative, UNC etc.) and examples of each, including how it is determined if a path points to a folder or a file, please see File \u0026 Folder Paths.\n         Data Type String   Property Type Input   Default Value ($)DestinationPath with value null    Overwrite Option to Overwrite the folder and/or contents being copied to in the Destination Path if they already exist.\nIf the folder and/or contents exists, Overwrite must be set to true, otherwise an OperationFailedException will be thrown. By default, this is set to false to avoid implicit and accidental overwriting of existing folders and files.\n         Data Type Boolean   Property Type Input   Default Value ($)Overwrite with value false    Content Only Option to specify whether to copy the folder and its content or just the Content Only.\nTo copy the folder and its content, Content Only must be set to false; to copy just the content, Content Only must be set to true.\n         Data Type Boolean   Property Type Input   Default Value ($)ContentOnly with value false    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     InvalidPathException The Destination Path points to a file.    The Destination Path contains leading spaces.    The Destination Path contains only whitespace, or the NUL character (i.e. \\0), or contains one or more invalid characters (i.e. \", *, ?, |, \u003c, \u003e, :, \\, /) in any folder names.    The Destination Path exceeds the system-defined maximum length (typically 32,767 characters).   OperationFailedException The Folder Path does not exist.    The Folder Path points to a file.    The Folder Path contains leading spaces.    The Folder Path contains only whitespace, or the NUL character (i.e. \\0), or contains one or more invalid characters (i.e. \", *, ?, |, \u003c, \u003e, :, \\, /) in any folder names.    The Folder Path exceeds the system-defined maximum length (typically 32,767 characters).    The Folder Path or Destination Path is a win32 device path (i.e starts with a \"\\\\.\\\").    The Folder Path or Destination Path is invalid (for example, it is on an unmapped drive).    The Folder Path and Destination Path point to the same folder and Content Only is true.    The Folder Path is a child folder in the Destination Path and Content Only is false.    Any file being copied already exists in the specified Destination Path and overwrite is false.    Any file being copied already exists in the specified Destination Path, is read-only and overwrite is true.    Any file being copied already exists in the specified Destination Path, is hidden and overwrite is true, but the file under the specified Folder Path is not hidden.    The user the flow is executing as does not have the required permissions to copy the folder or any of its content (e.g. not having read access to the Folder Path or its content, or write access to the Destination Path).    The operation is cyclic (e.g. copying a folder into one of its sub-folders).    An unexpected error occurs when copying the folder or any of its content.   PropertyEmptyException Thrown when Folder Path or Destination Path are empty (i.e. \"\").   PropertyNullException Thrown when Folder Path or Destination Path are null.    Remarks Folder Paths For information about the supported folder path formats (i.e. absolute, relative, UNC etc.) and examples of each, including how it is determined if a path points to a folder or a file, please see File \u0026 Folder Paths.\nFolder Path and Destination Path need escaping Folder Path and Destination Path require \\ characters to be escaped, otherwise each unescaped \\ will be reported as an Invalid property value message when trying to debug the flow.\nEscaping can be done in two ways:\n Escaping the \\ character with another \\ character (e.g. \"C:\\\\Source\\\\\"), or Prepending an @ character before the start of the Folder Path (e.g. @\"C:\\Source\") and Destination Path (e.g. @\"C:\\Destination\").  Folder Attributes When copying the folder at the specified Folder Path or any folder under it to the new Destination Path, if the copied folder already exists its attributes remain unchanged, otherwise they are copied.\nFor information about the folder attributes (i.e. ReadOnly, Hidden, Archive etc.), please see File \u0026 Folder Attributes.\nFile Attributes When copying a file under Folder Path to the new Destination Path, all of the file’s attributes are also copied.\nFor information about the file attributes (i.e. ReadOnly, Hidden, Archive etc.), please see File \u0026 Folder Attributes.\nHandling of Exceptions If an exception occurs when trying to copy Folder Path, an OperationFailedException will be thrown.\n","categories":"","description":"Copies a folder at the specified folder path to the given destination path.","excerpt":"Copies a folder at the specified folder path to the given destination path.","ref":"/docs/reference/blocks/files-and-folders/copy-folder/copy-folder-block/","tags":"","title":"Copy Folder"},{"body":"","categories":"","description":"Copy a folder or multiple folders.","excerpt":"Copy a folder or multiple folders.","ref":"/docs/reference/blocks/files-and-folders/copy-folder/","tags":"","title":"Copy Folder(s)"},{"body":"\r\rCopy Folders (Cortex.Blocks.FilesAndFolders.CopyFolder.CopyFoldersBlock)\nDescription Copies folders at the specified Folder Paths to the given Destination Path, with an option to copy the folders and their content, or just their Content Only.\nAn option can also be specified to Overwrite anything being copied that already exists in the Destination Path.\nExamples Copy folders and their content This example will copy [\"C:\\Source\\Folder1\", \"C:\\Source\\Folder2\"] and their content to \"C:\\Destination\".\nIn this example assume:\n \"C:\\Source\\Folder1\" contains:  An empty sub-folder named \"SubFolder1\". A file named \"File1.txt\".   \"C:\\Source\\Folder2\" contains:  An empty sub-folder named \"SubFolder2\". A file named \"File2.txt\".   \"C:\\Destination\" does not already contain a folder named \"Folder1\" or \"Folder2\", so overwrite can be set to either true or false and it will still work.  Properties    Property Value Notes     Folder Paths ($)FolderPaths, with value [@\"C:\\Source\\Folder1\", @\"C:\\Source\\Folder2\"] ($)FolderPaths is a variable of type IEnumerable\u003cString\u003e   Destination Path ($)DestinationPath, with value @\"C:\\Destination\" ($)DestinationPath is a variable of type String   Overwrite ($)Overwrite, with value false ($)Overwrite is a variable of type Boolean   Content Only ($)ContentOnly, with value false ($)ContentOnly is a variable of type Boolean    Result Copying [\"C:\\Source\\Folder1\", \"C:\\Source\\Folder2\"] and their content to \"C:\\Destination\" that does not already contain folders named \"Folder1\" and \"Folder2\" will:\n Create a new folder at \"C:\\Destination\\Folder1\" with:  The Date Created set to the time the copy occurred. The Date Accessed set to the time the copy occurred. The Date Modified set to the time the copy occurred. The Folder attributes copied from \"C:\\Source\\Folder1\".   Create a new folder at \"C:\\Destination\\Folder1\\SubFolder1\" with:  The Date Created set to the time the copy occurred. The Date Accessed set to the time the copy occurred. The Date Modified set to the time the copy occurred. The Folder attributes copied from \"C:\\Source\\Folder1\\SubFolder1\".   Create a new file at \"C:\\Destination\\Folder1\\File1.txt\" with:  The content copied from \"C:\\Source\\Folder1\\File1.txt\". The Date Created set to the time the copy occurred. The Date Accessed set to the time the copy occurred. The Date Modified copied from \"C:\\Source\\Folder1\\File1.txt\". The File attributes copied from \"C:\\Source\\Folder1\\File1.txt\".   Create a new folder at \"C:\\Destination\\Folder2\" with:  The Date Created set to the time the copy occurred. The Date Accessed set to the time the copy occurred. The Date Modified set to the time the copy occurred. The Folder attributes copied from \"C:\\Source\\Folder2\".   Create a new folder at \"C:\\Destination\\Folder2\\SubFolder2\" with:  The Date Created set to the time the copy occurred. The Date Accessed set to the time the copy occurred. The Date Modified set to the time the copy occurred. The Folder attributes copied from \"C:\\Source\\Folder2\\SubFolder2\".   Create a new file at \"C:\\Destination\\Folder2\\File2.txt\" with:  The content copied from \"C:\\Source\\Folder2\\File2.txt\". The Date Created set to the time the copy occurred. The Date Accessed set to the time the copy occurred. The Date Modified copied from \"C:\\Source\\Folder2\\File2.txt\". The File attributes copied from \"C:\\Source\\Folder2\\File2.txt\".     Copy folders and their content, overwriting any content that already exists This example will copy [\"C:\\Source\\Folder1\", \"C:\\Source\\Folder2\"] and their content to \"C:\\Destination\", overwriting any content that already exists.\nIn this example assume:\n \"C:\\Source\\Folder1\" contains:  An empty sub-folder named \"SubFolder1\". An empty sub-folder named \"SubFolderAlreadyExists1\". A file named \"File1.txt\". A file named \"FileAlreadyExists1.txt\".   \"C:\\Source\\Folder2\" contains:  An empty sub-folder named \"SubFolder2\". An empty sub-folder named \"SubFolderAlreadyExists2\". A file named \"File2.txt\". A file named \"FileAlreadyExists2.txt\".   \"C:\\Destination\" already contains:  A folder named \"Folder1\", which already contains:  A folder named \"SubFolderAlreadyExists1\". A file named \"FileAlreadyExists1.txt\".   A folder named \"Folder2\", which already contains:  A folder named \"SubFolderAlreadyExists2\". A file named \"FileAlreadyExists2.txt\".      Therefore, overwrite must be set to true to ensure the existing folders and files can be overwritten.\nProperties    Property Value Notes     Folder Paths ($)FolderPaths, with value [@\"C:\\Source\\Folder1\", @\"C:\\Source\\Folder2\"] ($)FolderPaths is a variable of type IEnumerable\u003cString\u003e   Destination Path ($)DestinationPath, with value @\"C:\\Destination\" ($)DestinationPath is a variable of type String   Overwrite ($)Overwrite, with value true ($)Overwrite is a variable of type Boolean   Content Only ($)ContentOnly, with value false ($)ContentOnly is a variable of type Boolean    Result Copying [\"C:\\Source\\Folder1\", \"C:\\Source\\Folder2\"] and their content to \"C:\\Destination\" with the Overwrite option set to true, and where \"C:\\Destination\\Folder1\", \"C:\\Destination\\Folder1\\SubFolderAlreadyExists1\", \"C:\\Destination\\Folder1\\FileAlreadyExists1.txt\", \"C:\\Destination\\Folder2\", \"C:\\Destination\\Folder2\\SubFolderAlreadyExists2\" and \"C:\\Destination\\Folder2\\FileAlreadyExists2.txt\" already exist will:\n Overwrite the existing folder at \"C:\\Destination\\Folder1\" with:  The Date Created left unchanged. The Date Accessed left unchanged. The Date Modified left unchanged. The Folder attributes left unchanged.   Create a new empty folder at \"C:\\Destination\\Folder1\\SubFolder1\" with:  The Date Created set to the time the copy occurred. The Date Accessed set to the time the copy occurred. The Date Modified set to the time the copy occurred. The Folder attributes copied from \"C:\\Source\\Folder1\\SubFolder1\".   Overwrite the existing folder at \"C:\\Destination\\Folder1\\SubFolderAlreadyExists1\" with:  The content left unchanged. The Date Created left unchanged. The Date Accessed left unchanged. The Date Modified left unchanged. The Folder attributes left unchanged.   Create a new file at \"C:\\Destination\\Folder1\\File1.txt\" with:  The content copied from \"C:\\Source\\Folder1\\File1.txt\". The Date Created set to the time the copy occurred. The Date Accessed set to the time the copy occurred. The Date Modified copied from \"C:\\Source\\Folder1\\File1.txt\". The File attributes copied from \"C:\\Source\\Folder1\\File1.txt\".   Overwrite the existing file at \"C:\\Destination\\Folder1\\FileAlreadyExists1.txt\" with:  The content copied from \"C:\\Source\\Folder1\\FileAlreadyExists1.txt\". The Date Created left unchanged. The Date Accessed set to the time the copy occurred. The Date Modified copied from \"C:\\Source\\Folder1\\FileAlreadyExists1.txt\". The File attributes copied from \"C:\\Source\\Folder1\\FileAlreadyExists1.txt\".   Overwrite the existing folder at \"C:\\Destination\\Folder2\" with:  The Date Created left unchanged. The Date Accessed left unchanged. The Date Modified left unchanged. The Folder attributes left unchanged.   Create a new empty folder at \"C:\\Destination\\Folder2\\SubFolder2\" with:  The Date Created set to the time the copy occurred. The Date Accessed set to the time the copy occurred. The Date Modified set to the time the copy occurred. The Folder attributes copied from \"C:\\Source\\Folder2\\SubFolder2\".   Overwrite the existing folder at \"C:\\Destination\\Folder2\\SubFolderAlreadyExists2\" with:  The content left unchanged. The Date Created left unchanged. The Date Accessed left unchanged. The Date Modified left unchanged. The Folder attributes left unchanged.   Create a new file at \"C:\\Destination\\Folder2\\File2.txt\" with:  The content copied from \"C:\\Source\\Folder2\\File2.txt\". The Date Created set to the time the copy occurred. The Date Accessed set to the time the copy occurred. The Date Modified copied from \"C:\\Source\\Folder2\\File2.txt\". The File attributes copied from \"C:\\Source\\Folder2\\File2.txt\".   Overwrite the existing file at \"C:\\Destination\\Folder2\\FileAlreadyExists2.txt\" with:  The content copied from \"C:\\Source\\Folder2\\FileAlreadyExists2.txt\". The Date Created left unchanged. The Date Accessed set to the time the copy occurred. The Date Modified copied from \"C:\\Source\\Folder2\\FileAlreadyExists2.txt\". The File attributes copied from \"C:\\Source\\Folder2\\FileAlreadyExists2.txt\".     Copy the folders' content only This example will copy [\"C:\\Source\\Folder1\", \"C:\\Source\\Folder2\"] content only to \"C:\\Destination\".\nIn this example assume:\n \"C:\\Source\\Folder1\" contains:  An empty sub-folder named \"SubFolder1\". A file named \"File1.txt\".   \"C:\\Source\\Folder2\" contains:  An empty sub-folder named \"SubFolder2\". A file named \"File2.txt\".   \"C:\\Destination\" does not already contain a folder named \"SubFolder1\" or \"SubFolder2\" or a file named \"File1.txt\" or \"File2.txt\", so overwrite can be set to either true or false and it will still work.  Properties    Property Value Notes     Folder Paths ($)FolderPaths, with value [@\"C:\\Source\\Folder1\", @\"C:\\Source\\Folder2\"] ($)FolderPaths is a variable of type IEnumerable\u003cString\u003e   Destination Path ($)DestinationPath, with value @\"C:\\Destination\" ($)DestinationPath is a variable of type String   Overwrite ($)Overwrite, with value false ($)Overwrite is a variable of type Boolean   Content Only ($)ContentOnly, with value true ($)ContentOnly is a variable of type Boolean    Result Copying [\"C:\\Source\\Folder1\", \"C:\\Source\\Folder2\"] content only to \"C:\\Destination\" that does not already contain a folder named \"SubFolder1\" or \"SubFolder2\" or a file named \"File1.txt\" or \"File2.txt\" will:\n Create a new folder at \"C:\\Destination\\SubFolder1\" with:  The Date Created set to the time the copy occurred. The Date Accessed set to the time the copy occurred. The Date Modified set to the time the copy occurred. The Folder attributes copied from \"C:\\Source\\Folder1\\SubFolder1\".   Create a new file at \"C:\\Destination\\File1.txt\" with:  The content copied from \"C:\\Source\\Folder1\\File1.txt\". The Date Created set to the time the copy occurred. The Date Accessed set to the time the copy occurred. The Date Modified copied from \"C:\\Source\\Folder1\\File1.txt\". The File attributes copied from \"C:\\Source\\Folder1\\File1.txt\".   Create a new folder at \"C:\\Destination\\SubFolder2\" with:  The Date Created set to the time the copy occurred. The Date Accessed set to the time the copy occurred. The Date Modified set to the time the copy occurred. The Folder attributes copied from \"C:\\Source\\Folder2\\SubFolder2\".   Create a new file at \"C:\\Destination\\File2.txt\" with:  The content copied from \"C:\\Source\\Folder2\\File2.txt\". The Date Created set to the time the copy occurred. The Date Accessed set to the time the copy occurred. The Date Modified copied from \"C:\\Source\\Folder2\\File2.txt\". The File attributes copied from \"C:\\Source\\Folder2\\File2.txt\".     Copy folders' content only, overwriting any content that already exists This example will copy [\"C:\\Source\\Folder1\", \"C:\\Source\\Folder2\"] content only to \"C:\\Destination\", overwriting any content that already exists.\nIn this example assume:\n \"C:\\Source\\Folder1\" contains:  An empty sub-folder named \"SubFolder1\". An empty sub-folder named \"SubFolderAlreadyExists1\". A file named \"File1.txt\". A file named \"FileAlreadyExists1.txt\".   \"C:\\Source\\Folder2\" contains:  An empty sub-folder named \"SubFolder2\". An empty sub-folder named \"SubFolderAlreadyExists2\". A file named \"File2.txt\". A file named \"FileAlreadyExists2.txt\".   \"C:\\Destination\" already contains:  A folder named \"SubFolderAlreadyExists1\". A folder named \"SubFolderAlreadyExists2\". A file named \"FileAlreadyExists1.txt\". A file named \"FileAlreadyExists2.txt\".    Therefore, overwrite must be set to true to ensure the existing folders and files can be overwritten.\nProperties    Property Value Notes     Folder Paths ($)FolderPaths, with value [@\"C:\\Source\\Folder1\", @\"C:\\Source\\Folder2\"] ($)FolderPaths is a variable of type IEnumerable\u003cString\u003e   Destination Path ($)DestinationPath, with value @\"C:\\Destination\" ($)DestinationPath is a variable of type String   Overwrite ($)Overwrite, with value true ($)Overwrite is a variable of type Boolean   Content Only ($)ContentOnly, with value true ($)ContentOnly is a variable of type Boolean    Result Copying [\"C:\\Source\\Folder1\", \"C:\\Source\\Folder2\"] content only to \"C:\\Destination\" with the Overwrite option set to true, and where \"C:\\Destination\\SubFolderAlreadyExists1\", \"C:\\Destination\\SubFolderAlreadyExists2\", \"C:\\Destination\\FileAlreadyExists1.txt\" and \"C:\\Destination\\FileAlreadyExists2.txt\" already exist will:\n Create a new empty folder at \"C:\\Destination\\SubFolder1\" with:  The Date Created set to the time the copy occurred. The Date Accessed set to the time the copy occurred. The Date Modified set to the time the copy occurred. The Folder attributes copied from \"C:\\Source\\Folder1\\SubFolder1\".   Overwrite the existing folder at \"C:\\Destination\\SubFolderAlreadyExists1\" with:  The content left unchanged. The Date Created left unchanged. The Date Accessed left unchanged. The Date Modified left unchanged. The Folder attributes left unchanged.   Create a new file at \"C:\\Destination\\File1.txt\" with:  The content copied from \"C:\\Source\\Folder1\\File1.txt\". The Date Created set to the time the copy occurred. The Date Accessed set to the time the copy occurred. The Date Modified copied from \"C:\\Source\\Folder1\\File1.txt\". The File attributes copied from \"C:\\Source\\Folder1\\File1.txt\".   Overwrite the existing file at \"C:\\Destination\\FileAlreadyExists1.txt\" with:  The content copied from \"C:\\Source\\Folder1\\FileAlreadyExists1.txt\". The Date Created left unchanged. The Date Accessed set to the time the copy occurred. The Date Modified copied from \"C:\\Source\\Folder1\\FileAlreadyExists1.txt\". The File attributes copied from \"C:\\Source\\Folder1\\FileAlreadyExists1.txt\".   Create a new empty folder at \"C:\\Destination\\SubFolder2\" with:  The Date Created set to the time the copy occurred. The Date Accessed set to the time the copy occurred. The Date Modified set to the time the copy occurred. The Folder attributes copied from \"C:\\Source\\Folder2\\SubFolder2\".   Overwrite the existing folder at \"C:\\Destination\\SubFolderAlreadyExists2\" with:  The content left unchanged. The Date Created left unchanged. The Date Accessed left unchanged. The Date Modified left unchanged. The Folder attributes left unchanged.   Create a new file at \"C:\\Destination\\File2.txt\" with:  The content copied from \"C:\\Source\\Folder2\\File2.txt\". The Date Created set to the time the copy occurred. The Date Accessed set to the time the copy occurred. The Date Modified copied from \"C:\\Source\\Folder2\\File2.txt\". The File attributes copied from \"C:\\Source\\Folder2\\File2.txt\".   Overwrite the existing file at \"C:\\Destination\\FileAlreadyExists2.txt\" with:  The content copied from \"C:\\Source\\Folder2\\FileAlreadyExists2.txt\". The Date Created left unchanged. The Date Accessed set to the time the copy occurred. The Date Modified copied from \"C:\\Source\\Folder2\\FileAlreadyExists2.txt\". The File attributes copied from \"C:\\Source\\Folder2\\FileAlreadyExists2.txt\".     Copy folders and their content to the same location but with a different name If it is required to copy folders and their content into the same folder they are currently located in, but with a different name, then it is not possible to do with this block; the Duplicate Folder block must be used instead.\n Copy folders and their content to a different location but with a different name If it is required to copy folders and their content into a different folder than the one they are currently located in, but with a different name, then it is not possible to do with this block; the Rename Folder block must be used instead.\n Properties Folder Paths The Folder Paths to copy the folders and/or their content from.\nEach folder path in Folder Paths is case-insensitive, cannot contain any wildcard characters, and any trailing spaces will be automatically removed.\nFor information about the supported folder path formats (i.e. absolute, relative, UNC etc.) and examples of each, please see File \u0026 Folder Paths.\n         Data Type String   Property Type Input   Default Value ($)FolderPaths with value []    Destination Path The Destination Path to copy the folders and/or their content to.\nThe Destination Path is case-insensitive, cannot contain any wildcard characters, and any trailing spaces will be automatically removed.\nThe Destination Path must point to a folder, otherwise an InvalidPathException will be thrown.\nThe copied folders and files will have the same names as the folders and files copied.\nAny non-existing folders within the Destination Path will be automatically created.\nFor information about the supported file and folder path formats (i.e. absolute, relative, UNC etc.) and examples of each, including how it is determined if a path points to a folder or a file, please see File \u0026 Folder Paths.\n         Data Type String   Property Type Input   Default Value ($)DestinationPath with value null    Overwrite Option to Overwrite the folders and/or contents being copied to in the Destination Path if they already exist.\nIf any of the folders and/or contents exists, Overwrite must be set to true, otherwise an OperationFailedException will be thrown. By default, this is set to false to avoid implicit and accidental overwriting of existing folders and files.\n         Data Type Boolean   Property Type Input   Default Value ($)Overwrite with value false    Content Only Option to specify whether to copy the folders and their content or just the Content Only.\nTo copy the folders and their content, Content Only must be set to false; to copy just the content, Content Only must be set to true.\n         Data Type Boolean   Property Type Input   Default Value ($)ContentOnly with value false    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     InvalidPathException The Destination Path points to a file.    The Destination Path contains leading spaces.    The Destination Path contains only whitespace, or the NUL character (i.e. \\0), or contains one or more invalid characters (i.e. \", *, ?, |, \u003c, \u003e, :, \\, /) in any folder names.    The Destination Path exceeds the system-defined maximum length (typically 32,767 characters).   OperationFailedException Any folder path in Folder Paths is null or empty (i.e. \"\"). For more information, see Null or Empty Folder Paths    Any folder path in Folder Paths is duplicated. For more information, see Duplicate Folder Paths    Any folder path in Folder Paths does not exist.    Any folder path in Folder Paths points to a file.    Any folder path in Folder Paths contains leading spaces.    Any folder path in Folder Paths contains only whitespace, or the NUL character (i.e. \\0), or contains one or more invalid characters (i.e. \", *, ?, |, \u003c, \u003e, :, \\, /) in any folder names.    Any folder path in Folder Paths exceeds the system-defined maximum length (typically 32,767 characters).    Any folder path in Folder Paths or Destination Path is a win32 device path (i.e starts with a \"\\\\.\\\").    Any folder path in Folder Paths or Destination Path is invalid (for example, it is on an unmapped drive).    Any folder path in Folder Paths and Destination Path point to the same folder and Content Only is true.    Any folder path in Folder Paths is a child folder in the Destination Path and Content Only is false.    Any file being copied already exists in the specified Destination Path and overwrite is false.    Any file being copied already exists in the specified Destination Path, is read-only and overwrite is true.    Any file being copied already exists in the specified Destination Path, is hidden and overwrite is true, but the file under any of the specified Folder Paths is not hidden.    The user the flow is executing as does not have the required permissions to copy the folder or any of its content (e.g. not having read access to any of the folders in Folder Paths or its content, or write access to the Destination Path).    The operation is cyclic (e.g. copying a folder into one of its sub-folders).    An unexpected error occurs when copying a folder or any of its content.   PropertyEmptyException Thrown when Folder Paths does not contain any items, or Destination Path are empty (i.e. \"\").   PropertyNullException Thrown when Folder Paths or Destination Path are null.    Remarks Folder Paths For information about the supported folder path formats (i.e. absolute, relative, UNC etc.) and examples of each, including how it is determined if a path points to a folder or a file, please see File \u0026 Folder Paths.\nFolder Path and Destination Path need escaping Each folder paths in Folder Paths and Destination Path require \\ characters to be escaped, otherwise each unescaped \\ will be reported as an Invalid property value message when trying to debug the flow.\nEscaping can be done in two ways:\n Escaping the \\ character with another \\ character (e.g. \"C:\\\\Source\\\\\"), or Prepending an @ character before the start of the folder path (e.g. @\"C:\\Source\") and Destination Path (e.g. @\"C:\\Destination\").  Folder Attributes When copying the folders at the specified Folder Paths or any folder under them to the new Destination Path, if the copied folder already exists its attributes remain unchanged, otherwise they are copied.\nFor information about the folder attributes (i.e. ReadOnly, Hidden, Archive etc.), please see File \u0026 Folder Attributes.\nFile Attributes When copying a file under any of the Folder Paths to the new Destination Path, all of the file’s attributes are also copied.\nFor information about the file attributes (i.e. ReadOnly, Hidden, Archive etc.), please see File \u0026 Folder Attributes.\nConflicting Content If two or more paths in the specified Folder Paths contain content (folders or files) with the same name, and Overwrite and Content Only are true:\n The attributes of the folder/file in the Destination Path will be that of the first one copied. For files, the content of the file in the Destination Path will be that of the last one copied.  Handling of Exceptions If an exception occurs when trying to copy a folder in Folder Paths, it will be recorded and the block will continue processing the remaining folders. Once all folders are processed, recorded exceptions will be thrown within an OperationFailedException.\n","categories":"","description":"Copies folders at the specified folder paths to the given destination path.","excerpt":"Copies folders at the specified folder paths to the given destination path.","ref":"/docs/reference/blocks/files-and-folders/copy-folder/copy-folders-block/","tags":"","title":"Copy Folders"},{"body":"","categories":"","description":"Copy an object.","excerpt":"Copy an object.","ref":"/docs/reference/blocks/objects/copy-object/","tags":"","title":"Copy Object"},{"body":"\r\rCopy Object (Cortex.Blocks.Objects.CopyObject.CopyObjectBlock`1)\nDescription Makes a Copy of an Object.\nAny type of object can be copied, including Lists, Dictionaries, Structures etc.\nA deep copy will be performed, which means if the Object contains other objects, they are also copied. This is as opposed to a shallow copy, which only makes a copy of the Object; in a shallow copy contained objects are not copied, they are left as the original.\nExamples Copy a List This example will make a copy of [[1, 2, 3], [4, 5, 6]].\nProperties    Property Value Notes     Object ($)Object, with value [[1, 2, 3], [4, 5, 6]] ($)Object is a variable of type List\u003cList\u003cInt32\u003e\u003e   Copy ($)Copy, with no value ($)Copy is a variable that will be set to the type of the item (i.e. List\u003cList\u003cInt32\u003e\u003e)    Result Making a copy of [[1, 2, 3], [4, 5, 6]] results in the variable ($)Copy being updated to the following:\n[ [ 1, 2, 3 ], [ 4, 5, 6 ] ] Note that ($)Copy is an exact copy. If ($)Copy has new items added to it, items updated in it, or items removed from it, the original that ($)Copy was copied from will not be affected.\n Properties Object The Object to make the Copy of.\nAny type of object can be copied, including Lists, Dictionaries, Structures etc.\nA deep copy will be performed, which means if the Object contains other objects, they are also copied. This is as opposed to a shallow copy, which only makes a copy of the Object; in a shallow copy contained objects are not copied, they are left as the original.\n         Data Type TObject   Property Type Input   Default Value ($)Object with value null    Copy The Copy of the Object.\n         Data Type TObject   Property Type Output   Default Value ($)Copy with no value    Exceptions No exceptions are thrown by the block.\nRemarks Null Object If Object is not provided or is set to null, Copy will be set to null.\n","categories":"","description":"Copies an Object.","excerpt":"Copies an Object.","ref":"/docs/reference/blocks/objects/copy-object/copy-object-block-1/","tags":"","title":"Copy Object"},{"body":"\r\r#td-cover-block-0 {\rbackground-image: url(/featured-background_hu24f4ca02ef96507f88006fd6b79687a4_1660131_960x540_fill_q75_catmullrom_top.jpg); }\r@media only screen and (min-width: 1200px) {\r#td-cover-block-0 {\rbackground-image: url(/featured-background_hu24f4ca02ef96507f88006fd6b79687a4_1660131_1920x1080_fill_q75_catmullrom_top.jpg); }\r}\r\rCortex Evolution v2022 - Product Portal\r\rWhat's New?\nDiscover what’s new in the Cortex Evolution platform.\n\r\r\r\rOverview\nFind out what the Cortex Evolution platform is, what it can do, and how you can get started?\n\r\r\r\rGetting Started\nGet up and running with the Cortex Evolution platform in minutes.\n\r\r\r\rGuides\nThis section includes all guides for the Cortex Evolution platform.\n\r\r\r\rTutorials\nThis section includes all tutorials for the Cortex Evolution platform.\n\r\r\r\rReference\nThis section includes all reference documentation for the Cortex Evolution platform.\n\r\r\r\r\r\r\r\r\r\r\r\r...a world where everyone can automate!\r\r\r\r\r","categories":"","description":"","excerpt":"\r\r#td-cover-block-0 {\rbackground-image: url(/featured-background_hu24f4ca02ef96507f88006fd6b79687a4_1660131_960x540_fill_q75_catmullrom_top.jpg); }\r@media only screen and (min-width: 1200px) { …","ref":"/","tags":"","title":"Cortex"},{"body":"","categories":"","description":"The centralised web-based portal for accessing all user applications and tooling in the Cortex Evolution platform.","excerpt":"The centralised web-based portal for accessing all user applications and tooling in the Cortex Evolution platform.","ref":"/docs/guides/cortex-gateway/","tags":"","title":"Cortex Gateway"},{"body":"","categories":"","description":"This section includes all reference documentation for Cortex Gateway APIs.","excerpt":"This section includes all reference documentation for Cortex Gateway APIs.","ref":"/docs/reference/apis/cortex-gateway/","tags":"","title":"Cortex Gateway"},{"body":"","categories":"","description":"The web-based, low-code, integrated development environment (IDE) for creating, editing, debugging, testing and managing flows that define the logic and actions required to capture and automate simple user tasks through to complex business or IT processes.","excerpt":"The web-based, low-code, integrated development environment (IDE) for creating, editing, debugging, testing and managing flows that define the logic and actions required to capture and automate simple …","ref":"/docs/guides/cortex-studio/","tags":"","title":"Cortex Studio"},{"body":"","categories":"","description":"This section includes all reference documentation for Cortex Studio APIs.","excerpt":"This section includes all reference documentation for Cortex Studio APIs.","ref":"/docs/reference/apis/cortex-studio/","tags":"","title":"Cortex Studio"},{"body":"\r\rCreate Folder (Cortex.Blocks.FilesAndFolders.CreateFolder.CreateFolderBlock)\nDescription Creates a folder at the specified Folder Path.\nExamples Create a folder This example will create \"C:\\Source\\NewFolder\".\nProperties    Property Value Notes     Folder Path ($)FolderPath, with value @\"C:\\Source\\NewFolder\" ($)FolderPath is a variable of type String    Result Creating \"C:\\Source\\NewFolder\" results in the folder \"NewFolder\" being created in the folder \"C:\\Source\".\n Properties Folder Path The Folder Path to create the folder at.\nThe Folder Path is case-insensitive, cannot contain any wildcard characters, and any trailing spaces will be automatically removed.\nAny folders that do not exist in the Folder Path will be created.\nIf the Folder Path already exists, a new folder is not created, and no exception is thrown.\nFor information about the supported folder path formats (i.e. absolute, relative, UNC etc.) and examples of each, please see File \u0026 Folder Paths.\n         Data Type String   Property Type Input   Default Value ($)FolderPath with value null    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     OperationFailedException The Folder Path points to a file.    The Folder Path contains leading spaces.    The Folder Path contains only whitespace, or the NUL character (i.e. \\0), or contains one or more invalid characters (i.e. \", *, ?, |, \u003c, \u003e, :, \\, /) in any folder names.    The Folder Path exceeds the system-defined maximum length (typically 32,767 characters).    The Folder Path is invalid (for example, it is on an unmapped drive).    The user the flow is executing as does not have the required permissions to create the folder at the Folder Path.    An unexpected error occurs when creating the folder at the Folder Path or any of its content.   PropertyEmptyException Thrown when Folder Path is empty (i.e. \"\").   PropertyNullException Thrown when Folder Path is null.    Remarks Folder Paths For information about the supported folder path formats (i.e. absolute, relative, UNC etc.) and examples of each, including how it is determined if a path points to a folder or a file, please see File \u0026 Folder Paths.\nFolder Path needs escaping Folder Path requires \\ characters to be escaped, otherwise each unescaped \\ will be reported as an Invalid property value message when trying to debug the flow.\nEscaping can be done in two ways:\n Escaping the \\ character with another \\ character (e.g. \"C:\\\\Source\\\\\"), or Prepending an @ character before the start of the Folder Path (e.g. @\"C:\\Source\").  Folder Path already exists If the Folder Path already exists nothing is created, and no exception is thrown.\n","categories":"","description":"Creates a folder at the specified folder path.","excerpt":"Creates a folder at the specified folder path.","ref":"/docs/reference/blocks/files-and-folders/create-folder/create-folder-block/","tags":"","title":"Create Folder"},{"body":"","categories":"","description":"Create a folder or multiple folders.","excerpt":"Create a folder or multiple folders.","ref":"/docs/reference/blocks/files-and-folders/create-folder/","tags":"","title":"Create Folder(s)"},{"body":"\r\rCreate Folders (Cortex.Blocks.FilesAndFolders.CreateFolder.CreateFoldersBlock)\nDescription Creates folders at the specified Folder Paths.\nExamples Create folders This example will create [\"C:\\Source\\NewFolder1\", \"C:\\Source\\NewFolder2\"].\nProperties    Property Value Notes     Folder Paths ($)FolderPaths, with value [@\"C:\\Source\\NewFolder1\", @\"C:\\Source\\NewFolder2\"] ($)FolderPaths is a variable of type IEnumerable\u003cString\u003e    Result Creating [\"C:\\Source\\NewFolder1\", \"C:\\Source\\NewFolder2\"] results in the folders \"NewFolder1\" and \"NewFolder2\" being create in the folder \"C:\\Source\".\n Properties Folder Paths The Folder Paths to create the folders at.\nEach folder path in Folder Paths is case-insensitive, cannot contain any wildcard characters, and any trailing spaces will be automatically removed.\nAny folders that do not exist in any of the Folder Paths will be created.\nIf a folder in Folder Paths already exists, a new folder is not created, and no exception is thrown.\nFor information about the supported folder path formats (i.e. absolute, relative, UNC etc.) and examples of each, please see File \u0026 Folder Paths.\n         Data Type String   Property Type Input   Default Value ($)FolderPaths with value []    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     OperationFailedException Any folder path in Folder Paths is null or empty (i.e. \"\"). For more information, see Null or Empty Folder Paths.    Any folder path in Folder Paths is duplicated. For more information, see Duplicate Folder Paths.    Any folder path in Folder Paths points to a file.    Any folder path in Folder Paths contains leading spaces.    Any folder path in Folder Paths contains only whitespace, or the NUL character (i.e. \\0), or contains one or more invalid characters (i.e. \", *, ?, |, \u003c, \u003e, :, \\, /) in any folder names.    Any folder path in Folder Paths exceeds the system-defined maximum length (typically 32,767 characters).    Any folder path in Folder Paths is invalid (for example, it is on an unmapped drive).    The user the flow is executing as does not have the required permissions to create a folder in the Folder Paths.    An unexpected error occurs when creating a folder in the Folder Paths or any of its content.   PropertyEmptyException Thrown when Folder Paths does not contain any items.   PropertyNullException Thrown when Folder Paths is null.    Remarks Folder Paths For information about the supported folder path formats (i.e. absolute, relative, UNC etc.) and examples of each, including how it is determined if a path points to a folder or a file, please see File \u0026 Folder Paths.\nFolder Paths need escaping Each folder path in Folder Paths requires \\ characters to be escaped, otherwise each unescaped \\ will be reported as an Invalid property value message when trying to debug the flow.\nEscaping can be done in two ways:\n Escaping the \\ character with another \\ character (e.g. \"C:\\\\Source\\\\\"), or Prepending an @ character before the start of the folder path (e.g. @\"C:\\Source\").  Folder Path already exists If a folder path in Folder Paths already exists nothing is created, and no exception is thrown.\nHandling of Exceptions If an exception occurs when trying to create a folder in Folder Paths, it will be recorded and the block will continue processing the remaining folders. Once all folders are processed, recorded exceptions will be thrown within an OperationFailedException.\n","categories":"","description":"Create folders at the specified folder paths.","excerpt":"Create folders at the specified folder paths.","ref":"/docs/reference/blocks/files-and-folders/create-folder/create-folders-block/","tags":"","title":"Create Folders"},{"body":"Culture Overview TODO: Overview/summary\nInvariant Culture TODO: Invariant\nTODO: Current\nTODO: Other builtin?\nTODO: Custom/supported\nBlocks that use Culture TODO:\n","categories":"","description":"This page describes the concept of culture.","excerpt":"This page describes the concept of culture.","ref":"/docs/reference/concepts/fundamentals/culture/","tags":"","title":"Culture"},{"body":"","categories":"","description":"Blocks related to working with Data connections.","excerpt":"Blocks related to working with Data connections.","ref":"/docs/reference/blocks/data/","tags":"","title":"Data"},{"body":"","categories":"","description":"Data types used for working with data stores such as SQL Server.","excerpt":"Data types used for working with data stores such as SQL Server.","ref":"/docs/reference/data-types/data/","tags":"","title":"Data"},{"body":"","categories":"","description":"Exceptions related to data sources","excerpt":"Exceptions related to data sources","ref":"/docs/reference/exceptions/decisions/","tags":"","title":"Data"},{"body":"","categories":"","description":"Blocks related to working with Dates and Time.","excerpt":"Blocks related to working with Dates and Time.","ref":"/docs/reference/blocks/date-and-time/","tags":"","title":"Date \u0026 Time"},{"body":"Date and Time Formats Overview TODO: Overview/summary\nTODO: Common formats ISO8601, Invariant Culture\nFormat providers TODO: what are they TODO: ways of creating\n CultureInfo.InvariantCulture CultureInfo.CurrentCulture new CultureInfo(\"\") new CultureInfo(“en-GB”)  or\nhttps://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings#datetimeformatinfo-properties\nhttps://docs.microsoft.com/en-us/dotnet/api/system.globalization.datetimeformatinfo?view=net-5.0\nInvariant Culture TODO default format \"MM/dd/yyyy HH:mm:ss zzz\"\nTODO rules https://docs.microsoft.com/en-us/dotnet/api/system.datetimeoffset.parse?view=net-5.0\nCurrent Culture TODO\nFormat Templates TODO: What are they TODO: What are the 2 flavours: standard and custom TODO: How do they relate to format providers\nStandard Format Templates TODO: What are they - single character format specifier TODO: Table of them TODO: Invariant format templates -\nIn some cases, the standard format string serves as a convenient abbreviation for a longer custom format string that is invariant. Four standard format strings fall into this category: “O” (or “o”), “R” (or “r”), “s”, and “u”. These strings correspond to custom format strings defined by the invariant culture. They produce string representations of date and time values that are intended to be identical across cultures. The following table provides information on these four standard date and time format strings.\nTABLE 2 Standard format string\tDefined by DateTimeFormatInfo.InvariantInfo property\tCustom format string “O” or “o”\tNone\tyyyy'-‘MM’-‘dd’T’HH’:‘mm’:‘ss’.‘fffffffK “R” or “r”\tRFC1123Pattern\tddd, dd MMM yyyy HH’:‘mm’:‘ss ‘GMT’ “s”\tSortableDateTimePattern\tyyyy’-‘MM’-‘dd’T’HH’:‘mm’:‘ss “u”\tUniversalSortableDateTimePattern\tyyyy’-‘MM’-‘dd HH’:‘mm’:‘ss’Z’\nhttps://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings\nCustom Format Templates TODO: What are they - multiple character format specifiers TODO: Some examples\nhttps://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings\nFormat specifiers TODO: what are they TODO: Table of them\nSome of the commonly used format specifiers are:\n dd: The day of the month, from 01 through 31 MM: The month, from 01 through 12 yyyy: The year as a four-digit number HH: The hour, using a 24-hour clock from 00 to 23 hh: The hour, using a 12-hour clock from 01 to 12 mm: The minute, from 00 through 59 ss: The second, from 00 through 59 fff: The number of milliseconds tttt: The AM/PM designator  The full set of allowed format specifiers are as per standard Microsoft .NET Custom Date and Time Format Strings.\nOperating System Settings TODO: How can these affect datetime formats etc.\nhttps://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings#control-panel-settings\nTODO Add concepts page for string/object formatting that links to:\n https://docs.microsoft.com/en-us/dotnet/standard/base-types/composite-formatting https://docs.microsoft.com/en-us/dotnet/standard/base-types/best-practices-display-data  TODO Add concepts page for formatting numbers that links to:\n https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-numeric-format-strings https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-numeric-format-strings  TODO: https://docs.microsoft.com/en-us/dotnet/standard/base-types/parsing-datetime\n","categories":"","description":"This page gives information about Date and Time Formats.","excerpt":"This page gives information about Date and Time Formats.","ref":"/docs/reference/concepts/date-and-time-formats/","tags":"","title":"Date and Time Formats"},{"body":"","categories":"","description":"Blocks related to making decisions and branching the path a flow execution takes.","excerpt":"Blocks related to making decisions and branching the path a flow execution takes.","ref":"/docs/reference/blocks/decisions/","tags":"","title":"Decisions"},{"body":"","categories":"","description":"Exceptions related to Decisions","excerpt":"Exceptions related to Decisions","ref":"/docs/reference/exceptions/data/","tags":"","title":"Decisions"},{"body":"\r\rDelete File (Cortex.Blocks.FilesAndFolders.DeleteFile.DeleteFileBlock)\nDescription Deletes a file at the specified File Path.\nExamples Delete a file This example will delete \"C:\\Source\\File.txt\".\nProperties    Property Value Notes     File Path ($)FilePath, with value @\"C:\\Source\\File.txt\" ($)FilePath is a variable of type String    Result Deleting \"C:\\Source\\File.txt\" results in the file \"File.txt\" being deleted from the folder \"C:\\Source\".\n Properties File Path The File Path to delete the file from.\nThe File Path is case-insensitive, cannot contain any wildcard characters, and any trailing spaces will be automatically removed.\nIf the File Path exists it is permanently deleted; it does not go into a recycle bin.\nIf the File Path does not exist no exception is thrown.\nFor information about the supported file path formats (i.e. absolute, relative, UNC etc.) and examples of each, please see File \u0026 Folder Paths.\n         Data Type String   Property Type Input   Default Value ($)FilePath with value null    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     OperationFailedException The File Path points to a folder.    The File Path contains leading spaces.    The File Path contains only whitespace, or the NUL character (i.e. \\0), or contains one or more invalid characters (i.e. \", *, ?, |, \u003c, \u003e, :, \\, /) in any file or folder names.    The File Path exceeds the system-defined maximum length (typically 32,767 characters).    The File Path is invalid (for example, it is on an unmapped drive).    The file at the specified File Path is read-only.    The file at the specified File Path is in use by another application.    The user the flow is executing as does not have the required permissions to delete the file.    An unexpected error occurs when deleting the file.   PropertyEmptyException Thrown when File Path is empty (i.e. \"\").   PropertyNullException Thrown when File Path is null.    Remarks File Paths For information about the supported file path formats (i.e. absolute, relative, UNC etc.) and examples of each, including how it is determined if a path points to a folder or a file, please see File \u0026 Folder Paths.\nFile Path needs escaping File Path requires \\ characters to be escaped, otherwise each unescaped \\ will be reported as an Invalid property value message when trying to debug the flow.\nEscaping can be done in two ways:\n Escaping the \\ character with another \\ character (e.g. \"C:\\\\Source\\\\File.txt\"), or Prepending an @ character before the start of the File Path (e.g. @\"C:\\Source\\File.txt\").  File Path does not exist If the File Path does not exist nothing is deleted, and no exception is thrown.\n","categories":"","description":"Deletes a file at the specified file path.","excerpt":"Deletes a file at the specified file path.","ref":"/docs/reference/blocks/files-and-folders/delete-file/delete-file-block/","tags":"","title":"Delete File"},{"body":"","categories":"","description":"Delete a file or multiple files.","excerpt":"Delete a file or multiple files.","ref":"/docs/reference/blocks/files-and-folders/delete-file/","tags":"","title":"Delete File(s)"},{"body":"\r\rDelete Files (Cortex.Blocks.FilesAndFolders.DeleteFile.DeleteFilesBlock)\nDescription Deletes files at the specified File Paths.\nExamples Delete files This example will delete files [\"C:\\Source\\File1.txt\", \"C:\\Source\\File2.txt\"].\nProperties    Property Value Notes     File Paths ($)FilePaths, with value [@\"C:\\Source\\File1.txt\", @\"C:\\Source\\File2.txt\"] ($)FilePaths is a variable of type IEnumerable\u003cString\u003e    Result Deleting [\"C:\\Source\\File1.txt\", \"C:\\Source\\File2.txt\"] results in files \"File1.txt\" and \"File2.txt\" being deleted from the folder \"C:\\Source\".\n Properties File Paths The File Paths to delete the files from.\nEach file path in File Paths is case-insensitive, cannot contain any wildcard characters, and any trailing spaces will be automatically removed.\nIf a file path in File Paths exists it is permanently deleted; it does not go into a recycle bin.\nIf a file path in File Paths does not exist no exception is recorded for that file path.\nFor information about the supported file path formats (i.e. absolute, relative, UNC etc.) and examples of each, please see File \u0026 Folder Paths.\n         Data Type IEnumerable\u003cString\u003e   Property Type Input   Default Value ($)FilePaths with value []    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     OperationFailedException Any file path in File Paths is null or empty (i.e. \"\"). For more information, see Null or Empty File Paths.    Any file path in File Paths is duplicated. For more information, see Duplicate File Paths.    Any file path in File Paths points to a folder.    Any file path in File Paths contains leading spaces.    Any file path in File Paths contains only whitespace, or the NUL character (i.e. \\0), or contains one or more invalid characters (i.e. \", *, ?, |, \u003c, \u003e, :, \\, /) in any file or folder names.    Any file path in File Paths exceeds the system-defined maximum length (typically 32,767 characters).    Any file path in File Paths is invalid (for example, it is on an unmapped drive).    Any file path in File Paths is read-only.    Any file path in File Paths is in use by another application.    The user the flow is executing as does not have the required permissions to delete a file in File Paths.    An unexpected error occurs when deleting a file in File Paths.   PropertyEmptyException Thrown when File Paths does not contain any items.   PropertyNullException Thrown when File Paths is null.    Remarks File Paths For information about the supported file path formats (i.e. absolute, relative, UNC etc.) and examples of each, including how it is determined if a path points to a folder or a file, please see File \u0026 Folder Paths.\nFile Paths need escaping Each file path in File Paths requires \\ characters to be escaped, otherwise each unescaped \\ will be reported as an Invalid property value message when trying to debug the flow.\nEscaping can be done in two ways:\n Escaping the \\ character with another \\ character (e.g. \"C:\\\\Source\\\\File.txt\"), or Prepending an @ character before the start of the file path (e.g. @\"C:\\Source\\File.txt\").  File Path does not exist If a file path in File Paths does not exist no exception is recorded for that file path.\nHandling of Exceptions If an exception occurs when trying to delete a file in the File Paths, it will be recorded and the block will continue processing the remaining files. Once all files are processed, recorded exceptions will be thrown within an OperationFailedException.\n","categories":"","description":"Deletes files at the specified file paths.","excerpt":"Deletes files at the specified file paths.","ref":"/docs/reference/blocks/files-and-folders/delete-file/delete-files-block/","tags":"","title":"Delete Files"},{"body":"\r\rDelete Folder (Cortex.Blocks.FilesAndFolders.DeleteFolder.DeleteFolderBlock)\nDescription Deletes a folder at the specified Folder Path.\nA Recursive option must be set to true to be able to delete a folder that contains files and/or other folders. This is to prevent unintentional and destructive deletion of files and folders.\nExamples Delete an empty folder This example will delete \"C:\\Source\\EmptyFolder\".\nProperties    Property Value Notes     Folder Path ($)FolderPath, with value @\"C:\\Source\\EmptyFolder\" ($)FolderPath is a variable of type String   Recursive ($)Recursive, with value false ($)Recursive is a variable of type Boolean    Result Deleting \"C:\\Source\\EmptyFolder\" results in the folder \"EmptyFolder\" being deleted from the folder \"C:\\Source\".\n Delete a folder and its content This example will delete \"C:\\Source\\Folder\" and its content.\nIn this example assume:\n \"C:\\Source\\Folder\" contains:  A file named \"FileInFolder.txt\". An empty sub-folder named \"EmptySubFolder\". An sub-folder named \"SubFolder\" that contains.  A file named \"FileInSubFolder.txt\".      Therefore, recursive must be set to true to ensure child folders and files can be deleted.\nProperties    Property Value Notes     Folder Path ($)FolderPath, with value @\"C:\\Source\\Folder\" ($)FolderPath is a variable of type String   Recursive ($)Recursive, with value true ($)Recursive is a variable of type Boolean    Result Deleting \"C:\\Source\\Folder\" and its content results in:\n File \"FileInSubFolder.txt\" being deleted from the folder \"C:\\Source\\Folder\\SubFolder\". Folder \"SubFolder\" being deleted from the folder \"C:\\Source\\Folder\". Folder \"EmptySubFolder\" being deleted from the folder \"C:\\Source\\Folder\". File \"FileInFolder.txt\" being deleted from the folder \"C:\\Source\\Folder\". Folder \"Folder\" being deleted from the folder \"C:\\Source\".   Properties Folder Path The Folder Path to delete the folder from.\nThe Folder Path is case-insensitive, cannot contain any wildcard characters, and any trailing spaces will be automatically removed.\nFor information about the supported folder path formats (i.e. absolute, relative, UNC etc.) and examples of each, please see File \u0026 Folder Paths.\n         Data Type String   Property Type Input   Default Value ($)FolderPath with value null    Recursive Recursive option that must be set to true to be able to delete a folder that contains files and/or other folders.\nIf Recursive is set to false, only an empty folder will be able to be deleted; for a non-empty folder an OperationFailedException will be thrown.\nBy default, this is set to false to prevent unintentional and destructive deletion of files and folders.\n         Data Type Boolean   Property Type Input   Default Value ($)Recursive with value false    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     OperationFailedException The Folder Path points to a file.    The Folder Path contains leading spaces.    The Folder Path contains only whitespace, or the NUL character (i.e. \\0), or contains one or more invalid characters (i.e. \", *, ?, |, \u003c, \u003e, :, \\, /) in any folder names.    The Folder Path exceeds the system-defined maximum length (typically 32,767 characters).    The folder at the Folder Path is not empty and recursive is false.    The folder at the Folder Path or any sub-folders are read-only or contain read-only files and/or folders.    The user the flow is executing as does not have the required permissions to delete the folder at the Folder Path or any of its content.    An unexpected error occurs when deleting the folder at the Folder Path or any of its content.   PropertyEmptyException Thrown when Folder Path is empty (i.e. \"\").   PropertyNullException Thrown when Folder Path is null.    Remarks Folder Paths For information about the supported folder path formats (i.e. absolute, relative, UNC etc.) and examples of each, including how it is determined if a path points to a folder or a file, please see File \u0026 Folder Paths.\nFolder Path needs escaping Folder Path requires \\ characters to be escaped, otherwise each unescaped \\ will be reported as an Invalid property value message when trying to debug the flow.\nEscaping can be done in two ways:\n Escaping the \\ character with another \\ character (e.g. \"C:\\\\Source\\\\\"), or Prepending an @ character before the start of the Folder Path (e.g. @\"C:\\Source\").  Folder Path does not exist If the Folder Path does not exist nothing is deleted, and no exception is thrown.\nHandling of Exceptions If an exception occurs when trying to delete Folder Path, an OperationFailedException will be thrown.\n","categories":"","description":"Deletes a folder at the specified folder path.","excerpt":"Deletes a folder at the specified folder path.","ref":"/docs/reference/blocks/files-and-folders/delete-folder/delete-folder-block/","tags":"","title":"Delete Folder"},{"body":"","categories":"","description":"Delete a folder or multiple folders.","excerpt":"Delete a folder or multiple folders.","ref":"/docs/reference/blocks/files-and-folders/delete-folder/","tags":"","title":"Delete Folder(s)"},{"body":"\r\rDelete Folders (Cortex.Blocks.FilesAndFolders.DeleteFolder.DeleteFoldersBlock)\nDescription Deletes folders at the specified Folder Paths.\nA Recursive option must be set to true to be able to delete folders that contain files and/or other folders. This is to prevent unintentional and destructive deletion of files and folders.\nExamples Delete empty folders This example will delete [\"C:\\Source\\EmptyFolder1\", \"C:\\Source\\EmptyFolder2\"].\nProperties    Property Value Notes     Folder Paths ($)FolderPaths, with value [@\"C:\\Source\\EmptyFolder1\", @\"C:\\Source\\EmptyFolder2\"] ($)FolderPaths is a variable of type IEnumerable\u003cString\u003e   Recursive ($)Recursive, with value false ($)Recursive is a variable of type Boolean    Result Deleting [\"C:\\Source\\EmptyFolder1\", \"C:\\Source\\EmptyFolder2\"] results in the folders \"EmptyFolder1\" and \"EmptyFolder2\" being deleted from the folder \"C:\\Source\".\n Delete folders and their content This example will delete [\"C:\\Source\\Folder1\", \"C:\\Source\\Folder2\"] and their content.\nIn this example assume:\n \"C:\\Source\\Folder1\" contains:  A file named \"FileInFolder1.txt\". An empty sub-folder named \"EmptySubFolder1\". An sub-folder named \"SubFolder1\" that contains.  A file named \"FileInSubFolder1.txt\".     \"C:\\Source\\Folder2\" contains:  A file named \"FileInFolder2.txt\". An empty sub-folder named \"EmptySubFolder2\". An sub-folder named \"SubFolder2\" that contains.  A file named \"FileInSubFolder2.txt\".      Therefore, recursive must be set to true to ensure child folders and files can be deleted.\nProperties    Property Value Notes     Folder Paths ($)FolderPaths, with value [@\"C:\\Source\\Folder1\", @\"C:\\Source\\Folder2\"] ($)FolderPaths is a variable of type IEnumerable\u003cString\u003e   Recursive ($)Recursive, with value true ($)Recursive is a variable of type Boolean    Result Deleting [@\"C:\\Source\\Folder1\", @\"C:\\Source\\Folder2\"] and their content results in:\n File \"FileInSubFolder1.txt\" being deleted from the folder \"C:\\Source\\Folder1\\SubFolder1\". File \"FileInSubFolder2.txt\" being deleted from the folder \"C:\\Source\\Folder2\\SubFolder2\". Folder \"SubFolder1\" being deleted from the folder \"C:\\Source\\Folder1\". Folder \"SubFolder2\" being deleted from the folder \"C:\\Source\\Folder2\". Folder \"EmptySubFolder1\" being deleted from the folder \"C:\\Source\\Folder1\". Folder \"EmptySubFolder2\" being deleted from the folder \"C:\\Source\\Folder2\". File \"FileInFolder1.txt\" being deleted from the folder \"C:\\Source\\Folder1\". File \"FileInFolder2.txt\" being deleted from the folder \"C:\\Source\\Folder2\". Folder \"Folder1\" being deleted from the folder \"C:\\Source\". Folder \"Folder2\" being deleted from the folder \"C:\\Source\".   Properties Folder Paths The Folder Paths to delete the folders from.\nEach folder path in Folder Paths is case-insensitive, cannot contain any wildcard characters, and any trailing spaces will be automatically removed.\nFor information about the supported folder path formats (i.e. absolute, relative, UNC etc.) and examples of each, please see File \u0026 Folder Paths.\n         Data Type String   Property Type Input   Default Value ($)FolderPaths with value []    Recursive Recursive option that must be set to true to be able to delete folders that contain files and/or other folders.\nIf Recursive is set to false, only empty folders will be able to be deleted; for non-empty folders an OperationFailedException will be thrown.\nBy default, this is set to false to prevent unintentional and destructive deletion of files and folders.\n         Data Type Boolean   Property Type Input   Default Value ($)Recursive with value false    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     OperationFailedException Any folder path in Folder Paths is null or empty (i.e. \"\"). For more information, see Null or Empty Folder Paths.    Any folder path in Folder Paths is duplicated. For more information, see Duplicate Folder Paths.    Any folder path in Folder Paths points to a file.    Any folder path in Folder Paths contains leading spaces.    Any folder path in Folder Paths contains only whitespace, or the NUL character (i.e. \\0), or contains one or more invalid characters (i.e. \", *, ?, |, \u003c, \u003e, :, \\, /) in any folder names.    Any folder path in Folder Paths exceeds the system-defined maximum length (typically 32,767 characters).    Any folder path in Folder Paths is not empty and recursive is false.    Any folder path in Folder Paths or any of their sub-folders are read-only or contain read-only files and/or folders.    The user the flow is executing as does not have the required permissions to delete a folder in the Folder Paths or any of its content.    An unexpected error occurs when deleting a folder in the Folder Paths or any of its content.   PropertyEmptyException Thrown when Folder Paths does not contain any items.   PropertyNullException Thrown when Folder Paths is null.    Remarks Folder Paths For information about the supported folder path formats (i.e. absolute, relative, UNC etc.) and examples of each, including how it is determined if a path points to a folder or a file, please see File \u0026 Folder Paths.\nFolder Paths need escaping Each folder path in Folder Paths requires \\ characters to be escaped, otherwise each unescaped \\ will be reported as an Invalid property value message when trying to debug the flow.\nEscaping can be done in two ways:\n Escaping the \\ character with another \\ character (e.g. \"C:\\\\Source\\\\\"), or Prepending an @ character before the start of the folder path (e.g. @\"C:\\Source\").  Folder Path does not exist If a folder path in Folder Paths does not exist no exception is recorded for that folder path.\nHandling of Exceptions If an exception occurs when trying to delete a folder in Folder Paths, it will be recorded and the block will continue processing the remaining folders. Once all folders are processed, recorded exceptions will be thrown within an OperationFailedException.\n","categories":"","description":"Deletes folders at the specified folder paths.","excerpt":"Deletes folders at the specified folder paths.","ref":"/docs/reference/blocks/files-and-folders/delete-folder/delete-folders-block/","tags":"","title":"Delete Folders"},{"body":"","categories":"","description":"Blocks related to working with Dictionaries.","excerpt":"Blocks related to working with Dictionaries.","ref":"/docs/reference/blocks/dictionaries/","tags":"","title":"Dictionaries"},{"body":"","categories":"","description":"Exceptions related to Dictionaries","excerpt":"Exceptions related to Dictionaries","ref":"/docs/reference/exceptions/dictionaries/","tags":"","title":"Dictionaries"},{"body":"Double (System.Double)\nSummary The Double data type is used to represent a fractional, or very large or small number from -1.79769313486232e+308 through 1.79769313486232e+308.\n         Category: Numbers   Name: Double   Full Name: System.Double   Alias: double   Description: A fractional, or very large or small number from -1.79769313486232e+308 through 1.79769313486232e+308   Size: 8 bytes   Default Value: 0   Can be used as: Object, dynamic   Can be cast to: Int16, as long as value is from -32,768 through 32,767 (e.g. (Int16)32767 or (System.Int16)32767 or (short)32767)    Int32, as long as value is from -2,147,483,648 through 2,147,483,647 (e.g. (Int32)2147483647 or (System.Int32)2147483647 or (int)2147483647)    Int64, as long as value is from -9,223,372,036,854,775,808 through 9,223,372,036,854,775,807 (e.g. (Int64)9223372036854775807 or (System.Int64)9223372036854775807 or (long)9223372036854775807)    Single, as long as value is from -3.402823e+38 through 3.402823e+38 (e.g. (Single)3.402823e+38 or (System.Single)3.402823e+38 or (float)3.402823e+38)    Remarks Create a Double The following table shows some of the ways that a Double can be created.\n   Method Example Result Editor Support Notes     Declare a Double literal 0.0 0.0 Literal, Expression Zero    1.0 1.0 Literal, Expression Positive    -1.0 -1.0 Literal, Expression Negative   Use a Double expression 1.0 + 1.0 2.0 Expression Add    1.0 - 1.0 0.0 Expression Subtract    1.0 * 1.0 1.0 Expression Multiply    1.0 / 1.0 1.0 Expression Divide    Double.MaxValue 1.79769313486232e+308 Expression Maximum value of a Double. See Double.MaxValue    Double.MinValue -1.79769313486232e+308 Expression Minimum value of a Double. See Double.MinValue    Double.Parse(\"1\") 1.0 Expression Attempts to parse text and convert it to a Double value. See Double.Parse    Convert.ToDouble(\"1\") 1.0 Expression Attempts to convert text to a Double value. See Convert.ToDouble    Convert Double to Text The following table shows some of the ways that a Double can be converted to text.\n   Method Example Result Editor Support Notes     Use ToString 1.0.ToString() \"1\" Expression See Double.ToString    ($)DoubleVariable.ToString() where ($)DoubleVariable has a Double value of 1.0 \"1\" Expression See Double.ToString   Use Convert.ToString Convert.ToString(1.0) \"1\" Expression See Convert.ToString    Convert.ToString(($)DoubleVariable) where ($)DoubleVariable has a Double value of 1.0 \"1\" Expression See Convert.ToString   Use Convert Object To Text block where Object property has a Double value of 1.0 \"1\" N/A See Convert Object To Text   Use Convert Object To Json block where Object property has a Double value of 1.0 \"1.0\" N/A See Convert Object To Json    Property Editor Support  The Expression Editor is available for Input properties where the data type is Double. The Literal Editor is available for Input properties where the data type is Double.  Expression syntax is not supported within the Literal Editor for the Double data type.   The Variable Editor is available for InputOutput and Output properties where the data type is Double.  Known Limitations None\nSee Also Related Types  Int16 Int32 Int64 Single  Related Concepts  Working with Numbers  External Documentation  System.Double  ","categories":"","description":"Used to represent a fractional, or very large or small number from `-1.79769313486232e+308` through `1.79769313486232e+308`.","excerpt":"Used to represent a fractional, or very large or small number from `-1.79769313486232e+308` through `1.79769313486232e+308`.","ref":"/docs/reference/data-types/numbers/double/","tags":"","title":"Double"},{"body":"\r\rDuplicate Folder (Cortex.Blocks.FilesAndFolders.CopyFolder.DuplicateFolderBlock)\nDescription Copies a folder at the specified Folder Path to the same location but with a New Name.\nExamples Duplicate a folder This example will make a copy of \"C:\\Source\\Folder\" at \"C:\\Source\\CopyOfFolder\".\nIn this example assume:\n \"C:\\Source\\Folder\" contains:  An empty sub-folder named \"SubFolder\". A file named \"File.txt\".    Properties    Property Value Notes     Folder Path ($)FolderPath, with value @\"C:\\Source\\Folder\" ($)FolderPath is a variable of type String   New Name ($)NewName, with value \"CopyOfFolder\" ($)NewName is a variable of type String    Result Making a copy of \"C:\\Source\\Folder\" with a new name of \"CopyOfFolder\" will:\n Create a new folder at \"C:\\Source\\CopyOfFolder\" with:  The Date Created set to the time the copy occurred. The Date Accessed set to the time the copy occurred. The Date Modified set to the time the copy occurred. The Folder attributes copied from \"C:\\Source\\Folder\".   Create a new folder at \"C:\\Source\\CopyOfFolder\\SubFolder\" with:  The Date Created set to the time the copy occurred. The Date Accessed set to the time the copy occurred. The Date Modified set to the time the copy occurred. The Folder attributes copied from \"C:\\Source\\Folder\\SubFolder\".   Create a new file at \"C:\\Source\\CopyOfFolder\\File.txt\" with:  The content copied from \"C:\\Source\\Folder\\File.txt\". The Date Created set to the time the copy occurred. The Date Accessed set to the time the copy occurred. The Date Modified copied from \"C:\\Source\\Folder\\File.txt\". The File attributes copied from \"C:\\Source\\Folder\\File.txt\".     Other Copy Operations If any other folder copying operation is required, the Copy Folder or Copy Folders blocks must be used instead.\n Properties Folder Path The Folder Path to copy the folder and its content from.\nThe Folder Path is case-insensitive, cannot contain any wildcard characters, and any trailing spaces will be automatically removed.\nFor information about the supported folder path formats (i.e. absolute, relative, UNC etc.) and examples of each, please see File \u0026 Folder Paths.\n         Data Type String   Property Type Input   Default Value ($)FolderPath with value null    New Name The New Name to use for the copy of the folder.\nThe New Name is case-insensitive and any trailing spaces will be automatically removed.\nThe New Name must be a valid folder name, otherwise an InvalidFolderNameException will be thrown.\nAll child folders and files copied will have the same names as the folders and files copied.\nFor information about valid folder names, please see File \u0026 Folder Paths.\n         Data Type String   Property Type Input   Default Value ($)NewName with value null    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     InvalidFolderNameException A folder or file with the New Name already exists.    The New Name contains only whitespace, or the NUL character (i.e. \\0), or contains one or more invalid characters (i.e. \", *, ?, |, \u003c, \u003e, :, \\, /).    The New Name exceeds the system-defined maximum length (typically 32,767 characters).   OperationFailedException The Folder Path does not exist.    The Folder Path points to a file.    The Folder Path contains leading spaces.    The Folder Path contains only whitespace, or the NUL character (i.e. \\0), or contains one or more invalid characters (i.e. \", *, ?, |, \u003c, \u003e, :, \\, /) in any folder names.    The Folder Path exceeds the system-defined maximum length (typically 32,767 characters).    The Folder Path is a win32 device path (i.e starts with a \"\\\\.\\\").    The Folder Path is invalid (for example, it is on an unmapped drive).    The user the flow is executing as does not have the required permissions to copy the folder or any of its content (e.g. not having read access to the Folder Path or its content, or write access to the parent of Folder Path.    An unexpected error occurs when copying the folder or any of its content.   PropertyEmptyException Thrown when Folder Path or New Name are empty (i.e. \"\").   PropertyNullException Thrown when Folder Path or New Name are null.    Remarks Folder Paths For information about the supported folder path formats (i.e. absolute, relative, UNC etc.) and examples of each, including how it is determined if a path points to a folder or a file, please see File \u0026 Folder Paths.\nFolder Path needs escaping Folder Path requires \\ characters to be escaped, otherwise each unescaped \\ will be reported as an Invalid property value message when trying to debug the flow.\nEscaping can be done in two ways:\n Escaping the \\ character with another \\ character (e.g. \"C:\\\\Source\\\\\"), or Prepending an @ character before the start of the Folder Path (e.g. @\"C:\\Source\").  Folder Attributes When copying the folder at or any folder under the specified Folder Path all of the folder’s attributes are also copied.\nFor information about the folder attributes (i.e. ReadOnly, Hidden, Archive etc.), please see File \u0026 Folder Attributes.\nFile Attributes When copying a file under Folder Path all of the file’s attributes are also copied.\nFor information about the file attributes (i.e. ReadOnly, Hidden, Archive etc.), please see File \u0026 Folder Attributes.\nHandling of Exceptions If an exception occurs when trying to copy Folder Path, an OperationFailedException will be thrown.\n","categories":"","description":"Copies a folder at the specified folder path to the same location but with a new name.","excerpt":"Copies a folder at the specified folder path to the same location but with a new name.","ref":"/docs/reference/blocks/files-and-folders/copy-folder/duplicate-folder-block/","tags":"","title":"Duplicate Folder"},{"body":"DuplicateValueException (Cortex.Exceptions.Lists.DuplicateValueException)\nTODO: The exception thrown when…\nThe format of the exception message is as follows:\nTODO: Format How to fix TODO: How to fix…\n","categories":"","description":"The exception thrown when a list contains duplicate values and shouldn't.","excerpt":"The exception thrown when a list contains duplicate values and shouldn't.","ref":"/docs/reference/exceptions/lists/duplicatevalueexception/","tags":"","title":"DuplicateValueException"},{"body":"dynamic Summary Any data type can be used where a dynamic data type is required.\ndynamic data type is identical to the Object data type, except for one difference; dynamic data types do not need to be explicitly cast to other data types to be used, whereas Object data types do.\n         Category: All   Name: dynamic   Full Name: N/A   Alias: N/A   Description: Any data type can be used where a dynamic data type is required. dynamic data type is identical to the Object data type, except for one difference; dynamic data types do not need to be explicitly cast to other data types to be used, whereas Object data types do.   Size: Varies   Default Value: null   Can be used as: Object, dynamic   Can be cast to: N/A    Remarks When is the dynamic Data Type Used? The dynamic data type is only likely to be encountered in the following circumstances:\n An Input or InputOutput property of a Block can accept any data type An Output property of a Block can return any data type A Collection that contains different data types (e.g. [1, \"Text\", true]) is saved to a Variable  Also note, in these circumstances it is more likely to encounter the dynamic data type, rather than Object. See Object vs dynamic for more information.\nObject vs dynamic Object and dynamic data types are identical, except for one difference:\n Once a variable contains an Object data type, if it needs to be used as its original data type it must be cast back to that data type (e.g. (Int32)($)ObjectVariableContainingAnInteger); a dynamic data type does not.  Property Editor Support  The Expression Editor is available for Input properties where the data type is dynamic. The Literal Editor is not available for Input properties where the data type is dynamic. The Variable Editor is available for InputOutput and Output properties where the data type is dynamic.  Known Limitations None\nSee Also Related Types  Object  Related Concepts None\nExternal Documentation  Using dynamic  ","categories":"","description":"Any data type can be used where a `dynamic` data type is required. `dynamic` data type is identical to the `Object` data type, except for one difference; `dynamic` data types do not need to be explicitly cast to other data types to be used, whereas `Object` data types do.","excerpt":"Any data type can be used where a `dynamic` data type is required. `dynamic` data type is identical to the `Object` data type, except for one difference; `dynamic` data types do not need to be …","ref":"/docs/reference/data-types/all/dynamic/","tags":"","title":"dynamic"},{"body":"Empty Text and Whitespace TODO: This section is in preparation.\nEmpty Text \"\" or String.Empty\nWhitespace https://docs.microsoft.com/en-us/dotnet/api/system.char.iswhitespace?view=net-5.0#System_Char_IsWhiteSpace_System_Char_ and textual represnetation \\t \\r \\n etc.\n","categories":"","description":"This page describes the concept of empty text and whitespace.","excerpt":"This page describes the concept of empty text and whitespace.","ref":"/docs/reference/concepts/empty-text-and-whitespace/","tags":"","title":"Empty Text and Whitespace"},{"body":"","categories":"","description":"Blocks that indicate the end of a flow.","excerpt":"Blocks that indicate the end of a flow.","ref":"/docs/reference/blocks/flows/end-flow/","tags":"","title":"End Flow"},{"body":"\r\rEnd Flow (Cortex.Blocks.Flows.EndFlow.EndFlowBlock)\nDescription Indicates the end of a flow; when a flow execution reaches this block, the execution is ended.\nA flow can contain any number of these blocks, and they can be placed anywhere in a flow.\nThe block has no block specific properties, but it does have the Description property that is common to all blocks. This allows users to give each block a description; typically this will be left blank for this block.\nA breakpoint can be added to this block when debugging.\nExamples No examples for the block.\nProperties No properties for the block, other than the Description property that is common to all blocks.\nExceptions No exceptions are thrown by the block.\nRemarks No remarks for the block.\n","categories":"","description":"Indicates the end of a flow.","excerpt":"Indicates the end of a flow.","ref":"/docs/reference/blocks/flows/end-flow/end-flow-block/","tags":"","title":"End Flow"},{"body":"","categories":"","description":"Blocks that indicate the end of a workspace.","excerpt":"Blocks that indicate the end of a workspace.","ref":"/docs/reference/blocks/workspaces/end-workspace/","tags":"","title":"End Workspace"},{"body":"\r\rEnd Workspace (Cortex.Blocks.Workspaces.EndWorkspace.EndWorkspaceBlock)\nDescription Indicates the end of a workspace; when a flow execution reaches this block it will exit the workspace, and all variables declared in the scope of the workspace are deleted.\nA workspace can contain any number of these blocks, and they can be placed anywhere in the workspace.\nThe block has no block specific properties, but it does have the Description property that is common to all blocks. This allows users to give each block a description; typically this will be left blank for this block.\nA breakpoint can be added to this block when debugging.\nExamples No examples for the block.\nProperties No properties for the block, other than the Description property that is common to all blocks.\nExceptions No exceptions are thrown by the block.\nRemarks Workspace Scope Each workspace has its own scope; as a result, variables can be defined that only exist and are accessible in this workspace and any of its sub-workspaces. On exiting a workspace any variables defined for the workspace’s scope are deleted.\nFor information about variables and scope, please see Working with Variables.\n","categories":"","description":"Indicates the end of a workspace.","excerpt":"Indicates the end of a workspace.","ref":"/docs/reference/blocks/workspaces/end-workspace/end-workspace-block/","tags":"","title":"End Workspace"},{"body":"Exception Handling Overview TODO: Overview/summary\nTODO:\n","categories":"","description":"This page describes the concept of Exception Handling.","excerpt":"This page describes the concept of Exception Handling.","ref":"/docs/reference/concepts/exception-handling/","tags":"","title":"Exception Handling"},{"body":"","categories":"","description":"Blocks related to handling and throwing Exceptions.","excerpt":"Blocks related to handling and throwing Exceptions.","ref":"/docs/reference/blocks/exceptions/","tags":"","title":"Exceptions"},{"body":"","categories":"","description":"Blocks related to working with Executing Commands on Data connections.","excerpt":"Blocks related to working with Executing Commands on Data connections.","ref":"/docs/reference/blocks/data/execute-command/","tags":"","title":"Execute Command"},{"body":"Execute Command (Cortex.Blocks.Data.ExecuteCommand.ExecuteCommandBlock)\nDescription Connects to a data source (e.g. SQL Server) using the specified Connection Details, and executes a Command (e.g. SELECT * FROM Table), returning the Result.\nClose Connection can be specified to choose whether the connection to the data source is closed or is kept open for use on subsequent Execute Command blocks.\nExamples Selecting Rows This example will select all rows and columns from a connected SQL Server data source which have an Id less than 3, saving the rows to the Result.\nA QueryCommand is used throughout this example to select data from the data source, however, both an AnyCommand or AnyCommands could also be used to the same effect.\nThe data source contains a Table with the following rows and columns before the command is executed:\n   Id FirstColumn SecondColumn     1 \"FirstColumn1\" \"SecondColumn1\"   2 \"FirstColumn2\" \"SecondColumn2\"   3 \"FirstColumn3\" \"SecondColumn3\"    Properties    Property Value Notes     Command ($)Command, with value {\"CommandText\": \"SELECT * FROM Table WHERE Id \u003c @SelectParameter\", \"Parameters\": {\"SelectParameter\": 3}}\nIn this example ($)Command has been set using the following Expression:\nnew QueryCommand(\"SELECT * FROM Table WHERE Id \u003c @SelectParameter\", new {SelectParameter = 3}) ($)Command is a variable of type QueryCommand   Connection Details ($)ConnectionDetails, with value {\"ConnectionType\": ConnectionType.SQLServer, \"ConnectionString\": \"Server=myServerAddress;Database=myDataBase;Trusted_Connection=True;\"} ($)ConnectionDetails is a variable of type ConnectionDetails   Close Connection ($)CloseConnection, with value true ($)CloseConnection is a variable of type Boolean   Result ($)Result, with no value ($)Result will be set to the type dynamic    Result Selecting all rows and columns that have an Id less than 3 from Table using a QueryCommand results in the variable ($)Result being updated to the following:\n[ { \"Id\": 1, \"FirstColumn\": \"FirstColumn1\", \"SecondColumn\": \"SecondColumn1\" }, { \"Id\": 2, \"FirstColumn\": \"FirstColumn2\", \"SecondColumn\": \"SecondColumn2\" } ] Note that using a Parameterised Command helps prevent against SQL Injection, for more information please see Parameterised Commands. For an example of a non parameterised command please see Executing Multiple Commands (Unsafe)\n Inserting Rows This example will insert a new row into a connected SQL Server data source, saving the number of rows inserted to the Result.\nA NonQueryCommand is used throughout this example to insert data into the data source, however, both an AnyCommand or AnyCommands could also be used to the same effect.\nThe data source contains a Table with the following rows and columns before the command is executed:\n   Id FirstColumn SecondColumn     1 \"FirstColumn1\" \"SecondColumn1\"   2 \"FirstColumn2\" \"SecondColumn2\"   3 \"FirstColumn3\" \"SecondColumn3\"    Properties    Property Value Notes     Command ($)Command, with value {\"CommandText\": \"INSERT INTO Table (FirstColumn, SecondColumn) VALUES (@InsertParameter1, @InsertParameter2)\", \"Parameters\": { \"InsertParameter1\": \\\"FirstColumn4\\\", \"InsertParameter2\": \\\"SecondColumn4\\\" } }\nIn this example ($)Command has been set using the following Expression:\nnew NonQueryCommand(\"INSERT INTO Table (FirstColumn, SecondColumn) VALUES (@InsertParameter1, @InsertParameter2)\", new { InsertParameter1 = \"FirstColumn4\", InsertParameter2 = \"SecondColumn4\" }) ($)Command is a variable of type NonQueryCommand   Connection Details ($)ConnectionDetails, with value {\"ConnectionType\": ConnectionType.SQLServer, \"ConnectionString\": \"Server=myServerAddress;Database=myDataBase;Trusted_Connection=True;\"} ($)ConnectionDetails is a variable of type ConnectionDetails   Close Connection ($)CloseConnection, with value true ($)CloseConnection is a variable of type Boolean   Result ($)Result, with no value ($)Result will be set to the type dynamic    Result Inserting a new row into Table using a parameterised NonQueryCommand results in the variable ($)Result being updated to the following:\n1 This indicates that 1 row has been inserted into Table, with Table being updated to:\n   Id FirstColumn SecondColumn     1 \"FirstColumn1\" \"SecondColumn1\"   2 \"FirstColumn2\" \"SecondColumn2\"   3 \"FirstColumn3\" \"SecondColumn3\"   4 \"FirstColumn4\" \"SecondColumn4\"    Note that using a Parameterised Command helps prevent against SQL Injection, for more information please see Parameterised Commands. For an example of a non parameterised command please see Executing Multiple Commands (Unsafe)\n Updating Rows This example will update all rows on a connected SQL Server data source which have an Id less than 3, saving the number of rows updated to the Result.\nA NonQueryCommand is used throughout this example to update data in the data source, however, both an AnyCommand or AnyCommands could also be used to the same effect.\nThe data source contains a Table with the following rows and columns before the command is executed:\n   Id FirstColumn SecondColumn     1 \"FirstColumn1\" \"SecondColumn1\"   2 \"FirstColumn2\" \"SecondColumn2\"   3 \"FirstColumn3\" \"SecondColumn3\"    Properties    Property Value Notes     Command ($)Command, with value {\"CommandText\": \"UPDATE Table SET FirstColumn = \\\"Updated\\\" WHERE Id \u003c @UpdateParameter\", \"Parameters\": { \"UpdateParameter\": 3 } }\nIn this example ($)Command has been set using the following Expression:\nnew NonQueryCommand(\"UPDATE Table SET FirstColumn = \\\"Updated\\\" WHERE Id \u003c @UpdateParameter\", new {UpdateParameter = 3}) ($)Command is a variable of type NonQueryCommand   Connection Details ($)ConnectionDetails, with value {\"ConnectionType\": ConnectionType.SQLServer, \"ConnectionString\": \"Server=myServerAddress;Database=myDataBase;Trusted_Connection=True;\"} ($)ConnectionDetails is a variable of type ConnectionDetails   Close Connection ($)CloseConnection, with value true ($)CloseConnection is a variable of type Boolean   Result ($)Result, with no value ($)Result will be set to the type dynamic    Result Updating all rows that have an Id less than 3 in Table using a NonQueryCommand results in the variable ($)Result being updated to the following:\n2 This indicates that 2 rows have been updated in Table, with Table being updated to:\n   Id FirstColumn SecondColumn     1 \"Updated\" \"SecondColumn1\"   2 \"Updated\" \"SecondColumn2\"   3 \"FirstColumn3\" \"SecondColumn3\"    Note that using a Parameterised Command helps prevent against SQL Injection, for more information please see Parameterised Commands. For an example of a non parameterised command please see Executing Multiple Commands (Unsafe)\n Deleting Rows This example will delete all rows on a connected SQL Server data source which have an Id less than 3, saving the number of rows deleted to the Result.\nA NonQueryCommand is used throughout this example to delete data in the data source, however, both an AnyCommand or AnyCommands could also be used to the same effect.\nThe data source contains a Table with the following rows and columns before the command is executed:\n   Id FirstColumn SecondColumn     1 \"FirstColumn1\" \"SecondColumn1\"   2 \"FirstColumn2\" \"SecondColumn2\"   3 \"FirstColumn3\" \"SecondColumn3\"    Properties    Property Value Notes     Command ($)Command, with value {\"CommandText\": \"DELETE FROM Table WHERE Id \u003c @DeleteParameter\", \"Parameters\": { \"DeleteParameter\": 3 } }\nIn this example ($)Command has been set using the following Expression:\nnew NonQueryCommand(\"DELETE FROM Table WHERE Id \u003c @DeleteParameter\", new {DeleteParameter = 3}) ($)Command is a variable of type NonQueryCommand   Connection Details ($)ConnectionDetails, with value {\"ConnectionType\": ConnectionType.SQLServer, \"ConnectionString\": \"Server=myServerAddress;Database=myDataBase;Trusted_Connection=True;\"} ($)ConnectionDetails is a variable of type ConnectionDetails   Close Connection ($)CloseConnection, with value true ($)CloseConnection is a variable of type Boolean   Result ($)Result, with no value ($)Result will be set to the type dynamic    Result Deleting all rows that have an Id less than 3 in Table using a NonQueryCommand results in the variable ($)Result being updated to the following:\n2 This indicates that 2 rows have been deleted in Table, with Table being updated to:\n   Id FirstColumn SecondColumn     3 \"FirstColumn3\" \"SecondColumn3\"    Note that using a Parameterised Command helps prevent against SQL Injection, for more information please see Parameterised Commands. For an example of a non parameterised command please see Executing Multiple Commands (Unsafe)\n Using Functions This example will select the maximum Id value from a connected SQL Server data source, saving the value of the function to the Result.\nA QueryCommand is used throughout this example to select the maximum Id value from the data source, however, both an AnyCommand or AnyCommands could also be used to the same effect.\nThe data source contains a Table with the following rows and columns before the command is executed:\n   Id FirstColumn SecondColumn     1 \"FirstColumn1\" \"SecondColumn1\"   2 \"FirstColumn2\" \"SecondColumn2\"   3 \"FirstColumn3\" \"SecondColumn3\"    Properties    Property Value Notes     Command ($)Command, with value {\"CommandText\": \"SELECT Max(Id) FROM Table\", \"Parameters\": null}\nIn this example ($)Command has been set using the following Expression:\nnew QueryCommand(\"SELECT Max(Id) FROM Table\", null) ($)Command is a variable of type QueryCommand   Connection Details ($)ConnectionDetails, with value {\"ConnectionType\": ConnectionType.SQLServer, \"ConnectionString\": \"Server=myServerAddress;Database=myDataBase;Trusted_Connection=True;\"} ($)ConnectionDetails is a variable of type ConnectionDetails   Close Connection ($)CloseConnection, with value true ($)CloseConnection is a variable of type Boolean   Result ($)Result, with no value ($)Result will be set to the type dynamic    Result Selecting the maximum Id value from Table using a QueryCommand results in the variable ($)Result being updated to the following:\n[ { \"\": 3 } ] Note that the AS keyword can be used to give aliases to results, for example the CommandText \"SELECT Max(Id) AS MaxId FROM Table;\" would have resulted in the variable ($)Result being updated to [ { \"MaxId\": 3 } ]; the AS keyword also allows for Using Multiple Functions.\n Using Multiple Functions This example will select the maximum Id value as MaxId and the minimum Id value as MinId from a connected SQL Server data source, saving the values of the functions to the Result.\nA QueryCommand is used throughout this example to select the maximum Id value as MaxId and the minimum Id value as MinId from the data source, however, both an AnyCommand or AnyCommands could also be used to the same effect.\nThe data source contains a Table with the following rows and columns before the command is executed:\n   Id FirstColumn SecondColumn     1 \"FirstColumn1\" \"SecondColumn1\"   2 \"FirstColumn2\" \"SecondColumn2\"   3 \"FirstColumn3\" \"SecondColumn3\"    Properties    Property Value Notes     Command ($)Command, with value {\"CommandText\": \"SELECT Max(Id) AS MaxId, Min(Id) AS MinId FROM Table\", \"Parameters\": null}\nIn this example ($)Command has been set using the following Expression:\nnew QueryCommand(\"SELECT Max(Id) AS MaxId, Min(Id) AS MinId FROM Table\", null) ($)Command is a variable of type QueryCommand   Connection Details ($)ConnectionDetails, with value {\"ConnectionType\": ConnectionType.SQLServer, \"ConnectionString\": \"Server=myServerAddress;Database=myDataBase;Trusted_Connection=True;\"} ($)ConnectionDetails is a variable of type ConnectionDetails   Close Connection ($)CloseConnection, with value true ($)CloseConnection is a variable of type Boolean   Result ($)Result, with no value ($)Result will be set to the type dynamic    Result Selecting the maximum Id value as MaxId and the minimum Id value as MinId from Table using a QueryCommand results in the variable ($)Result being updated to the following:\n[ { \"MaxId\": 3, \"MinId\": 1 } ]  Executing Multiple Commands (Safe) This example will select, insert, update and delete from a connected SQL Server data source, using a parameterised command. The result of each command will be saved to the result.\nAn AnyCommands is used throughout this example, as it is the only type of Command that allows you to execute and return the results of multiple commands.\nThe data source contains a Table with the following rows and columns before the command is executed:\n   Id FirstColumn SecondColumn     1 \"FirstColumn1\" \"SecondColumn1\"   2 \"FirstColumn2\" \"SecondColumn2\"   3 \"FirstColumn3\" \"SecondColumn3\"    Properties    Property Value Notes     Command ($)Command, with value {\"CommandText\": \"SELECT * FROM Table WHERE Id \u003c @SelectParameter; INSERT INTO Table (FirstColumn, SecondColumn) VALUES (@InsertParameter1, @InsertParameter2); UPDATE Table SET FirstColumn = \\\"Updated\\\" WHERE Id \u003c @UpdateParameter; DELETE FROM Table WHERE Id \u003c @DeleteParameter; SELECT * FROM Table\", \"Parameters\": { \"SelectParameter\": 3, InsertParameter1 = \\\"FirstColumn4\\\", InsertParameter2 = \\\"SecondColumn4\\\", \"UpdateParameter\": 3, \"DeleteParameter\": 3 }}\nIn this example ($)Command has been set using the following Expression:\nnew AnyCommands(\"SELECT * FROM Table WHERE Id \u003c @SelectParameter; INSERT INTO Table (FirstColumn, SecondColumn) VALUES (@InsertParameter1, @InsertParameter2); UPDATE Table SET FirstColumn = \\\"Updated\\\" WHERE Id \u003c @UpdateParameter; DELETE FROM Table WHERE Id \u003c @DeleteParameter; SELECT * FROM Table\", new {SelectParameter = 3, InsertParameter1 = \"FirstColumn4\", InsertParameter2 = \"SecondColumn4\", UpdateParameter = 3, DeleteParameter = 3}) ($)Command is a variable of type AnyCommands   Connection Details ($)ConnectionDetails, with value {\"ConnectionType\": ConnectionType.SQLServer, \"ConnectionString\": \"Server=myServerAddress;Database=myDataBase;Trusted_Connection=True;\"} ($)ConnectionDetails is a variable of type ConnectionDetails   Close Connection ($)CloseConnection, with value true ($)CloseConnection is a variable of type Boolean   Result ($)Result, with no value ($)Result will be set to the type dynamic    Result Running the AnyCommands results in the variable ($)Result being updated to the following:\n[ [ { \"Id\": 1, \"FirstColumn\": \"FirstColumn1\", \"SecondColumn\": \"SecondColumn1\" }, { \"Id\": 2, \"FirstColumn\": \"FirstColumn2\", \"SecondColumn\": \"SecondColumn2\" } ], 1, 2, 2, [ { \"Id\": 3, \"FirstColumn\": \"FirstColumn3\", \"SecondColumn\": \"SecondColumn3\" }, { \"Id\": 4, \"FirstColumn\": \"FirstColumn4\", \"SecondColumn\": \"SecondColumn4\" } ] ]  The first item of ($)Result represents the rows selected by the first select statement (SELECT * FROM Table WHERE Id \u003c @SelectParameter). The second item of ($)Result indicates that 1 row has been inserted into Table (INSERT INTO Table (FirstColumn, SecondColumn) VALUES (@InsertParameter1, @InsertParameter2)). The third item of ($)Result indicates that 2 rows have been updated in Table (UPDATE Table SET FirstColumn = \\\"Updated\\\" WHERE Id \u003c @UpdateParameter). The fourth item of ($)Result indicates that 2 rows have been deleted in Table (DELETE FROM Table WHERE Id \u003c @DeleteParameter). The fifth item of ($)Result represents the rows selected by the second select statement (SELECT * FROM Table).  Table has been updated to:\n   Id FirstColumn SecondColumn     3 \"FirstColumn3\" \"SecondColumn3\"   4 \"FirstColumn4\" \"SecondColumn4\"    Note that using a Parameterised Command helps prevent against SQL Injection, for more information please see Parameterised Commands. For an example of a non parameterised command please see Executing Multiple Commands (Unsafe)\n Executing Multiple Commands (Unsafe) This example will select, insert, update and delete from a connected SQL Server data source, using String Interpolation instead of parameters. The result of each command will be saved to the result.\nWarning\rThis example inserts data directly into the Command instead of using parameters. This means the SQL in this example is susceptible to SQL Injection and it is advised to use parameters to insert data into a command instead.\nPlease see Executing Multiple Commands (Safe) for an example of a Parameterised Command.\n\rAn AnyCommands is used throughout this example, as it is the only type of Command that allows you to execute and return the results of multiple commands.\nThe data source contains a Table with the following rows and columns before the command is executed:\n   Id FirstColumn SecondColumn     1 \"FirstColumn1\" \"SecondColumn1\"   2 \"FirstColumn2\" \"SecondColumn2\"   3 \"FirstColumn3\" \"SecondColumn3\"    In this example assume the following variables have been set before the command has been executed:\n ($)SelectParameter with the value 3 ($)InsertParameter1 with the value \"FirstColumn4\" ($)InsertParameter2 with the value \"SecondColumn4\" ($)UpdateParameter with the value 3 ($)DeleteParameter with the value 3  Properties    Property Value Notes     Command ($)Command, with value {\"CommandText\": \"SELECT * FROM Table WHERE Id \u003c 3; INSERT INTO Table (FirstColumn, SecondColumn) VALUES (\\\"FirstColumn1\\\", \\\"SecondColumn2\\\"); UPDATE Table SET FirstColumn = \\\"Updated\\\" WHERE Id \u003c 3; DELETE FROM Table WHERE Id \u003c 3; SELECT * FROM Table\", \"Parameters\": null}\nIn this example ($)Command has been set using the following Expression:\nnew AnyCommands($\"SELECT * FROM Table WHERE Id \u003c {($)SelectParameter}; INSERT INTO Table (FirstColumn, SecondColumn) VALUES ({($)InsertParameter1}, {($)InsertParameter2}); UPDATE Table SET FirstColumn = \\\"Updated\\\" WHERE Id \u003c {($)UpdateParameter}; DELETE FROM Table WHERE Id \u003c {($)DeleteParameter}; SELECT * FROM Table\", null) ($)Command is a variable of type AnyCommands   Connection Details ($)ConnectionDetails, with value {\"ConnectionType\": ConnectionType.SQLServer, \"ConnectionString\": \"Server=myServerAddress;Database=myDataBase;Trusted_Connection=True;\"} ($)ConnectionDetails is a variable of type ConnectionDetails   Close Connection ($)CloseConnection, with value true ($)CloseConnection is a variable of type Boolean   Result ($)Result, with no value ($)Result will be set to the type dynamic    Result Running the AnyCommands results in the variable ($)Result being updated to the following:\n[ [ { \"Id\": 1, \"FirstColumn\": \"FirstColumn1\", \"SecondColumn\": \"SecondColumn1\" }, { \"Id\": 2, \"FirstColumn\": \"FirstColumn2\", \"SecondColumn\": \"SecondColumn2\" } ], 1, 2, 2, [ { \"Id\": 3, \"FirstColumn\": \"FirstColumn3\", \"SecondColumn\": \"SecondColumn3\" }, { \"Id\": 4, \"FirstColumn\": \"FirstColumn4\", \"SecondColumn\": \"SecondColumn4\" } ] ]  The first item of ($)Result represents the rows selected by the first select statement (SELECT * FROM Table WHERE Id \u003c @SelectParameter). The second item of ($)Result indicates that 1 row has been inserted into Table (INSERT INTO Table (FirstColumn, SecondColumn) VALUES (@InsertParameter1, @InsertParameter2)). The third item of ($)Result indicates that 2 rows have been updated in Table (UPDATE Table SET FirstColumn = \\\"Updated\\\" WHERE Id \u003c @UpdateParameter). The fourth item of ($)Result indicates that 2 rows have been deleted in Table (DELETE FROM Table WHERE Id \u003c @DeleteParameter). The fifth item of ($)Result represents the rows selected by the second select statement (SELECT * FROM Table).  Table has been updated to:\n   Id FirstColumn SecondColumn     3 \"FirstColumn3\" \"SecondColumn3\"   4 \"FirstColumn4\" \"SecondColumn4\"    Note that using a Parameterised Command helps prevent against SQL Injection, for more information please see Parameterised Commands.\n Properties Command The Command executed on the connected data source. There are multiple Command Types that can be used, each with a different purpose:\n AnyCommand: Parses a single statement provided in the commandText, determining how the statement should be executed against the data source. If the commandText is a Query Statement the rows retrieved from the data source will be returned, otherwise if the commandText is a Non Query Statement the number of rows affected will be returned. AnyCommands: Parses single or multiple statements provided in the commandText, determining how each statement should be executed against the data source. If a Query Statement is executed rows retrieved from the data source are added as an entry of the result, If a Non Query Statement is executed the number of rows affected is added as an entry of the result. QueryCommand: Executes the given commandText as a Query Statement, returning the rows retrieved from the data source. NonQueryCommand: Executes the given commandText as a Non Query Statement, returning the number of rows affected from the data source.           Data Type ICommand   Property Type Input   Default Value ($)Command with value null    Connection Details The Connection Details object that includes all of the information required to connect to a data source, including:\n Connection Type - shows a selection of supported data sources to pick from, please see Working with Data Sources for more information. Connection String - must be provided in order to connect to a data source. The Connection String is formatted differently depending on the type of data source that is being connected to, please see Working with Data Sources for more information.  Note it is recommended to use a Variable for Connection Details when it will be used across multiple Execute Command blocks, as using a variable will allow for reuse of the same connection. Using a Literal to set the Connection Details will cause the connection to only be used once.\n         Data Type ConnectionDetails   Property Type Input   Default Value ($)ConnectionDetails with value null    Close Connection Close Connection can be specified to choose whether the connection to the data source is closed or is kept open for use on subsequent Execute Command blocks, this defaults to false if left blank, please see Closing Connections for more information.\n         Data Type Boolean   Property Type Input   Default Value ($)CloseConnection with value false    Result The object returned from the data source.\nDepending on the type of Command, the data returned within the Result will vary. Please see Command Types for more information on what data will be returned by each type.\n         Data Type dynamic   Property Type Output   Default Value ($)Result with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     PropertyNullException Thrown when the Command is null.    Thrown when the commandText within the Command is null.    Thrown when the Connection Details is null.    Thrown when the connectionString within the Connection Details is null.   PropertyEmptyException Thrown when the commandText within the Command is empty.    Thrown when the connectionString within the Connection Details is empty.   ArgumentException Thrown when the connectionType within the Connection Details is not one of the specified ConnectionType types (e.g. (ConnectionType)100).   InvalidConnectionStringException Thrown when an invalid connection string has been supplied (e.g. The connection string contains an invalid argument \"NotAnArgument = False\").    Thrown when a required connection string argument has not been supplied (e.g. The server requires encryption and the connection string contains \"Encrypt=False\").   CommandException Thrown when the data source was not found or was not accessible.    Thrown when an error occurs whilst trying to open a new connection.    Thrown when a connection is successfully established but an error occurred during the login process.    Thrown when the Command contains syntax errors. The error will contain a nested SqlException with a corresponding SqlException Error Code.    Thrown when the Command is invalid for the table specified.    Thrown when the Command references a non-existent stored procedure.    Thrown when parameters derives from Array or IEnumerable when a Query Statement is executed.    Thrown when an AnyCommand contains multiple statements.    Remarks Command Types There are multiple types of Command that can be used, each with a different purpose:\nAnyCommand An AnyCommand parses a single statement provided in the commandText, determining how the statement should be executed against the data source. If the commandText is a Query Statement the rows retrieved from the data source will be returned, otherwise if the commandText is a Non Query Statement the number of rows affected will be returned.\nFor a Query Statement (e.g. select and execute):\n   Result will be set to when     List\u003cStructure\u003e with a single item Single item is returned   List\u003cStructure\u003e with many items Many items are returned   List\u003cStructure\u003e with no items No items are returned    For a Non Query Statement (e.g. insert, update, delete, etc)\n   Result will be set to when      Int32 with a value of 1 Single row is affected   Int32 with a value greater than 1 Many rows are affected   Int32 with a value of 0 No rows are affected    If multiple statements are provided in CommandText, the block will throw a CommandException as this type can only run single statements.\nIf performance is a key consideration it is recommended to use a QueryCommand or NonQueryCommand instead of AnyCommand as they do not parse the commandText.\nAnyCommands An AnyCommands parses single or multiple statements provided in the commandText, determining how each statement should be executed against the data source. If a Query Statement is executed rows retrieved from the data source are added as an entry of the result, If a Non Query Statement is executed the number of rows affected is added as an entry of the result.\nFor each Query Statement (e.g. select and execute):\n   Result will have the following entry added when     List\u003cStructure\u003e with a single item Single item is returned   List\u003cStructure\u003e with many items Many items are returned   List\u003cStructure\u003e with no items No items are returned    For each Non Query Statement (e.g. insert, update, delete, etc)\n   Result will have the following entry added when      Int32 with a value of 1 Single row is affected   Int32 with a value greater than 1 Many rows are affected   Int32 with a value of 0 No rows are affected    If performance is a key consideration it is recommended to use a QueryCommand or NonQueryCommand instead of AnyCommands as they do not parse the commandText.\nNote that the AnyCommands should not be used for commands that have dependency between their statements (e.g. Cursors and Variables). Please see Complex Commands for more information on how to deal with these.\nQueryCommand A QueryCommand executes the given commandText as a Query Statement, returning the rows retrieved from the data source. If the commandText contains multiple select statements, only the results of the first Query Statement will be returned.\nFor a Query Statement (e.g. select):\n   Result will be set to when     List\u003cStructure\u003e with a single item Single item is returned   List\u003cStructure\u003e with many items Many items are returned   List\u003cStructure\u003e with no items No items are returned    For a Non Query Statement (e.g. insert, update, delete, etc)\n   Result will be set to  when     null always, as Non Query Statements do not return data    Note use a QueryCommand for commands that have dependency between their statements (e.g. Cursors and Variables) and return data from the data source. Please see Complex Commands for more information.\nNonQueryCommand A NonQueryCommand executes the given commandText as a Non Query Statement, returning the number of rows affected from the data source. If the command contains multiple statements, the sum of all the results will be returned.\nFor a Query Statement (e.g. select):\n   Result will be set to  when     Int32 with a value of -1 always, as Query Statements do not return data    For a Non Query Statement (e.g. insert, update, delete, etc)\n   Result will be set to when     Int32 with a value of 1 Single row is affected   Int32 with a value greater than 1 Many rows are affected   Int32 with a value of 0 No rows are affected    Note use a NonQueryCommand for commands that have dependency between their statements (e.g. Cursors and Variables) and return the number of rows affected. Please see Complex Commands for more information.\nStatement Types There are two categories of statements Query and Non Query.\nQuery Statements Query Statements are used to retrieve data from a data source, for example selecting all rows from a table in a database, Query Statements return the data selected by the Statement as a List\u003cStructure\u003e when used in an AnyCommand, an AnyCommands, or a QueryCommand. If a Query Statement is used in a NonQueryCommand -1 will be returned as Query Statements do not affect rows.\nExamples of Query Statements can be found here:\n Selecting Rows Using Functions Using Multiple Functions Executing Multiple Commands (Safe) Executing Multiple Commands (Unsafe)  A Query Statement can use any object as a parameter. Objects that derive from Array or IEnumerable can only be used for clauses that accept list values (e.g. IN, ANY, ALL), if they are used in other clauses the block will throw a CommandException.\nNon Query Statements Non Query Statements are used to manipulate the data within a data source, for example deleting all rows from a table in a database, Non Query Statements return the number of rows affected by the Statement as an Int32 value when used in an AnyCommand, an AnyCommands, or a NonQueryCommand. If a Non Query Statement is used in a QueryCommand null will be returned as Non Query Statements do not return data.\nExamples of Non Query Statements can be found here:\n Inserting Rows Updating Rows Deleting Rows Executing Multiple Commands (Safe) Executing Multiple Commands (Unsafe)  A Non Query Statement can use any object as a parameter. If an object that derives from Array or IEnumerable is used, the Non Query Statement will be executed for each item in the Array or IEnumerable and the sum of all the results will be returned.\nParameterised Commands It is recommended to always use parameterised commands as they prevent SQL Injection attacks by ensuring the parameters are sanitised before the Command is executed.\nThe @ symbol denotes a parameter within the CommandText (e.g. \"SELECT * FROM Table WHERE Name = @Parameter\"). An example of using parameters can be found in Executing Multiple Commands (Safe), whereas, an example of inserting variables into a statement without parameters can be found in Executing Multiple Commands (Unsafe)\nQuery Statements can use any object as a parameter. Objects that derive from Array or IEnumerable can only be used for clauses that accept list values (e.g. IN, ANY, ALL), if they are used in other clauses the block will throw a CommandException.\nNon Query Statements can use any object as a parameter. If an object that derives from Array or IEnumerable is used, the Non Query Statement will be executed for each item in the Array or IEnumerable and the sum of all the results will be returned.\nFor both Query Statements and Non Query Statements, an SqlException is thrown if a parameter is missing from the Command and the CommandText contains a parameter (e.g. {\"CommandText\": \"SELECT * FROM Table WHERE Name = @Parameter\", \"Parmeters\": {\"IncorrectParameter\": 0}}).\nComplex Commands Complex commands (e.g. Cursors and Variables) that contain dependency between their statements cannot be used with AnyCommands, as the parsing performed by the block will cause each statement of CommandText to be run individually instead of running the CommandText as a whole.\nFor statements with this type of dependency use either QueryCommand or NonQueryCommand, depending on whether data from the data source or the number of rows affected is returned.\nConnection Strings A connection string must be provided within the Connection Details in order to connect to a data source. The connection string is formatted differently depending on the type of data source, please see Working with Data Sources for more information.\nPlease see Working with Data Sources for a list of supported data sources and how to construct valid connection strings for them.\nOpening Connections The Execute Command block automatically handles creating and opening connections for the specified Connection Details using the following rules:\n If a connection does not exist, a new connection will be created, opened and used when the block runs. If a connection already exists but is closed, the connection will be opened and used when the block runs. If a connection already exists and is open, the connection will used the block runs.  If a Variable is used to pass in the Connection Details it can be used to keep the connection alive across multiple Execute Command blocks as long as Close Connection is set to false. Keeping the connection open helps increase the performance of the block due to the subsequent blocks not having to spend resources creating and opening connections for each execution.\nIf a Literal or an Expression is used to create the Connection Details a new connection will always be made when the Execute Command block runs and if Close Connection is set to false the connection will be closed automatically at some point after the block finishes and before the flow ends.\nFor information on how to explicitly close a connection, please see Closing Connections.\nClosing Connections Connections can be explicitly closed by setting Close Connection to true. This causes the connection to be closed after the Command has been executed.\nIf a Variable is used to pass in the Connection Details and Close Connection is set to false the connection will be closed when the Variable goes out of scope or the flow ends, whichever happens first. For more information about variables and scope, please see Working with Variables.\nIf a Literal or an Expression is used to create the Connection Details and Close Connection is set to false the connection will be closed automatically at some point after the Execute Command block finishes and before the flow ends.\nFor information on how to open a connection, please see Opening Connections.\nWhy does the Result property return a dynamic data type? The decision for the Result to return a dynamic data type rather than a specific type, was to avoid users having to cast the Result to its correct type to be able to use all of its properties.\nAs a result, any issues with using the Result (i.e. trying to access a property it does not have) will not be reported as messages when trying to debug the flow; they will only be discovered when the flow execution reaches the part of the flow with the issue.\nIf it is desirable to have any issues reported as messages when trying to debug the flow, the user can cast the Result to its correct type.\nKnown Limitations When using a Parameterised Command to execute a stored procedure, it is not possible to write back to output parameters.\n","categories":"","description":"Connects to a specific data source and executes a Command, returning any object from the Command's result.","excerpt":"Connects to a specific data source and executes a Command, returning any object from the Command's result.","ref":"/docs/reference/blocks/data/execute-command/execute-command-block/","tags":"","title":"Execute Command"},{"body":"","categories":"","description":"This page provides a guide on referencing variable in the Expression Editor.","excerpt":"This page provides a guide on referencing variable in the Expression Editor.","ref":"/docs/reference/concepts/fundamentals/variables/referencing-variables/expression-editor/","tags":"","title":"Expression Editor"},{"body":"File \u0026 Folder Attributes Overview TODO: Overview/summary\nTODO: Supported file and folder attributes and examples of using them\nhttps://docs.microsoft.com/en-us/dotnet/api/system.io.fileattributes?view=net-5.0 Other?\nBlocks which use File and Folder Attributes ","categories":"","description":"This page describes the concept of file and folder attributes.","excerpt":"This page describes the concept of file and folder attributes.","ref":"/docs/reference/concepts/file-and-folder-attributes/","tags":"","title":"File \u0026 Folder Attributes"},{"body":"File \u0026 Folder Paths Overview TODO: Overview/summary\nTODO: Supported file and folder path formats and examples of using them TODO: How we determine is a path is a folder or a file path\\ = folder (path with terminating \\ or /) path = folder (path not ending in extension) path.extension = file (path ending in extension) path.anotherpartofpath\\ = folder (as it ends in a \\ or /) http://vd-tfs1.pivetal.com:8080/tfs/Product%20Development/Cortex/Team%201/_git/Cortex.Blocks?path=%2FCortex.Blocks%2FAcceptanceCriteria%2FFilesAndFolders.cs\u0026version=GBrefactor%2F51984-missing-file-ac-unit-tests\nhttps://docs.microsoft.com/en-us/dotnet/standard/io/file-path-formats https://docs.microsoft.com/en-us/windows/win32/fileio/naming-a-file https://docs.microsoft.com/en-us/windows/wsl/filesystems https://docs.microsoft.com/en-us/dotnet/standard/io/ https://docs.microsoft.com/en-us/dotnet/api/system.io.file?view=net-5.0\nTODO: Valid folder names\nBlocks which use File and Folder Paths ","categories":"","description":"This page describes the concept of file and folder paths.","excerpt":"This page describes the concept of file and folder paths.","ref":"/docs/reference/concepts/file-and-folder-paths/","tags":"","title":"File \u0026 Folder Paths"},{"body":"","categories":"","description":"Blocks related to working with Files and Folders.","excerpt":"Blocks related to working with Files and Folders.","ref":"/docs/reference/blocks/files-and-folders/","tags":"","title":"Files \u0026 Folders"},{"body":"","categories":"","description":"Exceptions related to Files and Folders","excerpt":"Exceptions related to Files and Folders","ref":"/docs/reference/exceptions/files-and-folders/","tags":"","title":"Files \u0026 Folders"},{"body":"\r\rFind And Remove All Text (Cortex.Blocks.Text.FindAndRemoveText.FindAndRemoveAllTextBlock)\nDescription Finds and removes all occurrences of Text To Remove from a given Text.\nSearch Options can be specified to choose whether to use a ContainsText, PatternMatching or Regex search to find the Text To Remove.\nExamples Remove all occurrences of Text To Remove (Ordinal) This example will find and remove all occurrences of \"The\" from \"The quick brown fox jumps over the lazy dog\".\nIt performs a case-sensitive, culture-insensitive comparison of text.\nProperties    Property Value Notes     Text ($)Text, with value \"The quick brown fox jumps over the lazy dog\" ($)Text is a variable of type String   Text To Remove ($)TextToRemove, with value \"The\" ($)TextToRemove is a variable of type String   Search Options ($)SearchOptions, with value SearchOptions.ContainsText ($)SearchOptions is a variable of type SearchOptions   Comparison Type ($)ComparisonType, with value StringComparison.Ordinal ($)ComparisonType is a variable of type StringComparison    Result As this example is performing a case-sensitive, culture-insensitive comparison of text, \"The quick brown fox jumps over the lazy dog\" only contains the text \"The\" once; \"the\" has a different case so does not match. Therefore, the variable ($)Text will be updated to the following:\n\" quick brown fox jumps over the lazy dog\"  Remove all occurrences of Text To Remove (Ordinal Ignore Case) This example will find and remove all occurrences of \"The\" from \"The quick brown fox jumps over the lazy dog\".\nIt performs a case-insensitive, culture-insensitive comparison of text.\nProperties    Property Value Notes     Text ($)Text, with value \"The quick brown fox jumps over the lazy dog\" ($)Text is a variable of type String   Text To Remove ($)TextToRemove, with value \"The\" ($)TextToRemove is a variable of type String   Search Options ($)SearchOptions, with value SearchOptions.ContainsText ($)SearchOptions is a variable of type SearchOptions   Comparison Type ($)ComparisonType, with value StringComparison.OrdinalIgnoreCase ($)ComparisonType is a variable of type StringComparison    Result As this example is performing a case-insensitive, culture-insensitive comparison of text, \"The quick brown fox jumps over the lazy dog\" contains the text \"The\" twice; the first occurrence is \"The\" and the second occurrence is \"the\". Therefore, the variable ($)Text will be updated to the following:\n\" quick brown fox jumps over lazy dog\"  Remove all occurrences that match the pattern in Text To Remove This example will find and remove all occurrences of text that match the pattern \"?he\" from \"The quick brown fox jumps over the lazy dog\".\nIt performs a case-sensitive, culture-insensitive comparison of text.\nProperties    Property Value Notes     Text ($)Text, with value \"The quick brown fox jumps over the lazy dog\" ($)Text is a variable of type String   Text To Remove ($)TextToRemove, with value \"?he\" ($)TextToRemove is a variable of type String   Search Options ($)SearchOptions, with value SearchOptions.PatternMatching ($)SearchOptions is a variable of type SearchOptions   Comparison Type ($)ComparisonType, with value StringComparison.Ordinal ($)ComparisonType is a variable of type StringComparison    Result \"The quick brown fox jumps over the lazy dog\" contains \"The\" and \"the\" that matches the pattern \"?he\". Therefore, the variable ($)Text will be updated to the following:\n\" quick brown fox jumps over lazy dog\"  Remove all occurrences that match the regex in Text To Remove This example will find and remove all occurrences of text that match the regex \"^The\" from \"The quick brown fox jumps over the lazy dog\".\nIt performs a case-sensitive, culture-insensitive comparison of text.\nProperties    Property Value Notes     Text ($)Text, with value \"The quick brown fox jumps over the lazy dog\" ($)Text is a variable of type String   Text To Remove ($)TextToRemove, with value \"^The\" ($)TextToRemove is a variable of type String   Search Options ($)SearchOptions, with value SearchOptions.Regex ($)SearchOptions is a variable of type SearchOptions   Comparison Type ($)ComparisonType, with value StringComparison.Ordinal ($)ComparisonType is a variable of type StringComparison    Result \"The quick brown fox jumps over the lazy dog\" contains \"The\" at the start of the sentence that matches the regex \"^The\". Therefore, the variable ($)Text will be updated to the following:\n\" quick brown fox jumps over the lazy dog\"  Properties Text The Text to find and remove all occurrences of Text To Remove from.\n         Data Type String   Property Type InputOutput   Default Value ($)Text with value \"\"    Text To Remove The Text To Remove all occurrences of, from Text.\n         Data Type String   Property Type Input   Default Value ($)TextToRemove with value \"\"    Search Options Search Options can be specified to choose whether Text To Remove should be interpreted as a ContainsText, PatternMatching or Regex search:\n SearchOptions.ContainsText matches text exactly; as long as the Text contains the text specified in Text To Remove it will be considered a match. SearchOptions.PatternMatching allows wildcard text matching using Pattern Matching Syntax:  * wildcard character can be used to match 0 or more characters. ? wildcard character can be used to match 0 or 1 character. All other characters are treated as a literal character.   SearchOptions.Regex allows regex text matching using .Net Regex Syntax.  Please note that with SearchOptions.ContainsText overlapping matches are detected (e.g. searching for \"aa\" in \"aaa\" matches \"aa\" at index 0 and \"aa\" at index 1). With SearchOptions.Regex only \"aa\" at index 0 will be matched.\n         Data Type SearchOptions   Property Type Input   Default Value ($)SearchOptions with value SearchOptions.ContainsText    Comparison Type The Comparison Type specifying the rules used to match occurrences of Text To Remove in Text.\nFor information about the supported values for the Comparison Type property and examples of how it is determined whether two pieces of text match, please see Text Equality.\n         Data Type StringComparison   Property Type Input   Default Value ($)ComparisonType with value StringComparison.Ordinal    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     ArgumentException Thrown when Comparison Type is not one of the specified StringComparison types (e.g. (StringComparison)10).    Thrown when Search Options is not one of the specified SearchOptions types (e.g. (SearchOptions)10).   RegexMatchTimeoutException Thrown when Search Options is either SearchOptions.Regex or SearchOptions.PatternMatching and the execution time of the search exceeds 30 seconds.   RegexParsingFailedException Thrown when Search Options is SearchOptions.Regex and Text To Remove is not a valid regex (e.g. ().    Remarks Comparison Types For information about the supported values for the Comparison Type property and examples of how it is determined whether two pieces of text match, please see Text Equality.\nNull or empty Text If Text is null or empty (i.e. \"\") there is nothing to remove from, so no operation is performed.\nNull or empty Text To Remove If Text To Remove is null or empty (i.e. \"\") there is nothing to remove, so no operation is performed.\nText To Remove is not present If Text To Remove is not present there is nothing to remove, so no operation is performed.\nImmutable String data type The String data type used to represent Text is immutable, which means it is read-only and cannot be changed once created.\nTo overcome this, this block creates a new String with all occurrences of Text To Remove removed and re-assigns it to the variable specified in the Text property.\nKnown Limitations If Search Options is set to SearchOptions.Regex or SearchOptions.PatternMatching and Comparison Type is set to StringComparison.CurrentCulture, some characters such as æ that is equivalent to ae may not evaluate as equal.\n","categories":"","description":"Finds and removes all occurrences of text from a given text.","excerpt":"Finds and removes all occurrences of text from a given text.","ref":"/docs/reference/blocks/text/find-and-remove-text/find-and-remove-all-text-block/","tags":"","title":"Find And Remove All Text"},{"body":"","categories":"","description":"Find text in another text, and remove it.","excerpt":"Find text in another text, and remove it.","ref":"/docs/reference/blocks/text/find-and-remove-text/","tags":"","title":"Find And Remove Text"},{"body":"\r\rFind And Remove Text (Cortex.Blocks.Text.FindAndRemoveText.FindAndRemoveTextBlock)\nDescription Finds and removes the specified Occurrence of Text To Remove from a given Text.\nSearch Options can be specified to choose whether to use a ContainsText, PatternMatching or Regex search to find the Text To Remove.\nExamples Remove the first Occurrence of Text To Remove (Ordinal) This example will find and remove the first occurrence of \"The\" from \"The quick brown fox jumps over the lazy dog\".\nIt performs a case-sensitive, culture-insensitive comparison of text.\nProperties    Property Value Notes     Text ($)Text, with value \"The quick brown fox jumps over the lazy dog\" ($)Text is a variable of type String   Text To Remove ($)TextToRemove, with value \"The\" ($)TextToRemove is a variable of type String   Occurrence ($)Occurrence, with value 1 ($)Occurrence is a variable of type Int32   Search Options ($)SearchOptions, with value SearchOptions.ContainsText ($)SearchOptions is a variable of type SearchOptions   Comparison Type ($)ComparisonType, with value StringComparison.Ordinal ($)ComparisonType is a variable of type StringComparison    Result An Occurrence of 1 means find and remove the first occurrence; 2 means second etc.\nAs this example is performing a case-sensitive, culture-insensitive comparison of text, \"The quick brown fox jumps over the lazy dog\" only contains the text \"The\" once; \"the\" has a different case so does not match. Therefore, the variable ($)Text will be updated to the following:\n\" quick brown fox jumps over the lazy dog\"  Remove the last Occurrence of Text To Remove (Ordinal Ignore Case) This example will find and remove the last occurrence of \"The\" from \"The quick brown fox jumps over the lazy dog\".\nIt performs a case-insensitive, culture-insensitive comparison of text.\nProperties    Property Value Notes     Text ($)Text, with value \"The quick brown fox jumps over the lazy dog\" ($)Text is a variable of type String   Text To Remove ($)TextToRemove, with value \"The\" ($)TextToRemove is a variable of type String   Occurrence ($)Occurrence, with value -1 ($)Occurrence is a variable of type Int32   Search Options ($)SearchOptions, with value SearchOptions.ContainsText ($)SearchOptions is a variable of type SearchOptions   Comparison Type ($)ComparisonType, with value StringComparison.OrdinalIgnoreCase ($)ComparisonType is a variable of type StringComparison    Result An Occurrence of -1, means find and remove the last occurrence; -2 means second last etc.\nAs this example is performing a case-insensitive, culture-insensitive comparison of text, \"The quick brown fox jumps over the lazy dog\" contains the text \"The\" twice; the first occurrence is \"The\" and the second and last occurrence is \"the\". Therefore, the variable ($)Text will be updated to the following:\n\"The quick brown fox jumps over lazy dog\"  Remove the first Occurrence matching the pattern in Text To Remove This example will find and remove the first occurrence of text matching the pattern \"?he\" from \"The quick brown fox jumps over the lazy dog\".\nIt performs a case-sensitive, culture-insensitive comparison of text.\nProperties    Property Value Notes     Text ($)Text, with value \"The quick brown fox jumps over the lazy dog\" ($)Text is a variable of type String   Text To Remove ($)TextToRemove, with value \"?he\" ($)TextToRemove is a variable of type String   Occurrence ($)Occurrence, with value 1 ($)Occurrence is a variable of type Int32   Search Options ($)SearchOptions, with value SearchOptions.PatternMatching ($)SearchOptions is a variable of type SearchOptions   Comparison Type ($)ComparisonType, with value StringComparison.Ordinal ($)ComparisonType is a variable of type StringComparison    Result An Occurrence of 1 means find and remove the first occurrence; 2 means second etc.\n\"The quick brown fox jumps over the lazy dog\" contains two occurrences that match the pattern \"?he\"; the first occurrence is \"The\" and the second occurrence is \"the\". Therefore, the variable ($)Text will be updated to the following:\n\" quick brown fox jumps over the lazy dog\"  Remove the last Occurrence matching the regex in Text To Remove This example will find and remove the last occurrence of text matching the regex \"(fox|dog)\" from \"The quick brown fox jumps over the lazy dog\".\nIt performs a case-sensitive, culture-insensitive comparison of text.\nProperties    Property Value Notes     Text ($)Text, with value \"The quick brown fox jumps over the lazy dog\" ($)Text is a variable of type String   Text To Remove ($)TextToRemove, with value \"(fox|dog)\" ($)TextToRemove is a variable of type String   Occurrence ($)Occurrence, with value -1 ($)Occurrence is a variable of type Int32   Search Options ($)SearchOptions, with value SearchOptions.Regex ($)SearchOptions is a variable of type SearchOptions   Comparison Type ($)ComparisonType, with value StringComparison.Ordinal ($)ComparisonType is a variable of type StringComparison    Result An Occurrence of -1, means find and remove the last occurrence; -2 means second last etc.\n\"The quick brown fox jumps over the lazy dog\" contains two occurrences that match the regex \"(fox|dog)\"; the first occurrence is \"fox\" and the second and last occurrence is \"dog\". Therefore, the variable ($)Text will be updated to the following:\n\"The quick brown fox jumps over the lazy \"  Properties Text The Text to find and remove the specified Occurrence of Text To Remove from.\n         Data Type String   Property Type InputOutput   Default Value ($)Text with value \"\"    Text To Remove The Text To Remove the specified Occurrence of, from Text.\n         Data Type String   Property Type Input   Default Value ($)TextToRemove with value \"\"    Occurrence The Occurrence of Text To Remove from Text.\nFor information about supported values for the Occurrence property and examples of how it can be used, please see Occurrences.\n         Data Type Int32   Property Type Input   Default Value ($)Occurrence with value 1    Search Options Search Options can be specified to choose whether Text To Remove should be interpreted as a ContainsText, PatternMatching or Regex search:\n SearchOptions.ContainsText matches text exactly; as long as the Text contains the text specified in Text To Remove it will be considered a match. SearchOptions.PatternMatching allows wildcard text matching using Pattern Matching Syntax:  * wildcard character can be used to match 0 or more characters. ? wildcard character can be used to match 0 or 1 character. All other characters are treated as a literal character.   SearchOptions.Regex allows regex text matching using .Net Regex Syntax.  Please note that with SearchOptions.ContainsText overlapping matches are detected (e.g. searching for \"aa\" in \"aaa\" matches \"aa\" at index 0 and \"aa\" at index 1). With SearchOptions.Regex only \"aa\" at index 0 will be matched.\n         Data Type SearchOptions   Property Type Input   Default Value ($)SearchOptions with value SearchOptions.ContainsText    Comparison Type The Comparison Type specifying the rules used to match occurrences of Text To Remove in Text.\nFor information about the supported values for the Comparison Type property and examples of how it is determined whether two pieces of text match, please see Text Equality.\n         Data Type StringComparison   Property Type Input   Default Value ($)ComparisonType with value StringComparison.Ordinal    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     ArgumentException Thrown when Comparison Type is not one of the specified StringComparison types (e.g. (StringComparison)10).    Thrown when Search Options is not one of the specified SearchOptions types (e.g. (SearchOptions)10).   RegexMatchTimeoutException Thrown when Search Options is either SearchOptions.Regex or SearchOptions.PatternMatching and the execution time of the search exceeds 30 seconds.   RegexParsingFailedException Thrown when Search Options is SearchOptions.Regex and Text To Remove is not a valid regex (e.g. ().    Remarks Occurrences For information about supported values for the Occurrence property and examples of how it can be used, please see Occurrences.\nComparison Types For information about the supported values for the Comparison Type property and examples of how it is determined whether two pieces of text match, please see Text Equality.\nNull or empty Text If Text is null or empty (i.e. \"\") there is nothing to remove from, so no operation is performed.\nNull or empty Text To Remove If Text To Remove is null or empty (i.e. \"\") there is nothing to remove, so no operation is performed.\nText To Remove or Occurrence is not present If Text To Remove or the specified Occurrence is not present, there is nothing to remove, so no operation is performed.\nImmutable String data type The String data type used to represent Text is immutable, which means it is read-only and cannot be changed once created.\nTo overcome this, this block creates a new String with the specified Occurrence of Text To Remove removed and re-assigns it to the variable specified in the Text property.\nKnown Limitations If Search Options is set to SearchOptions.Regex or SearchOptions.PatternMatching and Comparison Type is set to StringComparison.CurrentCulture, some characters such as æ that is equivalent to ae may not evaluate as equal.\n","categories":"","description":"Finds and removes the specified occurrence of text from a given text.","excerpt":"Finds and removes the specified occurrence of text from a given text.","ref":"/docs/reference/blocks/text/find-and-remove-text/find-and-remove-text-block/","tags":"","title":"Find And Remove Text"},{"body":"\r\rFind And Replace All Text (Cortex.Blocks.Text.FindAndReplaceText.FindAndReplaceAllTextBlock)\nDescription Finds and replaces all occurrences of Text To Replace with the specified Replacement Text in a given Text.\nSearch Options can be specified to choose whether to use a ContainsText, PatternMatching or Regex search to find the Text To Replace.\nExamples Replace all occurrences of Text To Replace (Ordinal) This example will find and replace all occurrences of \"The\" in \"The quick brown fox jumps over the lazy dog\" with \"a\".\nIt performs a case-sensitive, culture-insensitive comparison of text.\nProperties    Property Value Notes     Text ($)Text, with value \"The quick brown fox jumps over the lazy dog\" ($)Text is a variable of type String   Text To Replace ($)TextToReplace, with value \"The\" ($)TextToReplace is a variable of type String   Replacement Text ($)ReplacementText, with value \"a\" ($)ReplacementText is a variable of type String   Search Options ($)SearchOptions, with value SearchOptions.ContainsText ($)SearchOptions is a variable of type SearchOptions   Comparison Type ($)ComparisonType, with value StringComparison.Ordinal ($)ComparisonType is a variable of type StringComparison    Result As this example is performing a case-sensitive, culture-insensitive comparison of text, \"The quick brown fox jumps over the lazy dog\" only contains the text \"The\" once; \"the\" has a different case so does not match. Therefore, the variable ($)Text will be updated to the following:\n\"a quick brown fox jumps over the lazy dog\"  Replace all occurrences of Text To Replace (Ordinal Ignore Case) This example will find and replace all occurrences of \"The\" in \"The quick brown fox jumps over the lazy dog\" with \"a\".\nIt performs a case-insensitive, culture-insensitive comparison of text.\nProperties    Property Value Notes     Text ($)Text, with value \"The quick brown fox jumps over the lazy dog\" ($)Text is a variable of type String   Text To Replace ($)TextToReplace, with value \"The\" ($)TextToReplace is a variable of type String   Replacement Text ($)ReplacementText, with value \"a\" ($)ReplacementText is a variable of type String   Search Options ($)SearchOptions, with value SearchOptions.ContainsText ($)SearchOptions is a variable of type SearchOptions   Comparison Type ($)ComparisonType, with value StringComparison.OrdinalIgnoreCase ($)ComparisonType is a variable of type StringComparison    Result As this example is performing a case-insensitive, culture-insensitive comparison of text, \"The quick brown fox jumps over the lazy dog\" contains the text \"The\" twice; the first occurrence is \"The\" and the second occurrence is \"the\". Therefore, the variable ($)Text will be updated to the following:\n\"a quick brown fox jumps over a lazy dog\"  Replace all occurrences that match the pattern in Text To Replace This example will find and replace all occurrences of text that match the pattern \"?he\" from \"The quick brown fox jumps over the lazy dog\" with \"a\".\nIt performs a case-sensitive, culture-insensitive comparison of text.\nProperties    Property Value Notes     Text ($)Text, with value \"The quick brown fox jumps over the lazy dog\" ($)Text is a variable of type String   Text To Replace ($)TextToReplace, with value \"?he\" ($)TextToReplace is a variable of type String   Replacement Text ($)ReplacementText, with value \"a\" ($)ReplacementText is a variable of type String   Search Options ($)SearchOptions, with value SearchOptions.PatternMatching ($)SearchOptions is a variable of type SearchOptions   Comparison Type ($)ComparisonType, with value StringComparison.Ordinal ($)ComparisonType is a variable of type StringComparison    Result \"The quick brown fox jumps over the lazy dog\" contains \"The\" and \"the\" that matches the pattern \"?he\". Therefore, the variable ($)Text will be updated to the following:\n\"a quick brown fox jumps over a lazy dog\"  Replace all occurrences that match the regex in Text To Replace This example will find and replace all occurrences of text that match the regex \"^The\" from \"The quick brown fox jumps over the lazy dog\" with \"a\".\nIt performs a case-sensitive, culture-insensitive comparison of text.\nProperties    Property Value Notes     Text ($)Text, with value \"The quick brown fox jumps over the lazy dog\" ($)Text is a variable of type String   Text To Replace ($)TextToReplace, with value \"^The\" ($)TextToReplace is a variable of type String   Replacement Text ($)ReplacementText, with value \"a\" ($)ReplacementText is a variable of type String   Search Options ($)SearchOptions, with value SearchOptions.Regex ($)SearchOptions is a variable of type SearchOptions   Comparison Type ($)ComparisonType, with value StringComparison.Ordinal ($)ComparisonType is a variable of type StringComparison    Result \"The quick brown fox jumps over the lazy dog\" contains \"The\" at the start of the sentence that matches the regex \"^The\". Therefore, the variable ($)Text will be updated to the following:\n\"a quick brown fox jumps over the lazy dog\"  Properties Text The Text to find and replace all occurrences of Text To Replace in.\n         Data Type String   Property Type InputOutput   Default Value ($)Text with value \"\"    Text To Replace The Text To Replace all occurrences with Replacement Text in Text.\n         Data Type String   Property Type Input   Default Value ($)TextToReplace with value \"\"    Replacement Text The Replacement Text used to replace all occurrences of Text To Replace in Text.\n         Data Type String   Property Type Input   Default Value ($)ReplacementText with value \"\"    Search Options Search Options can be specified to choose whether Text To Replace should be interpreted as a ContainsText, PatternMatching or Regex search:\n SearchOptions.ContainsText matches text exactly; as long as the Text contains the text specified in Text To Replace it will be considered a match. SearchOptions.PatternMatching allows wildcard text matching using Pattern Matching Syntax:  * wildcard character can be used to match 0 or more characters. ? wildcard character can be used to match 0 or 1 character. All other characters are treated as a literal character.   SearchOptions.Regex allows regex text matching using .Net Regex Syntax.  Please note that with SearchOptions.ContainsText overlapping matches are detected (e.g. searching for \"aa\" in \"aaa\" matches \"aa\" at index 0 and \"aa\" at index 1). With SearchOptions.Regex only \"aa\" at index 0 will be matched.\n         Data Type SearchOptions   Property Type Input   Default Value ($)SearchOptions with value SearchOptions.ContainsText    Comparison Type The Comparison Type specifying the rules used to match occurrences of Text To Replace in Text.\nFor information about the supported values for the Comparison Type property and examples of how it is determined whether two pieces of text match, please see Text Equality.\n         Data Type StringComparison   Property Type Input   Default Value ($)ComparisonType with value StringComparison.Ordinal    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     ArgumentException Thrown when Comparison Type is not one of the specified StringComparison types (e.g. (StringComparison)10).    Thrown when Search Options is not one of the specified SearchOptions types (e.g. (SearchOptions)10).   RegexMatchTimeoutException Thrown when Search Options is either SearchOptions.Regex or SearchOptions.PatternMatching and the execution time of the search exceeds 30 seconds.   RegexParsingFailedException Thrown when Search Options is SearchOptions.Regex and Text To Replace is not a valid regex (e.g. ().    Remarks Comparison Types For information about the supported values for the Comparison Type property and examples of how it is determined whether two pieces of text match, please see Text Equality.\nNull or empty Text If Text is null or empty (i.e. \"\") there is nothing to replace in, so no operation is performed.\nNull or empty Text To Replace If Text To Replace is null or empty (i.e. \"\") there is nothing to replace, so no operation is performed.\nNull or empty Replacement Text If Replacement Text is null or empty (i.e. \"\") all occurrences of Text To Replace are replaced with an empty text (i.e. \"\").\nText To Replace is not present If Text To Replace is not present there is nothing to replace, so no operation is performed.\nImmutable String data type The String data type used to represent Text is immutable, which means it is read-only and cannot be changed once created.\nTo overcome this, this block creates a new String with all occurrences of Text To Replace replaced and re-assigns it to the variable specified in the Text property.\nKnown Limitations If Search Options is set to SearchOptions.Regex or SearchOptions.PatternMatching and Comparison Type is set to StringComparison.CurrentCulture, some characters such as æ that is equivalent to ae may not evaluate as equal.\n","categories":"","description":"Finds and replaces all occurrences of text in a given text.","excerpt":"Finds and replaces all occurrences of text in a given text.","ref":"/docs/reference/blocks/text/find-and-replace-text/find-and-replace-all-text-block/","tags":"","title":"Find And Replace All Text"},{"body":"","categories":"","description":"Find text in another text, and replace it.","excerpt":"Find text in another text, and replace it.","ref":"/docs/reference/blocks/text/find-and-replace-text/","tags":"","title":"Find And Replace Text"},{"body":"\r\rFind And Replace Text (Cortex.Blocks.Text.FindAndReplaceText.FindAndReplaceTextBlock)\nDescription Finds and replaces the specified Occurrence of Text To Replace with the specified Replacement Text in a given Text.\nSearch Options can be specified to choose whether to use a ContainsText, PatternMatching or Regex search to find the Text To Replace.\nExamples Replace the first Occurrence of Text To Replace (Ordinal) This example will find and replace the first occurrence of \"The\" in \"The quick brown fox jumps over the lazy dog\" with \"a\".\nIt performs a case-sensitive, culture-insensitive comparison of text.\nProperties    Property Value Notes     Text ($)Text, with value \"The quick brown fox jumps over the lazy dog\" ($)Text is a variable of type String   Text To Replace ($)TextToReplace, with value \"The\" ($)TextToReplace is a variable of type String   Replacement Text ($)ReplacementText, with value \"a\" ($)ReplacementText is a variable of type String   Occurrence ($)Occurrence, with value 1 ($)Occurrence is a variable of type Int32   Search Options ($)SearchOptions, with value SearchOptions.ContainsText ($)SearchOptions is a variable of type SearchOptions   Comparison Type ($)ComparisonType, with value StringComparison.Ordinal ($)ComparisonType is a variable of type StringComparison    Result An Occurrence of 1 means find and replace the first occurrence; 2 means second etc.\nAs this example is performing a case-sensitive, culture-insensitive comparison of text, \"The quick brown fox jumps over the lazy dog\" only contains the text \"The\" once; \"the\" has a different case so does not match. Therefore, the variable ($)Text will be updated to the following:\n\"a quick brown fox jumps over the lazy dog\"  Replace the last occurrence of Text To Replace (Ordinal Ignore Case) This example will find and replace the last occurrence of \"The\" in \"The quick brown fox jumps over the lazy dog\" with \"a\".\nIt performs a case-insensitive, culture-insensitive comparison of text.\nProperties    Property Value Notes     Text ($)Text, with value \"The quick brown fox jumps over the lazy dog\" ($)Text is a variable of type String   Text To Replace ($)TextToReplace, with value \"The\" ($)TextToReplace is a variable of type String   Replacement Text ($)ReplacementText, with value \"a\" ($)ReplacementText is a variable of type String   Occurrence ($)Occurrence, with value -1 ($)Occurrence is a variable of type Int32   Search Options ($)SearchOptions, with value SearchOptions.ContainsText ($)SearchOptions is a variable of type SearchOptions   Comparison Type ($)ComparisonType, with value StringComparison.OrdinalIgnoreCase ($)ComparisonType is a variable of type StringComparison    Result An Occurrence of -1, means find and replace the last occurrence; -2 means second last etc.\nAs this example is performing a case-insensitive, culture-insensitive comparison of text, \"The quick brown fox jumps over the lazy dog\" contains the text \"The\" twice; the first occurrence is \"The\" and the second and last occurrence is \"the\". Therefore, the variable ($)Text will be updated to the following:\n\"The quick brown fox jumps over a lazy dog\"  Replace the first Occurrence matching the pattern in Text To Replace This example will find and replace the first occurrence of text matching the pattern \"?he\" from \"The quick brown fox jumps over the lazy dog\" with \"a\".\nIt performs a case-sensitive, culture-insensitive comparison of text.\nProperties    Property Value Notes     Text ($)Text, with value \"The quick brown fox jumps over the lazy dog\" ($)Text is a variable of type String   Text To Replace ($)TextToReplace, with value \"?he\" ($)TextToReplace is a variable of type String   Replacement Text ($)ReplacementText, with value \"a\" ($)ReplacementText is a variable of type String   Occurrence ($)Occurrence, with value 1 ($)Occurrence is a variable of type Int32   Search Options ($)SearchOptions, with value SearchOptions.PatternMatching ($)SearchOptions is a variable of type SearchOptions   Comparison Type ($)ComparisonType, with value StringComparison.Ordinal ($)ComparisonType is a variable of type StringComparison    Result An Occurrence of 1 means find and replace the first occurrence; 2 means second etc.\n\"The quick brown fox jumps over the lazy dog\" contains two occurrences that match the pattern \"?he\"; the first occurrence is \"The\" and the second occurrence is \"the\". Therefore, the variable ($)Text will be updated to the following:\n\"a quick brown fox jumps over the lazy dog\"  Replace the last Occurrence matching the regex in Text To Replace This example will find and replace the last occurrence of text matching the regex \"(fox|dog)\" from \"The quick brown fox jumps over the lazy dog\" with \"cat\".\nIt performs a case-sensitive, culture-insensitive comparison of text.\nProperties    Property Value Notes     Text ($)Text, with value \"The quick brown fox jumps over the lazy dog\" ($)Text is a variable of type String   Text To Replace ($)TextToReplace, with value \"(fox|dog)\" ($)TextToReplace is a variable of type String   Replacement Text ($)ReplacementText, with value \"cat\" ($)ReplacementText is a variable of type String   Occurrence ($)Occurrence, with value -1 ($)Occurrence is a variable of type Int32   Search Options ($)SearchOptions, with value SearchOptions.Regex ($)SearchOptions is a variable of type SearchOptions   Comparison Type ($)ComparisonType, with value StringComparison.Ordinal ($)ComparisonType is a variable of type StringComparison    Result An Occurrence of -1, means find and replace the last occurrence; -2 means second last etc.\n\"The quick brown fox jumps over the lazy dog\" contains two occurrences that match the regex \"(fox|dog)\"; the first occurrence is \"fox\" and the second and last occurrence is \"dog\". Therefore, the variable ($)Text will be updated to the following:\n\"The quick brown fox jumps over the lazy cat\"  Properties Text The Text to find and replace the specified Occurrence of Text To Replace in.\n         Data Type String   Property Type InputOutput   Default Value ($)Text with value \"\"    Text To Replace The Text To Replace the specified Occurrence with Replacement Text in Text.\n         Data Type String   Property Type Input   Default Value ($)TextToReplace with value \"\"    Replacement Text The Replacement Text used to replace the specified Occurrence of Text To Replace in Text.\n         Data Type String   Property Type Input   Default Value ($)ReplacementText with value \"\"    Occurrence The Occurrence of Text To Replace in Text.\nFor information about supported values for the Occurrence property and examples of how it can be used, please see Occurrences.\n         Data Type Int32   Property Type Input   Default Value ($)Occurrence with value 1    Search Options Search Options can be specified to choose whether Text To Replace should be interpreted as a ContainsText, PatternMatching or Regex search:\n SearchOptions.ContainsText matches text exactly; as long as the Text contains the text specified in Text To Replace it will be considered a match. SearchOptions.PatternMatching allows wildcard text matching using Pattern Matching Syntax:  * wildcard character can be used to match 0 or more characters. ? wildcard character can be used to match 0 or 1 character. All other characters are treated as a literal character.   SearchOptions.Regex allows regex text matching using .Net Regex Syntax.  Please note that with SearchOptions.ContainsText overlapping matches are detected (e.g. searching for \"aa\" in \"aaa\" matches \"aa\" at index 0 and \"aa\" at index 1). With SearchOptions.Regex only \"aa\" at index 0 will be matched.\n         Data Type SearchOptions   Property Type Input   Default Value ($)SearchOptions with value SearchOptions.ContainsText    Comparison Type The Comparison Type specifying the rules used to match occurrences of Text To Replace in Text.\nFor information about the supported values for the Comparison Type property and examples of how it is determined whether two pieces of text match, please see Text Equality.\n         Data Type StringComparison   Property Type Input   Default Value ($)ComparisonType with value StringComparison.Ordinal    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     ArgumentException Thrown when Comparison Type is not one of the specified StringComparison types (e.g. (StringComparison)10).    Thrown when Search Options is not one of the specified SearchOptions types (e.g. (SearchOptions)10).   RegexMatchTimeoutException Thrown when Search Options is either SearchOptions.Regex or SearchOptions.PatternMatching and the execution time of the search exceeds 30 seconds.   RegexParsingFailedException Thrown when Search Options is SearchOptions.Regex and Text To Replace is not a valid regex (e.g. ().    Remarks Occurrences For information about supported values for the Occurrence property and examples of how it can be used, please see Occurrences.\nComparison Types For information about the supported values for the Comparison Type property and examples of how it is determined whether two pieces of text match, please see Text Equality.\nNull or empty Text If Text is null or empty (i.e. \"\") there is nothing to replace in, so no operation is performed.\nNull or empty Text To Replace If Text To Replace is null or empty (i.e. \"\") there is nothing to replace, so no operation is performed.\nNull or empty Replacement Text If Replacement Text is null or empty (i.e. \"\") the specified Occurrence of Text To Replace is replaced with an empty text (i.e. \"\").\nText To Replace or Occurrence is not present If Text To Replace or the specified Occurrence is not present there is nothing to replace, so no operation is performed.\nImmutable String data type The String data type used to represent Text is immutable, which means it is read-only and cannot be changed once created.\nTo overcome this, this block creates a new String with the specified Occurrence of Text To Replace replaced and re-assigns it to the variable specified in the Text property.\nKnown Limitations If Search Options is set to SearchOptions.Regex or SearchOptions.PatternMatching and Comparison Type is set to StringComparison.CurrentCulture, some characters such as æ that is equivalent to ae may not evaluate as equal.\n","categories":"","description":"Finds and replaces the specified occurrence of text in a given text.","excerpt":"Finds and replaces the specified occurrence of text in a given text.","ref":"/docs/reference/blocks/text/find-and-replace-text/find-and-replace-text-block/","tags":"","title":"Find And Replace Text"},{"body":"FlowException (Cortex.Exceptions.FlowException)\nThe exception thrown by the ThrowNewFlowException block.\nTODO:\nHow to fix TODO:\n","categories":"","description":"The exception thrown by the ThrowNewFlowException block.","excerpt":"The exception thrown by the ThrowNewFlowException block.","ref":"/docs/reference/exceptions/flowexception/","tags":"","title":"FlowException"},{"body":"","categories":"","description":"Blocks related to executing Flows.","excerpt":"Blocks related to executing Flows.","ref":"/docs/reference/blocks/flows/","tags":"","title":"Flows"},{"body":"","categories":"","description":"Blocks used to loop through the items in a collection (i.e. Lists, Dictionaries and Structures).","excerpt":"Blocks used to loop through the items in a collection (i.e. Lists, Dictionaries and Structures).","ref":"/docs/reference/blocks/loops/for-each/","tags":"","title":"For Each Loop"},{"body":"\r\rFor Each Loop (Cortex.Blocks.Loops.ForEach.ForEachLoopBlock)\nDescription Loops through all items in the specified Collection (i.e. Lists, Dictionaries and Structures).\nThe \"Index\" and \"Value\" of the current item are returned as properties of a Structure, which is saved to the Current Iteration.\nExamples Loop through all items in a list This example will loop through all items in [\"Item1\", \"Item2\", \"Item3\"].\nProperties    Property Value Notes     Collection ($)Collection, with value [\"Item1\", \"Item2\", \"Item3\"] ($)Collection is a variable of type IList\u003cString\u003e   Current Iteration ($)CurrentIteration, with no value ($)CurrentIteration is a variable of type Structure    Result Looping through all items in [\"Item1\", \"Item2\", \"Item3\"] will result in 3 loops with ($)CurrentIteration being updated to the following:\n1st loop\n{ \"Index\": 0, \"Value\": \"Item1\" } 2nd loop\n{ \"Index\": 1, \"Value\": \"Item2\" } 3rd loop\n{ \"Index\": 2, \"Value\": \"Item3\" }  Loop through all items in a dictionary or structure This example will loop through all items in {\"Key1\": \"Value1\", \"Key2\": \"Value2\", \"Key3\": \"Value3\"}.\nProperties    Property Value Notes     Collection ($)Collection, with value {\"Key1\": \"Value1\", \"Key2\": \"Value2\", \"Key3\": \"Value3\"} ($)Collection is a variable of type IDictionary\u003cString, String\u003e or Structure   Current Iteration ($)CurrentIteration, with no value ($)CurrentIteration is a variable of type Structure    Result Looping through all items in {\"Key1\": \"Value1\", \"Key2\": \"Value2\", \"Key3\": \"Value3\"} will result in 3 loops with ($)CurrentIteration being updated to the following:\n1st loop\n{ \"Index\": 0, \"Value\": { \"Key\": \"Key1\", \"Value\": \"Value1\" } } 2nd loop\n{ \"Index\": 1, \"Value\": { \"Key\": \"Key2\", \"Value\": \"Value2\" } } 3rd loop\n{ \"Index\": 2, \"Value\": { \"Key\": \"Key3\", \"Value\": \"Value3\" } }  Properties Collection The Collection to loop through.\nIf Collection is empty (i.e. contains no items), no looping will occur.\n         Data Type IEnumerable   Property Type Input   Default Value ($)Collection with value null    Current Iteration The Current Iteration the looping is at.\nCurrent Iteration is set to a Structure on each loop, containing the current item’s \"Index\" and \"Value\". \"Index\" is set to 0 on the first loop, and on each subsequent loop is incremented by 1.\nLooping will continue whilst \"Index\" is less than the number of items in Collection, with the flow execution exiting via the block’s right port (blue loop icon).\nOnce \"Index\" equals the number of items in Collection, looping stops, the flow execution exits via the block’s bottom port (green tick) and Current Iteration is reset to an empty Structure.\nIf Current Iteration \"Index\" is modified during a loop, it will automatically be set back to its original value immediately before the next loop begins.\n         Data Type Structure   Property Type Output   Default Value ($)CurrentIteration with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     PropertyNullException Thrown when Collection is null.    Remarks Empty Collection If Collection is empty (i.e. contains no items), no looping will occur.\n","categories":"","description":"Loops through all items in the specified collection (i.e. Lists, Dictionaries and Structures).","excerpt":"Loops through all items in the specified collection (i.e. Lists, Dictionaries and Structures).","ref":"/docs/reference/blocks/loops/for-each/for-each-loop-block/","tags":"","title":"For Each Loop"},{"body":"","categories":"","description":"Blocks used to loop a specified number of times.","excerpt":"Blocks used to loop a specified number of times.","ref":"/docs/reference/blocks/loops/for/","tags":"","title":"For Loop"},{"body":"\r\rFor Loop (Cortex.Blocks.Loops.For.ForLoopBlock)\nDescription Loops a specified number of times based on a given Start Index, End Index and Increment.\nExamples Loop between 0 and 2 incrementing by 1 This example will loop between 0 and 2 incrementing by 1 each loop.\nProperties    Property Value Notes     Start Index ($)StartIndex, with value 0 ($)StartIndex is a variable of type Int32   End Index ($)EndIndex, with value 2 ($)EndIndex is a variable of type Int32   Increment ($)Increment, with value 1 ($)Increment is a variable of type Int32   Current Index ($)CurrentIndex, with value 0 ($)CurrentIndex is a variable of type Int32 that will be incremented by ($)Increment each loop    Result Looping between 0 and 2 incrementing by 1 each loop will result in 3 loops with ($)CurrentIndex being updated to the following:\n1st loop\n0 2nd loop\n1 3rd loop\n2  Loop between 10 and 20 incrementing by 5 This example will loop between 10 and 20 incrementing by 5 each loop.\nProperties    Property Value Notes     Start Index ($)StartIndex, with value 10 ($)StartIndex is a variable of type Int32   End Index ($)EndIndex, with value 20 ($)EndIndex is a variable of type Int32   Increment ($)Increment, with value 5 ($)Increment is a variable of type Int32   Current Index ($)CurrentIndex, with value 0 ($)CurrentIndex is a variable of type Int32 that will be incremented by ($)Increment each loop    Result Looping between 10 and 20 incrementing by 5 each loop will result in 3 loops with ($)CurrentIndex being updated to the following:\n1st loop\n10 2nd loop\n15 3rd loop\n20  Loop between 20 and 10 incrementing by -5 This example will loop between 20 and 10 incrementing by -5 each loop.\nProperties    Property Value Notes     Start Index ($)StartIndex, with value 20 ($)StartIndex is a variable of type Int32   End Index ($)EndIndex, with value 10 ($)EndIndex is a variable of type Int32   Increment ($)Increment, with value -5 ($)Increment is a variable of type Int32   Current Index ($)CurrentIndex, with value 0 ($)CurrentIndex is a variable of type Int32 that will be incremented by ($)Increment each loop    Result Looping between 20 and 10 incrementing by -5 each loop will result in 3 loops with ($)CurrentIndex being updated to the following:\n1st loop\n20 2nd loop\n15 3rd loop\n10  Properties Start Index The Start Index the looping will start at. This is an inclusive index, which means the specified index will be included.\nFor information about what an index is, please see Indexes.\n         Data Type Int32   Property Type Input   Default Value ($)StartIndex with value 0    End Index The End Index the looping will end at. This is an inclusive index, which means the specified index will be included.\nFor information about what an index is, please see Indexes.\n         Data Type Int32   Property Type Input   Default Value ($)EndIndex with value 0    Increment The Increment to be added to Current Index every time the block loops.\nIncrement can be:\n A positive value if Start Index is less than End Index. A negative value if Start Index is greater than End Index. A positive or negative value if Start Index is equal to End Index.  If any of the above are not true or Increment is 0 then an InfiniteLoopException will be thrown the first time a flow execution executes this block.\n         Data Type Int32   Property Type Input   Default Value ($)Increment with value 1    Current Index The Current Index the looping is at.\nCurrent Index initially gets set to the value of Start Index on the first loop, and on each subsequent loop is incremented by the value of Increment.\nIf Increment is a positive value, the block will continue looping whilst Current Index is less than End Index; with the flow execution exiting via the block’s right port (blue loop icon).\nIf Increment is a negative value, the block will continue looping whilst Current Index is greater than Start Index; with the flow execution exiting via the block’s right port (blue loop icon).\nWhen either of the above are not true the block stops looping, the flow execution exits via the block’s bottom port (green tick) and Current Index is reset to 0\nAt this moment, there is a known limitation with Current Index, which requires the variable used must have an Int32 value assigned to it before the block executes. If it does not then an InvalidPropertyValueException will be thrown the first time a flow execution executes this block.\nFor information about what an index is, please see Indexes.\n         Data Type Int32   Property Type InputOutput   Default Value ($)CurrentIndex with value 0    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     InfiniteLoopException Thrown when Increment is 0.    Thrown when Increment has a positive value and Start Index is greater than End Index.    Thrown when Increment has a negative value and Start Index is less than End Index.   InvalidPropertyValueException Thrown when Current Index does not have an Int32 value assigned to it before the block executes.    Remarks Start Index and End Index are inclusive The Start Index and End Index properties are both inclusive indexes, which means those indexes will be included in the looping range (e.g. if Start Index is 0 and End Index is 1, the block will loop 2 times).\nStart Index greater than End Index Start Index can be greater than End Index. If this is the case, Increment must be a negative value. See Example above.\nKnown Limitations The variable used for Current Index must have an Int32 value assigned to it before the block executes. If it does not then an InvalidPropertyValueException will be thrown the first time a flow execution executes this block.\n","categories":"","description":"Loops a specified number of times based on a given start index, end index and increment.","excerpt":"Loops a specified number of times based on a given start index, end index and increment.","ref":"/docs/reference/blocks/loops/for/for-loop-block/","tags":"","title":"For Loop"},{"body":"","categories":"","description":"Format text containing format parameters (i.e. {0}) by replacing them with other values.","excerpt":"Format text containing format parameters (i.e. {0}) by replacing them with other values.","ref":"/docs/reference/blocks/text/format-text/","tags":"","title":"Format Text"},{"body":"\r\rFormat Text With Value (Cortex.Blocks.Text.FormatText.FormatTextWithValueBlock`1)\nDescription Replaces all {0} format parameters in the specified Format Template with the given Value, saving the result as Text.\nAn additional Format Provider option can be specified to define the cultural rules used to control the formatting (e.g. new CultureInfo(\"en-US\") will apply American English rules to the formatting).\nExamples Text Value This example will format \"Hello {0}\" with \"world!\".\nProperties    Property Value Notes     Format Template ($)FormatTemplate, with value \"Hello {0}\" ($)FormatTemplate is a variable of type String   Value ($)Value, with value \"world!\" ($)Value is a variable of type String   Format Provider ($)FormatProvider, with value null ($)FormatProvider is a variable of type IFormatProvider   Text ($)Text, with no value ($)Text is a variable that will be set to a String value    Result Formatting \"Hello {0}\" with \"world!\" results in the variable ($)Text being updated to the following:\n\"Hello world!\"  Double Value using American English (“en-US”) This example will format \"Your final bill is {0:C2}\" with 99.99.\nThe format parameter {0:C2} will display the double value as U.S currency to two decimal places (i.e. $99.99):\n 0 - is replaced by the double value. C - indicates to include the currency symbol for the specified culture (i.e. $). 2 - indicates the number of decimal places to format the double value to.  For information about format templates and parameters, please see Text Formatting.\nProperties    Property Value Notes     Format Template ($)FormatTemplate, with value \"Your final bill is {0:C2}\" ($)FormatTemplate is a variable of type String   Value ($)Value, with value 99.99 ($)Value is a variable of type Double   Format Provider ($)FormatProvider, with value new CultureInfo(\"en-US\") ($)FormatProvider is a variable of type IFormatProvider   Text ($)Text, with no value ($)Text is a variable that will be set to a String value    Result Formatting \"Your final bill is {0:C2}\" with 99.99 results in the variable ($)Text being updated to the following:\n\"Your final bill is $99.99\"  Properties Format Template Format Template can be specified to define the format of the resultant Text.\nAll {0} format parameters in Format Template will be replaced with Value.\nIf Format Template is not specified, null or empty (i.e. \"\"), or does not contain any {0} format parameters, nothing is replaced; Text will be set to the value of Format Template.\nFor information about format templates and parameters, please see Text Formatting.\n         Data Type String   Property Type Input   Default Value ($)FormatTemplate with value null    Value The Value to replace all {0} format parameters with.\nValue does not have to be text, it can be any data type. Any non-text value will be converted to its text representation when it is replaced.\nFor information about how types are converted to their text representation please see Converting Objects To Text.\n         Data Type TValue   Property Type Input   Default Value ($)Value with value null    Format Provider Format Provider can be specified to define the cultural rules used to control the formatting (e.g. new CultureInfo(\"en-US\") will apply American English rules to the formatting.).\nIf Format Provider is not specified or null, CultureInfo.InvariantCulture will be used; CultureInfo.InvariantCulture is associated with the English language but not with any country/region. For more information, please see Invariant Culture rules.\n         Data Type IFormatProvider   Property Type Input   Default Value ($)FormatProvider with value null    Text The formatted Text that results from replacing all {0} format parameters in Format Template with Value.\n         Data Type String   Property Type Output   Default Value ($)Text with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     FormatException Thrown when Format Template contains a format parameter not equal to zero (e.g. \"Hello {1}\").    Thrown when Format Template contains a format parameter that is invalid or not well-formed (e.g. \"Cost is {0:Q2}, as \"Q\" is not a valid format parameter).    Remarks Text Formatting Please note that changes to operating system settings, could result in some of the examples above displaying different results.\nFor information about format templates and parameters, please see Text Formatting.\nNull or Empty Format Template If Format Template is not specified, null or empty (i.e. \"\"), or does not contain any {0} format parameters, nothing is replaced; Text will be set to the value of Format Template.\nNull Format Provider If Format Provider is not specified or null, CultureInfo.InvariantCulture will be used; CultureInfo.InvariantCulture is associated with the English language but not with any country/region. For more information, please see Invariant Culture rules.\n","categories":"","description":"Formats text by replacing all `{0}` format parameters in a specified format template with a given value.","excerpt":"Formats text by replacing all `{0}` format parameters in a specified format template with a given value.","ref":"/docs/reference/blocks/text/format-text/format-text-with-value-block-1/","tags":"","title":"Format Text With Value"},{"body":"\r\rFormat Text With Values (Cortex.Blocks.Text.FormatText.FormatTextWithValuesBlock`1)\nDescription Replaces all format parameters (e.g. {0} or {1} or {2}) in the given Format Template with the specified Values, saving the result as Text.\nAn additional Format Provider option can be specified to define the cultural rules used to control the formatting (e.g. new CultureInfo(\"en-US\") will apply American English rules to the formatting).\nExamples Text Values This example will format \"Hello {0} {1}\" with [\"Mr\", \"Smith\"].\nProperties    Property Value Notes     Format Template ($)FormatTemplate, with value \"Hello {0} {1}\" ($)FormatTemplate is a variable of type String   Values ($)Values, with value [\"Mr\", \"Smith\"] ($)Values is a variable of type IEnumerable\u003cString\u003e   Format Provider ($)FormatProvider, with value null ($)FormatProvider is a variable of type IFormatProvider   Text ($)Text, with no value ($)Text is a variable that will be set to a String value    Result Formatting \"Hello {0} {1}\" with [\"Mr\", \"Smith\"] results in the variable ($)Text being updated to the following:\n\"Hello Mr Smith\"  Multiple non-text values using American English (“en-US”) This example will format \"Your latest payment of {0:C2} has been received. You have paid {1:P0} of your total and have {2:C2} outstanding.\" with [99.99, 0.8, 40].\nThe format parameter {0:C2} will display the 99.99 as U.S currency to two decimal places (i.e. $99.99):\n 0 - is replaced by the double value 99.99. C - indicates to include the currency symbol for the specified culture (i.e. $). 2 - indicates to format the double value to two decimal places.  The format parameter {1:P0} will display the 0.8 as a percentage to zero decimal places (i.e. 80 %):\n 1 - is replaced by the double value 0.8. P - indicates the value should be formatted as a percentage. 0 - indicates to format the percentage value to zero decimal places.  The format parameter {2:C2} will display the 40 as U.S currency to two decimal places (i.e. $40.00):\n 2 - is replaced by the double value 40. C - indicates to include the currency symbol for the specified culture (i.e. $). 2 - indicates to format the double value to two decimal places.  For information about format templates and parameters, please see Text Formatting.\nProperties    Property Value Notes     Format Template ($)FormatTemplate, with value \"Your latest payment of {0:C2} has been received. You have paid {1:P0} of your total and have {2:C2} outstanding.\" ($)FormatTemplate is a variable of type String   Values ($)Values, with value [99.99, 0.8, 40] ($)Values is a variable of type IEnumerable\u003cDouble\u003e   Format Provider ($)FormatProvider, with value new CultureInfo(\"en-US\") ($)FormatProvider is a variable of type IFormatProvider   Text ($)Text, with no value ($)Text is a variable that will be set to a String value    Result \"Your latest payment of {0:C2} has been received. You have paid {1:P0} of your total and have {2:C2} outstanding.\" with [99.99, 0.8, 40] results in the variable ($)Text being updated to the following:\n\"Your latest payment of $99.99 has been received. You have paid 80 % of your total and have $40.00 outstanding.\"  Properties Format Template Format Template can be specified to define the format of the resultant Text.\nAll format parameters (e.g. {0} or {1} or {2}) in Format Template will be replaced with the corresponding value in Values. Format parameter {0} will be replaced with the first value in Values; {1} will be replaced with the second value in Values etc.\nThe number of unique format parameters must be equal to or less than the number of items in Values.\nThe index of each format parameter must be equal to or less than the number of items in Values - 1.\nIf Format Template is not specified, null or empty (i.e. \"\"), or does not contain any format parameters, nothing is replaced; Text will be set to the value of Format Template.\nFor information about format templates and parameters, please see Text Formatting.\n         Data Type String   Property Type Input   Default Value ($)FormatTemplate with value null    Values The Values to replace all format parameters with.\nIf a value does not have a corresponding format parameter, it is ignored.\nValues does not have to contain all text values, it can contain any data types. Any non-text values will be converted to their text representation when they are replaced.\nIf any value is null or empty (i.e. \"\"), an empty text (i.e. \"\") will replace the corresponding format parameter.\nFor information about how types are converted to their text representation please see Converting Objects To Text.\n         Data Type IEnumerable\u003cTValue\u003e   Property Type Input   Default Value ($)Values with value []    Format Provider Format Provider can be specified to define the cultural rules used to control the formatting (e.g. new CultureInfo(\"en-US\") will apply American English rules to the formatting.).\nIf Format Provider is not specified or null, CultureInfo.InvariantCulture will be used; CultureInfo.InvariantCulture is associated with the English language but not with any country/region. For more information, please see Invariant Culture rules.\n         Data Type IFormatProvider   Property Type Input   Default Value ($)FormatProvider with value null    Text The formatted Text that results from replacing all format parameters in Format Template with corresponding Values.\n         Data Type String   Property Type Output   Default Value ($)Text with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     FormatException Thrown when Format Template contains a format parameter less than zero (e.g. \"Hello {-1}\") or greater than the count of Values - 1.    Thrown when Format Template contains a format parameter that is invalid or not well-formed (e.g. \"Cost is {0:Q2}, as \"Q\" is not a valid format parameter).   PropertyNullException Thrown when Values is null.    Remarks Text Formatting Please note that changes to operating system settings, could result in some of the examples above displaying different results.\nFor information about format templates and parameters, please see Text Formatting.\nNull or Empty Format Template If Format Template is not specified, null or empty (i.e. \"\"), or does not contain any format parameters, nothing is replaced; Text will be set to the value of Format Template.\nNull Format Provider If Format Provider is not specified or null, CultureInfo.InvariantCulture will be used; CultureInfo.InvariantCulture is associated with the English language but not with any country/region. For more information, please see Invariant Culture rules.\n","categories":"","description":"Formats text by replacing all format parameters (e.g. `{0}` or `{1}` or `{2}`) in a specified format template with given values.","excerpt":"Formats text by replacing all format parameters (e.g. `{0}` or `{1}` or `{2}`) in a specified format template with given values.","ref":"/docs/reference/blocks/text/format-text/format-text-with-values-block-1/","tags":"","title":"Format Text With Values"},{"body":"Generics Overview TODO: Overview/summary\nBlocks which use Generics ","categories":"","description":"This page describes the concept of Generics.","excerpt":"This page describes the concept of Generics.","ref":"/docs/reference/concepts/generics/","tags":"","title":"Generics"},{"body":"\r\rGet All Items (Cortex.Blocks.Dictionaries.GetItem.GetAllItemsBlock`3)\nDescription Get all Items from a Dictionary.\nExamples Get all items from a Dictionary This example will get all items in {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1}.\nProperties    Property Value Notes     Dictionary ($)Dictionary, with value {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} ($)Dictionary is a variable of type IDictionary\u003cString, Int32\u003e   Items ($)Items, with no value ($)Items is a variable that will be set to an IList\u003cInt32\u003e    Result Getting all items from {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} results in the variable ($)Items being updated to the following:\n[1, 2, 3, 3, 2, 1]  Properties Dictionary The Dictionary to get all Items from.\nDictionary can be any IDictionary\u003cTKey, TItem\u003e, where TKey represents the type of keys used to lookup items in the Dictionary, and TItem represents the type of items in the Dictionary.\n         Data Type IDictionary\u003cTKey, TItem\u003e   Property Type Input   Default Value ($)Dictionary with value {}    Items The Items in the Dictionary.\n         Data Type IList\u003cTItem\u003e   Property Type Output   Default Value ($)Items with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     PropertyNullException Thrown when Dictionary is null.    Remarks Empty Dictionary If Dictionary is empty (i.e. {}) the variable specified in the Items property is set to an empty IList\u003cTItem\u003e (i.e. []).\nDefining dictionaries using literal syntax For information about how to define dictionaries using literal syntax, see Dictionary Literals.\nDefining dictionaries using expression syntax For information about how to define dictionaries using expression syntax, see Dictionary Expressions.\nDictionaries containing items with same data types vs different data types For information about the different types of dictionaries, including those that can contain only the same type of item, and those that can contain different types of item, see Dictionaries.\n","categories":"","description":"Gets all items from a Dictionary.","excerpt":"Gets all items from a Dictionary.","ref":"/docs/reference/blocks/dictionaries/get-item/get-all-items-block-3/","tags":"","title":"Get All Items"},{"body":"\r\rGet All Keys (Cortex.Blocks.Dictionaries.GetKey.GetAllKeysBlock`3)\nDescription Get all Keys from a Dictionary.\nExamples Get all keys from a Dictionary This example will get all keys in {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1}.\nProperties    Property Value Notes     Dictionary ($)Dictionary, with value {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} ($)Dictionary is a variable of type IDictionary\u003cString, Int32\u003e   Keys ($)Keys, with no value ($)Keys is a variable that will be set to an IList\u003cString\u003e    Result Getting all keys from {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} results in the variable ($)Keys being updated to the following:\n[\"Key1\", \"Key2\", \"Key3\", \"Key4\", \"Key5\", \"Key6\"]  Properties Dictionary The Dictionary to get all Keys from.\nDictionary can be any IDictionary\u003cTKey, TItem\u003e, where TKey represents the type of keys used to lookup items in the Dictionary, and TItem represents the type of items in the Dictionary.\n         Data Type IDictionary\u003cTKey, TItem\u003e   Property Type Input   Default Value ($)Dictionary with value {}    Keys The Keys in the Dictionary.\n         Data Type IList\u003cTKey\u003e   Property Type Output   Default Value ($)Keys with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     PropertyNullException Thrown when Dictionary is null.    Remarks Empty Dictionary If Dictionary is empty (i.e. {}) the variable specified in the Keys property is set to an empty IList\u003cTKey\u003e (i.e. []).\nDefining dictionaries using literal syntax For information about how to define dictionaries using literal syntax, see Dictionary Literals.\nDefining dictionaries using expression syntax For information about how to define dictionaries using expression syntax, see Dictionary Expressions.\nDictionaries containing items with same data types vs different data types For information about the different types of dictionaries, including those that can contain only the same type of item, and those that can contain different types of item, see Dictionaries.\n","categories":"","description":"Gets all keys from a Dictionary.","excerpt":"Gets all keys from a Dictionary.","ref":"/docs/reference/blocks/dictionaries/get-key/get-all-keys-block-3/","tags":"","title":"Get All Keys"},{"body":"\r\rGet Count Of All Items (Cortex.Blocks.Dictionaries.GetCount.GetCountOfAllItemsBlock`3)\nDescription Gets the Count of all items in a Dictionary.\nExamples Get Count of all items in a Dictionary This example will get the count of all items in {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1}.\nProperties    Property Value Notes     Dictionary ($)Dictionary, with value {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} ($)Dictionary is a variable of type IDictionary\u003cString, Int32\u003e   Count ($)Count, with no value ($)Count is a variable that will be set to an Int32 value    Result Getting the count of all items in {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} results in the variable ($)Count being updated to the following:\n6  Properties Dictionary The Dictionary to get the Count of all items for.\nDictionary can be any IDictionary\u003cTKey, TItem\u003e, where TKey represents the type of keys used to lookup items in the Dictionary, and TItem represents the type of items in the Dictionary.\n         Data Type IDictionary\u003cTKey, TItem\u003e   Property Type Input   Default Value ($)Dictionary with value {}    Count The Count of all items in Dictionary.\n         Data Type Int32   Property Type Output   Default Value ($)Count with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     PropertyNullException Thrown when Dictionary is null.    Remarks Empty Dictionary If Dictionary is empty (i.e. {}), the variable specified in the Count property is set to 0.\nDefining dictionaries using literal syntax For information about how to define dictionaries using literal syntax, see Dictionary Literals.\nDefining dictionaries using expression syntax For information about how to define dictionaries using expression syntax, see Dictionary Expressions.\nDictionaries containing items with same data types vs different data types For information about the different types of dictionaries, including those that can contain only the same type of item, and those that can contain different types of item, see Dictionaries.\n","categories":"","description":"Gets the count of all items in a Dictionary.","excerpt":"Gets the count of all items in a Dictionary.","ref":"/docs/reference/blocks/dictionaries/get-count/get-count-of-all-items-block-3/","tags":"","title":"Get Count Of All Items"},{"body":"\r\rGet Count Of All Items (Cortex.Blocks.Lists.GetCount.GetCountOfAllItemsBlock`2)\nDescription Gets the Count of all items in a List.\nExamples Get Count of all items in a List This example will get the count of all items in [\"Some Text\", 1].\nProperties    Property Value Notes     List ($)List, with value [\"Some Text\", 1] ($)List is a variable of type IList\u003cdynamic\u003e   Count ($)Count, with no value ($)Count is a variable that will be set to an Int32 value    Result Getting the count of all items in [\"Some Text\", 1] results in the variable ($)Count being updated to the following:\n2  Properties List The List to get the Count of all items for.\nList can be any IList\u003cTItem\u003e, where TItem represents the type of items in the List.\n         Data Type IList\u003cTItem\u003e   Property Type Input   Default Value ($)List with value []    Count The Count of all items in List.\n         Data Type Int32   Property Type Output   Default Value ($)Count with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     PropertyNullException Thrown when List is null.    Remarks Empty List If List is empty (i.e. []), the variable specified in the Count property is set to 0.\nDefining lists using literal syntax For information about how to define lists using literal syntax, see List Literals.\nDefining lists using expression syntax For information about how to define lists using expression syntax, see List Expressions.\nLists containing items of a single data type vs multiple data types For information about the different types of lists, including those that can contain only a single type of item, and those that can contain multiple types of item, see Lists.\n","categories":"","description":"Gets the count of all items in a List.","excerpt":"Gets the count of all items in a List.","ref":"/docs/reference/blocks/lists/get-count/get-count-of-all-items-block-2/","tags":"","title":"Get Count Of All Items"},{"body":"\r\rGet Count Of Items With Value (Cortex.Blocks.Dictionaries.GetCount.GetCountOfItemsWithValueBlock`3)\nDescription Gets the Count of items in a Dictionary with the specified Value.\nExamples Get Count of items in a Dictionary with a Value This example will get the count of items in {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} with the value 1.\nProperties    Property Value Notes     Dictionary ($)Dictionary, with value {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} ($)Dictionary is a variable of type IDictionary\u003cString, Int32\u003e   Value ($)Value, with value 1 ($)Value is a variable of type Int32   Count ($)Count, with no value ($)Count is a variable that will be set to an Int32 value    Result Getting the count of items in {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} with the value 1 results in the variable ($)Count being updated to the following:\n2  Properties Dictionary The Dictionary to get the Count of items with the specified Value for.\nDictionary can be any IDictionary\u003cTKey, TItem\u003e, where TKey represents the type of keys used to lookup items in the Dictionary, and TItem represents the type of items in the Dictionary.\n         Data Type IDictionary\u003cTKey, TItem\u003e   Property Type Input   Default Value ($)Dictionary with value {}    Value The Value items must match to be included in the Count.\nFor information and examples of how it is determined whether an item matches a specified value, please see Object Equality.\n         Data Type TItem   Property Type Input   Default Value ($)Value with value null    Count The Count of items in Dictionary with the specified Value.\n         Data Type Int32   Property Type Output   Default Value ($)Count with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     InvalidPropertyValueException Thrown when Value is null and Dictionary only accepts non-nullable value types.   PropertyNullException Thrown when Dictionary is null.    Remarks Item Equality For information and examples of how it is determined whether an item matches a specified value, please see Object Equality.\nEmpty Dictionary If Dictionary is empty (i.e. {}), the variable specified in the Count property is set to 0.\nNo items matching Value If Dictionary does not contain items matching the specified Value, the variable specified in the Count property is set to 0.\nDefining dictionaries using literal syntax For information about how to define dictionaries using literal syntax, see Dictionary Literals.\nDefining dictionaries using expression syntax For information about how to define dictionaries using expression syntax, see Dictionary Expressions.\nDictionaries containing items with same data types vs different data types For information about the different types of dictionaries, including those that can contain only the same type of item, and those that can contain different types of item, see Dictionaries.\n","categories":"","description":"Gets the count of items in a Dictionary with the specified value.","excerpt":"Gets the count of items in a Dictionary with the specified value.","ref":"/docs/reference/blocks/dictionaries/get-count/get-count-of-items-with-value-block-3/","tags":"","title":"Get Count Of Items With Value"},{"body":"\r\rGet Count Of Items With Value (Cortex.Blocks.Lists.GetCount.GetCountOfItemsWithValueBlock`2)\nDescription Gets the Count of items in a List with the specified Value.\nExamples Get Count of items in a List with a Value This example will get the count of items in [\"Some Text\", 1] with the value 1.\nProperties    Property Value Notes     List ($)List, with value [\"Some Text\", 1] ($)List is a variable of type IList\u003cdynamic\u003e   Value ($)Value, with value 1 ($)Value is a variable of type Int32   Count ($)Count, with no value ($)Count is a variable that will be set to an Int32 value    Result Getting the count of items in [\"Some Text\", 1] with the value 1 results in the variable ($)Count being updated to the following:\n1  Properties List The List to get the Count of items with the specified Value for.\nList can be any IList\u003cTItem\u003e, where TItem represents the type of items in the List.\n         Data Type IList\u003cTItem\u003e   Property Type Input   Default Value ($)List with value []    Value The Value items must match to be included in the Count.\nFor information and examples of how it is determined whether an item matches a specified value, please see Object Equality.\n         Data Type TItem   Property Type Input   Default Value ($)Value with value null    Count The Count of items in List with the specified Value.\n         Data Type Int32   Property Type Output   Default Value ($)Count with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     InvalidPropertyValueException Thrown when Value is null and List only accepts non-nullable value types.   PropertyNullException Thrown when List is null.    Remarks Item Equality For information and examples of how it is determined whether an item matches a specified value, please see Object Equality.\nEmpty List If List is empty (i.e. []), the variable specified in the Count property is set to 0.\nNo items matching Value If List does not contain items matching the specified Value, the variable specified in the Count property is set to 0.\nDefining lists using literal syntax For information about how to define lists using literal syntax, see List Literals.\nDefining lists using expression syntax For information about how to define lists using expression syntax, see List Expressions.\nLists containing items of a single data type vs multiple data types For information about the different types of lists, including those that can contain only a single type of item, and those that can contain multiple types of item, see Lists.\n","categories":"","description":"Gets the count of items in a List with the specified value.","excerpt":"Gets the count of items in a List with the specified value.","ref":"/docs/reference/blocks/lists/get-count/get-count-of-items-with-value-block-2/","tags":"","title":"Get Count Of Items With Value"},{"body":"","categories":"","description":"Get the count(s) of items in a dictionary.","excerpt":"Get the count(s) of items in a dictionary.","ref":"/docs/reference/blocks/dictionaries/get-count/","tags":"","title":"Get Count(s) of Items"},{"body":"","categories":"","description":"Get the count(s) of items in a list.","excerpt":"Get the count(s) of items in a list.","ref":"/docs/reference/blocks/lists/get-count/","tags":"","title":"Get Count(s) of Items"},{"body":"\r\rGet Counts Of Items With Values (Cortex.Blocks.Dictionaries.GetCount.GetCountsOfItemsWithValuesBlock`3)\nDescription Gets the Counts of items in a Dictionary matching each of the specified Values.\nExamples Get Counts of items in a Dictionary matching each of the Values This example will get the counts of items in {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} matching each of the values [1, 2, 3].\nProperties    Property Value Notes     Dictionary ($)Dictionary, with value {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} ($)Dictionary is a variable of type IDictionary\u003cString, Int32\u003e   Values ($)Values, with value [1, 2, 3] ($)Values is a variable of type IEnumerable\u003cInt32\u003e   Counts ($)Counts, with no value ($)Counts is a variable that will be set to an IList\u003cInt32\u003e value    Result Getting the counts of items in {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} matching each of the values [1, 2, 3] results in the variable ($)Counts being updated to the following:\n[2, 2, 2] The counts of items matching each value are added to ($)Counts at the same index the value is in ($)Values. In this example, there are two items matching the first value 1, two items matching the second value 2 and two items matching the third value 3, resulting in ($)Counts being set to [2, 2, 2].\n Properties Dictionary The Dictionary to get the Counts of items matching each of the specified Values for.\nDictionary can be any IDictionary\u003cTKey, TItem\u003e, where TKey represents the type of keys used to lookup items in the Dictionary, and TItem represents the type of items in the Dictionary.\n         Data Type IDictionary\u003cTKey, TItem\u003e   Property Type Input   Default Value ($)Dictionary with value {}    Values The Values items must match to be included in the Counts.\nFor information and examples of how it is determined whether an item matches a specified value, please see Object Equality.\n         Data Type IEnumerable\u003cTItem\u003e   Property Type Input   Default Value ($)Values with value []    Counts The Counts of items in Dictionary matching each of the specified Values.\nFor each value in Values, Counts will have a corresponding item whose value is the count of items in Dictionary matching the value.\nI.e. The count of items matching the first value in Values will be saved as the first item in Counts; the count of items matching the second value in Values will be saved as the second item in Counts etc.\n         Data Type IList\u003cInt32\u003e   Property Type Output   Default Value ($)Counts with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     PropertyNullException Thrown when Dictionary or Values are null.    Remarks Item Equality For information and examples of how it is determined whether an item matches a specified value, please see Object Equality.\nEmpty Values If Values is empty (i.e. []), the variable specified in the Counts property is set to empty (i.e. []).\nNo items matching a specified value in Values If Dictionary does not contain items matching one of the specified Values, 0 is written to the corresponding item in Counts for that value.\nDefining dictionaries using literal syntax For information about how to define dictionaries using literal syntax, see Dictionary Literals.\nDefining dictionaries using expression syntax For information about how to define dictionaries using expression syntax, see Dictionary Expressions.\nDictionaries containing items with same data types vs different data types For information about the different types of dictionaries, including those that can contain only the same type of item, and those that can contain different types of item, see Dictionaries.\n","categories":"","description":"Gets the counts of items in a Dictionary matching each of the specified values.","excerpt":"Gets the counts of items in a Dictionary matching each of the specified values.","ref":"/docs/reference/blocks/dictionaries/get-count/get-count-of-items-with-values-block-3/","tags":"","title":"Get Counts Of Items With Values"},{"body":"\r\rGet Counts Of Items With Values (Cortex.Blocks.Lists.GetCount.GetCountsOfItemsWithValuesBlock`2)\nDescription Gets the Counts of items in a List matching each of the specified Values.\nExamples Get Counts of items in a List matching each of the Values This example will get the counts of items in [\"Some Text\", 1] matching each of the values [1, 2, 3].\nProperties    Property Value Notes     List ($)List, with value [\"Some Text\", 1] ($)List is a variable of type IList\u003cdynamic\u003e   Values ($)Values, with value [1, 2, 3] ($)Values is a variable of type IEnumerable\u003cInt32\u003e   Counts ($)Counts, with no value ($)Counts is a variable that will be set to an IList\u003cInt32\u003e value    Result Getting the counts of items in [\"Some Text\", 1] matching each of the values [1, 2, 3] results in the variable ($)Counts being updated to the following:\n[1, 0, 0] The counts of items matching each value are added to ($)Counts at the same index the value is in ($)Values. In this example, there is one item matching the first value 1, zero items matching the second value 2 and zero items matching the third value 3, resulting in ($)Counts being set to [1, 0, 0].\n Properties List The List to get the Counts of items matching each of the specified Values for.\nList can be any IList\u003cTItem\u003e, where TItem represents the type of items in the List.\n         Data Type IList\u003cTItem\u003e   Property Type Input   Default Value ($)List with value []    Values The Values items must match to be included in the Counts.\nFor information and examples of how it is determined whether an item matches a specified value, please see Object Equality.\n         Data Type IEnumerable\u003cTItem\u003e   Property Type Input   Default Value ($)Values with value []    Counts The Counts of items in List matching each of the specified Values.\nFor each value in Values, Counts will have a corresponding item whose value is the count of items in List matching the value.\nI.e. The count of items matching the first value in Values will be saved as the first item in Counts; the count of items matching the second value in Values will be saved as the second item in Counts etc.\n         Data Type IList\u003cInt32\u003e   Property Type Output   Default Value ($)Counts with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     PropertyNullException Thrown when List or Values are null.    Remarks Item Equality For information and examples of how it is determined whether an item matches a specified value, please see Object Equality.\nEmpty Values If Values is empty (i.e. []), the variable specified in the Counts property is set to empty (i.e. []).\nNo items matching a specified value in Values If List does not contain items matching one of the specified Values, 0 is written to the corresponding item in Counts for that value.\nDefining lists using literal syntax For information about how to define lists using literal syntax, see List Literals.\nDefining lists using expression syntax For information about how to define lists using expression syntax, see List Expressions.\nLists containing items of a single data type vs multiple data types For information about the different types of lists, including those that can contain only a single type of item, and those that can contain multiple types of item, see Lists.\n","categories":"","description":"Gets the counts of items in a List matching each of the specified values.","excerpt":"Gets the counts of items in a List matching each of the specified values.","ref":"/docs/reference/blocks/lists/get-count/get-count-of-items-with-values-block-2/","tags":"","title":"Get Counts Of Items With Values"},{"body":"\r\rGet Current Date Time (Cortex.Blocks.DateAndTime.GetDateTime.GetCurrentDateTimeBlock)\nDescription Gets the current Date Time.\nExamples Get the current Date Time This example will get the current Date Time.\nProperties    Property Value Notes     Date Time ($)DateTime, with no value ($)DateTime is a variable that will be set to a DateTimeOffset value    Result Getting the current Date Time will result in the variable ($)DateTime being set to a DateTimeOffset representing the current Date Time (including a UTC time offset). Its text representation will be in the ISO 8601 Standard, which can be seen below:\n\"2021-11-05T08:48:08.0307614+00:00\"  Properties Date Time The current Date Time including a UTC time offset.\nIts text representation will be in the ISO 8601 Standard (e.g. 2021-11-05T08:48:08.0307614+00:00).\nFor more information about Date and Time, please see Working with Dates and Time.\n         Data Type DateTimeOffset   Property Type Output   Default Value ($)DateTime with no value    Exceptions No exceptions are thrown by the block.\nRemarks Dates and Time The default text representation of Date and Time will be in the ISO 8601 Standard (e.g. 2021-11-05T08:48:08.0307614+00:00).\nFor more information, please see Working with Dates and Time.\n","categories":"","description":"Gets the current Date Time.","excerpt":"Gets the current Date Time.","ref":"/docs/reference/blocks/date-and-time/get-date-time/get-current-date-time-block/","tags":"","title":"Get Current Date Time"},{"body":"","categories":"","description":"Get the current date time or parts of a date time (i.e. Year, Month, Day).","excerpt":"Get the current date time or parts of a date time (i.e. Year, Month, Day).","ref":"/docs/reference/blocks/date-and-time/get-date-time/","tags":"","title":"Get Date Time"},{"body":"\r\rGet Date Time Component (Cortex.Blocks.DateAndTime.GetDateTime.GetDateTimeComponentBlock)\nDescription Gets a Component (e.g. Year, Month, Day) of the specified Date Time.\nComponent Type is used to specify which type of component to get.\nFor more information about values that can be specified for Component Type, please see DateTimeComponentType or the examples below.\nExamples LocalDateTime This example will get the LocalDateTime of a Date Time representing 5am on 31st December 2021 (with -5 UTC time offset).\nIn this example assume that the local date and time is in the GMT time zone.\nProperties    Property Value Notes     Date Time ($)DateTime, with value of DateTimeOffset that has a text representation of 2021-12-31T00:05:00-05:00 ($)DateTime is a variable of type DateTimeOffset   Component Type ($)ComponentType, with value of DateTimeComponentType.LocalDateTime ($)DateTime is a variable of type DateTimeComponentType   Component ($)Component, with no value ($)Component is a variable that will be set to a dynamic value    Result Getting the LocalDateTime (GMT) of a Date Time representing 5am on 31st December 2021 (with -5 UTC time offset), will result in the variable ($)Component being updated to a DateTime value. Its text representation will be in the ISO 8601 Standard, which can be seen below:\n\"2021-12-31T10:00:00+00:00\"  UtcDateTime This example will get the UTCDateTime of a Date Time representing 5am on 31st December 2021 (with -5 UTC time offset).\nProperties    Property Value Notes     Date Time ($)DateTime, with value of DateTimeOffset that has a text representation of 2021-12-31T05:00:00-05:00 ($)DateTime is a variable of type DateTimeOffset   Component Type ($)ComponentType, with value of DateTimeComponentType.UtcDateTime ($)DateTime is a variable of type DateTimeComponentType   Component ($)Component, with no value ($)Component is a variable that will be set to a dynamic value    Result Getting the UTCDateTime of a Date Time representing 5am on 31st December 2021 (with -5 UTC time offset), will result in the variable ($)Component being updated to a DateTime value. Its text representation will be in the ISO 8601 Standard, which can be seen below:\n\"2021-12-31T10:00:00Z\"  Date This example will get the Date component of a Date Time representing 5am on 31st December 2021 (with -5 UTC time offset).\nProperties    Property Value Notes     Date Time ($)DateTime, with value of DateTimeOffset that has a text representation of 2021-12-31T05:00:00-05:00 ($)DateTime is a variable of type DateTimeOffset   Component Type ($)ComponentType, with value of DateTimeComponentType.Date ($)DateTime is a variable of type DateTimeComponentType   Component ($)Component, with no value ($)Component is a variable that will be set to a dynamic value    Result Getting the Date component of a Date Time representing 5am on 31st December 2021 (with -5 UTC time offset), will result in the variable ($)Component being updated to a DateTime value. Its text representation will be in the ISO 8601 Standard, which can be seen below:\n\"2021-12-31T00:00:00\"  Time This example will get the Time component of a Date Time representing 5am on 31st December 2021 (with -5 UTC time offset).\nProperties    Property Value Notes     Date Time ($)DateTime, with value of DateTimeOffset that has a text representation of 2021-12-31T05:00:00-05:00 ($)DateTime is a variable of type DateTimeOffset   Component Type ($)ComponentType, with value of DateTimeComponentType.Time ($)DateTime is a variable of type DateTimeComponentType   Component ($)Component, with no value ($)Component is a variable that will be set to a dynamic value    Result Getting the Time component of a Date Time representing 5am on 31st December 2021 (with -5 UTC time offset), will result in the variable ($)Component being updated to the following TimePeriod value:\n{ \"Years\": 0, \"Months\": 0, \"Days\": 0, \"Hours\": 5, \"Minutes\": 0, \"Seconds\": 0, \"Milliseconds\": 0 } Year This example will get the Year component of a Date Time representing 5am on 31st December 2021 (with -5 UTC time offset).\nProperties    Property Value Notes     Date Time ($)DateTime, with value of DateTimeOffset that has a text representation of 2021-12-31T05:00:00-05:00 ($)DateTime is a variable of type DateTimeOffset   Component Type ($)ComponentType, with value of DateTimeComponentType.Year ($)DateTime is a variable of type DateTimeComponentType   Component ($)Component, with no value ($)Component is a variable that will be set to a dynamic value    Result Getting the Year component of a Date Time representing 5am on 31st December 2021 (with -5 UTC time offset), will result in the variable ($)Component being updated to the following Int32 value:\n2021  Month This example will get the Month component of a Date Time representing 5am on 31st December 2021 (with -5 UTC time offset).\nProperties    Property Value Notes     Date Time ($)DateTime, with value of DateTimeOffset that has a text representation of 2021-12-31T05:00:00-05:00 ($)DateTime is a variable of type DateTimeOffset   Component Type ($)ComponentType, with value of DateTimeComponentType.Month ($)DateTime is a variable of type DateTimeComponentType   Component ($)Component, with no value ($)Component is a variable that will be set to a dynamic value    Result Getting the Month component of a Date Time representing 5am on 31st December 2021 (with -5 UTC time offset), will result in the variable ($)Component being updated to the following Int32 value:\n12 Day This example will get the Day component of a Date Time representing 5am on 31st December 2021 (with -5 UTC time offset).\nProperties    Property Value Notes     Date Time ($)DateTime, with value of DateTimeOffset that has a text representation of 2021-12-31T05:00:00-05:00 ($)DateTime is a variable of type DateTimeOffset   Component Type ($)ComponentType, with value of DateTimeComponentType.Day ($)DateTime is a variable of type DateTimeComponentType   Component ($)Component, with no value ($)Component is a variable that will be set to a dynamic value    Result Getting the Day component of a Date Time representing 5am on 31st December 2021 (with -5 UTC time offset), will result in the variable ($)Component being updated to the following Int32 value:\n31 Hour This example will get the Hour component of a Date Time representing 5am on 31st December 2021 (with -5 UTC time offset).\nProperties    Property Value Notes     Date Time ($)DateTime, with value of DateTimeOffset that has a text representation of 2021-12-31T05:00:00-05:00 ($)DateTime is a variable of type DateTimeOffset   Component Type ($)ComponentType, with value of DateTimeComponentType.Hour ($)DateTime is a variable of type DateTimeComponentType   Component ($)Component, with no value ($)Component is a variable that will be set to a dynamic value    Result Getting the Hour component of a Date Time representing 5am on 31st December 2021 (with -5 UTC time offset), will result in the variable ($)Component being updated to the following Int32 value:\n5  Minute This example will get the Minute component of a Date Time representing 5am on 31st December 2021 (with -5 UTC time offset).\nProperties    Property Value Notes     Date Time ($)DateTime, with value of DateTimeOffset that has a text representation of 2021-12-31T05:00:00-05:00 ($)DateTime is a variable of type DateTimeOffset   Component Type ($)ComponentType, with value of DateTimeComponentType.Minute ($)DateTime is a variable of type DateTimeComponentType   Component ($)Component, with no value ($)Component is a variable that will be set to a dynamic value    Result Getting the Minute component of a Date Time representing 5am on 31st December 2021 (with -5 UTC time offset), will result in the variable ($)Component being updated to the following Int32 value:\n0  Second This example will get the Second component of a Date Time representing 5am on 31st December 2021 (with -5 UTC time offset).\nProperties    Property Value Notes     Date Time ($)DateTime, with value of DateTimeOffset that has a text representation of 2021-12-31T05:00:00-05:00 ($)DateTime is a variable of type DateTimeOffset   Component Type ($)ComponentType, with value of DateTimeComponentType.Second ($)DateTime is a variable of type DateTimeComponentType   Component ($)Component, with no value ($)Component is a variable that will be set to a dynamic value    Result Getting the Second component of a Date Time representing 5am on 31st December 2021 (with -5 UTC time offset), will result in the variable ($)Component being updated to the following Int32 value:\n0  Millisecond This example will get the Millisecond component of a Date Time representing 5am on 31st December 2021 (with -5 UTC time offset).\nProperties    Property Value Notes     Date Time ($)DateTime, with value of DateTimeOffset that has a text representation of 2021-12-31T05:00:00-05:00 ($)DateTime is a variable of type DateTimeOffset   Component Type ($)ComponentType, with value of DateTimeComponentType.Millisecond ($)DateTime is a variable of type DateTimeComponentType   Component ($)Component, with no value ($)Component is a variable that will be set to a dynamic value    Result Getting the Millisecond component of a Date Time representing 5am on 31st December 2021 (with -5 UTC time offset), will result in the variable ($)Component being updated to the following Int32 value:\n0  Offset This example will get the Offset component of a Date Time representing 5am on 31st December 2021 (with -5 UTC time offset).\nProperties    Property Value Notes     Date Time ($)DateTime, with value of DateTimeOffset that has a text representation of 2021-12-31T05:00:00-05:00 ($)DateTime is a variable of type DateTimeOffset   Component Type ($)ComponentType, with value of DateTimeComponentType.Offset ($)DateTime is a variable of type DateTimeComponentType   Component ($)Component, with no value ($)Component is a variable that will be set to a dynamic value    Result Getting the Offset component of a Date Time representing 5am on 31st December 2021 (with -5 UTC time offset), will result in the variable ($)Component being updated to the following TimeSpan value with the following text representation:\n\"-5:00:00\"  DayOfYear This example will get the DayOfYear component of a Date Time representing 5am on 31st December 2021 (with -5 UTC time offset).\nProperties    Property Value Notes     Date Time ($)DateTime, with value of DateTimeOffset that has a text representation of 2021-12-31T05:00:00-05:00 ($)DateTime is a variable of type DateTimeOffset   Component Type ($)ComponentType, with value of DateTimeComponentType.DayOfYear ($)DateTime is a variable of type DateTimeComponentType   Component ($)Component, with no value ($)Component is a variable that will be set to a dynamic value    Result Getting the DayOfYear component of a Date Time representing 5am on 31st December 2021 (with -5 UTC time offset), will result in the variable ($)Component being updated to the following Int32 value:\n365  DayOfWeek This example will get the DayOfWeek component of a Date Time representing 5am on 31st December 2021 (with -5 UTC time offset).\nProperties    Property Value Notes     Date Time ($)DateTime, with value of DateTimeOffset that has a text representation of 2021-12-31T05:00:00-05:00 ($)DateTime is a variable of type DateTimeOffset   Component Type ($)ComponentType, with value of DateTimeComponentType.DayOfWeek ($)DateTime is a variable of type DateTimeComponentType   Component ($)Component, with no value ($)Component is a variable that will be set to a dynamic value    Result Getting the DayOfWeek component of a Date Time representing 5am on 31st December 2021 (with -5 UTC time offset), will result in the variable ($)Component being updated to the following DayOfWeek value:\nDayOfWeek.Friday Its text representation is:\n\"DayOfWeek: Friday\"  Properties Date Time The Date Time to get the specified Component Type from.\n         Data Type DateTimeOffset   Property Type Input   Default Value ($)DateTime with DateTimeOffset value that has a text representation of 0001-01-01T00:00:00+00:00    Component Type The Component Type to get from the Date Time.\nFor more information about values that can be specified for Component Type, please see DateTimeComponentType or the examples above.\n         Data Type DateTimeComponentType   Property Type Input   Default Value ($)ComponentType with value DateTimeComponentType.LocalDateTime    Component The Component from the Date Time.\n         Data Type dynamic   Property Type Output   Default Value ($)Component with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     ArgumentException Thrown when Component Type is not one of the specified DateTimeComponentType types (e.g. (DateTimeComponentType)100).    Remarks Dates and Time The default text representation of Date and Time will be in the ISO 8601 Standard (e.g. 2021-11-05T08:48:08.0307614+00:00).\nFor more information, please see Working with Dates and Time.\nWhy does the Component property return a dynamic data type? The decision for Component to return a dynamic data type rather than an Object, was to avoid users having to cast the component to its correct type to be able to use all of its properties.\nAs a result, any issues with using the Component (i.e. trying to access a property it does not have) will not be reported as messages when trying to debug the flow; they will only be discovered when the flow execution reaches the part of the flow with the issue.\nIf it is desirable to have any issues reported as messages when trying to debug the flow, the user can cast the variable specified for Component to its correct type when using it (e.g. for UtcDateTime component it could be case as follows: (DateTime)($)Component).\n","categories":"","description":"Gets a component (e.g. Year, Month, Day) of a specified Date Time.","excerpt":"Gets a component (e.g. Year, Month, Day) of a specified Date Time.","ref":"/docs/reference/blocks/date-and-time/get-date-time/get-date-time-component-block/","tags":"","title":"Get Date Time Component"},{"body":"","categories":"","description":"Get information about a file (i.e. file attributes, created, accessed and modified dates etc.).","excerpt":"Get information about a file (i.e. file attributes, created, accessed and modified dates etc.).","ref":"/docs/reference/blocks/files-and-folders/get-file-information/","tags":"","title":"Get File Information"},{"body":"\r\rGet File Information (Cortex.Blocks.FilesAndFolders.GetFileInformation.GetFileInformationBlock)\nDescription Gets File Information about a file (e.g. file attributes, created, accessed, modified dates etc.) at the specified File Path.\nExamples Get file information This example will get information about \"C:\\Source\\File.txt\".\nIn this example assume \"C:\\Source\\File.txt\":\n Is on a server where local time and UTC time are the same (e.g. in UK). Was created at 10.00am on the 1st January 2021. Was last modified at 10.00am on the 1st January 2021. Was last accessed at 1.00pm on the 10th January 2021. Is 100 bytes in size.  Properties    Property Value Notes     File Path ($)FilePath, with value @\"C:\\Source\\File.txt\" ($)FilePath is a variable of type String   File Information ($)FileInformation, with no value ($)FilePath is a variable that will be set to a FileInformation value    Result Getting file information for \"C:\\Source\\File.txt\" results in the variable ($)FileInformation being updated to the following:\n{ \"Extension\": \".exe\", \"Path\": \"C:\\\\Source\\\\File.txt\", \"Name\": \"File.txt\", \"ParentRoot\": \"C:\\\\\", \"ParentPath\": \"C:\\\\Source\", \"SizeInBytes\": 100, \"IsArchive\": false, \"IsCompressed\": false, \"IsEncrypted\": false, \"IsHidden\": false, \"IsNormal\": false, \"IsTemporary\": false, \"IsReadOnly\": false, \"IsSystem\": false, \"CreationTimeLocal\": \"2021-01-01T10:00:00+00:00\", \"CreationTimeUtc\": \"2021-01-01T10:00:00Z\", \"LastAccessTimeLocal\": \"2021-01-10T13:00:00+00:00\", \"LastAccessTimeUtc\": \"2021-01-10T13:00:00Z\", \"LastWriteTimeLocal\": \"2021-01-01T10:00:00+00:00\", \"LastWriteTimeUtc\": \"2021-01-01T10:00:00Z\" }  Properties File Path The File Path to get the File Information of.\nThe File Path is case-insensitive, cannot contain any wildcard characters, and any trailing spaces will be automatically removed.\nFor information about the supported file path formats (i.e. absolute, relative, UNC etc.) and examples of each, please see File \u0026 Folder Paths.\n         Data Type String   Property Type Input   Default Value ($)FilePath with value null    File Information The File Information retrieved from the file at the specified File Path.\nFile Information includes file attributes, create, access and write dates and path details.\nFor more information see the example above, or the FileInformation data type.\n         Data Type FileInformation   Property Type Output   Default Value ($)FileInformation with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     OperationFailedException The File Path points to a folder.    The File Path contains leading spaces.    The File Path contains only whitespace, or the NUL character (i.e. \\0), or contains one or more invalid characters (i.e. \", *, ?, |, \u003c, \u003e, :, \\, /) in any folder or file names.    The File Path exceeds the system-defined maximum length (typically 32,767 characters).    The File Path is invalid (for example, it is on an unmapped drive).    The user the flow is executing as does not have the required permissions to get information about the file at the File Path.    An unexpected error occurs when getting information for the file at the File Path.   PropertyEmptyException Thrown when File Path is empty (i.e. \"\").   PropertyNullException Thrown when File Path is null.    Remarks File Paths For information about the supported file path formats (i.e. absolute, relative, UNC etc.) and examples of each, including how it is determined if a path points to a folder or a file, please see File \u0026 Folder Paths.\nFile Path needs escaping File Path requires \\ characters to be escaped, otherwise each unescaped \\ will be reported as an Invalid property value message when trying to debug the flow.\nEscaping can be done in two ways:\n Escaping the \\ character with another \\ character (e.g. \"C:\\\\Source\\\\File.txt\"), or Prepending an @ character before the start of the File Path (e.g. @\"C:\\Source\\File.txt\").  ","categories":"","description":"Gets information about a file (e.g. file attributes, created, accessed, modified dates etc.) at the specified file path.","excerpt":"Gets information about a file (e.g. file attributes, created, accessed, modified dates etc.) at the specified file path.","ref":"/docs/reference/blocks/files-and-folders/get-file-information/get-file-information-block/","tags":"","title":"Get File Information"},{"body":"","categories":"","description":"Get the paths of files or folders in another folder.","excerpt":"Get the paths of files or folders in another folder.","ref":"/docs/reference/blocks/files-and-folders/get-folder-content/","tags":"","title":"Get Folder Content"},{"body":"\r\rGet Folder Content (Cortex.Blocks.FilesAndFolders.GetFolderContent.GetFolderContentBlock)\nDescription Gets the Paths of files or folders under the specified Folder Path whose name matches the given Search Pattern.\nThe returned Paths can then be used in other file and folder blocks that require paths.\nAdditional options can be specified:\n Search Options can be specified to choose whether to use a ContainsText, PatternMatching or Regex search. Content Options can be specified to choose whether to search for files or folders. A Recursive option can specified to choose whether to search only in the specified Folder Path, or include all subfolders. A Comparison Type option can specified to choose how it is determined whether the file or folder name matches the Search Pattern (e.g. whether the search is case-sensitive or case-insensitive).  Examples Get paths of files in a folder whose names contain a given text This example will get the paths of all files in \"C:\\Source\\Folder\" that contain \"file\" in their name.\nIt will perform a case-insensitive search, and will not get any paths of folders or any paths of files that reside in subfolders of \"C:\\Source\\Folder\".\nIn this example assume \"C:\\Source\\Folder\" contains:\n A file named \"FileInFolder1.txt\". A file named \"FileInFolder2.txt\". A folder named \"SubFolder\" which contains:  A file named \"FileInSubFolder1.txt\". A file named \"FileInSubFolder2.txt\".    Properties    Property Value Notes     Folder Path ($)FolderPath, with value @\"C:\\Source\\Folder\" ($)FolderPath is a variable of type String   Search Pattern ($)SearchPattern, with value \"file\" ($)SearchPattern is a variable of type String   Search Options ($)SearchOptions, with value SearchOptions.ContainsText ($)SearchOptions is a variable of type SearchOptions   Content Options ($)ContentOptions, with value ContentOptions.Files ($)ContentOptions is a variable of type ContentOptions   Recursive ($)Recursive, with value false ($)Recursive is a variable of type Boolean   Comparison Type ($)ComparisonType, with value StringComparison.OrdinalIgnoreCase ($)ComparisonType is a variable of type StringComparison   Paths ($)Paths, with no value ($)Paths is a variable that will be set to an IList\u003cString\u003e value    Result Getting all file paths that contain \"file\" (case-insensitive) in \"C:\\Source\\Folder\" excluding any of its subfolders, results in the variable ($)Paths being updated to the following:\n[ \"C:\\\\Source\\\\Folder\\\\FileInFolder1.txt\", \"C:\\\\Source\\\\Folder\\\\FileInFolder2.txt\" ]  Get paths of files in a folder (and its subfolders) whose names contain a given text This example will get the paths of all files in \"C:\\Source\\Folder\" or any of its subfolders, that contain \"File\" in their name.\nIt will perform a case-sensitive search and will not get any paths of folders.\nIn this example assume \"C:\\Source\\Folder\" contains:\n A file named \"FileInFolder1.txt\". A file named \"FileInFolder2.txt\". A folder named \"SubFolder\" which contains:  A file named \"FileInSubFolder1.txt\". A file named \"FileInSubFolder2.txt\".    Properties    Property Value Notes     Folder Path ($)FolderPath, with value @\"C:\\Source\\Folder\" ($)FolderPath is a variable of type String   Search Pattern ($)SearchPattern, with value \"File\" ($)SearchPattern is a variable of type String   Search Options ($)SearchOptions, with value SearchOptions.ContainsText ($)SearchOptions is a variable of type SearchOptions   Content Options ($)ContentOptions, with value ContentOptions.Files ($)ContentOptions is a variable of type ContentOptions   Recursive ($)Recursive, with value true ($)Recursive is a variable of type Boolean   Comparison Type ($)ComparisonType, with value StringComparison.Ordinal ($)ComparisonType is a variable of type StringComparison   Paths ($)Paths, with no value ($)Paths is a variable that will be set to an IList\u003cString\u003e value    Result Getting all file paths that contain \"File\" (case-sensitive) in \"C:\\Source\\Folder\" or any of its subfolders, results in the variable ($)Paths being updated to the following:\n[ \"C:\\\\Source\\\\Folder\\\\FileInFolder1.txt\", \"C:\\\\Source\\\\Folder\\\\FileInFolder2.txt\", \"C:\\\\Source\\\\Folder\\\\SubFolder\\\\FileInSubFolder1.txt\", \"C:\\\\Source\\\\Folder\\\\SubFolder\\\\FileInSubFolder2.txt\" ]  Get paths of folders in a folder whose names match a given pattern This example will get the paths of all folders that are in \"C:\\Source\\Folder\", and match the pattern \"*\" in their name.\nIt will perform a case-insensitive search, will not get any paths of files, and will match any folder in \"C:\\Source\\Folder\". It will not match any child folders of folders in \"C:\\Source\\Folder\".\nIn this example assume \"C:\\Source\\Folder\" contains:\n A file named \"FileInFolder1.txt\". A file named \"FileInFolder2.txt\". A folder named \"SubFolder\" which contains:  A file named \"FileInSubFolder1.txt\". A file named \"FileInSubFolder2.txt\". An empty folder named \"NestedSubFolder\".    Properties    Property Value Notes     Folder Path ($)FolderPath, with value @\"C:\\Source\\Folder\" ($)FolderPath is a variable of type String   Search Pattern ($)SearchPattern, with value \"*\" ($)SearchPattern is a variable of type String   Search Options ($)SearchOptions, with value SearchOptions.PatternMatching ($)SearchOptions is a variable of type SearchOptions   Content Options ($)ContentOptions, with value ContentOptions.Folders ($)ContentOptions is a variable of type ContentOptions   Recursive ($)Recursive, with value false ($)Recursive is a variable of type Boolean   Comparison Type ($)ComparisonType, with value StringComparison.OrdinalIgnoreCase ($)ComparisonType is a variable of type StringComparison   Paths ($)Paths, with no value ($)Paths is a variable that will be set to an IList\u003cString\u003e value    Result Getting all folder paths that match the pattern \"*\" (case-insensitive) in \"C:\\Source\\Folder\" excluding any of its subfolders, results in the variable ($)Paths being updated to the following:\n[ \"C:\\\\Source\\\\Folder\\\\SubFolder\" ]  Get paths of folders in a folder (and its subfolders) whose names match a given regex This example will get the paths of all folders that are in \"C:\\Source\\Folder\" or any of its subfolders, and match the regex \"Folder$\" in their name.\nIt will perform a case-sensitive search, will not get any paths of files, and will match folders whose name ends with \"Folder\".\nIn this example assume \"C:\\Source\\Folder\" contains:\n A file named \"FileInFolder1.txt\". A file named \"FileInFolder2.txt\". A folder named \"SubFolder\" which contains:  A file named \"FileInSubFolder1.txt\". A file named \"FileInSubFolder2.txt\". An empty folder named \"NestedSubFolder\".    Properties    Property Value Notes     Folder Path ($)FolderPath, with value @\"C:\\Source\\Folder\" ($)FolderPath is a variable of type String   Search Pattern ($)SearchPattern, with value \"Folder$\" ($)SearchPattern is a variable of type String   Search Options ($)SearchOptions, with value SearchOptions.Regex ($)SearchOptions is a variable of type SearchOptions   Content Options ($)ContentOptions, with value ContentOptions.Folders ($)ContentOptions is a variable of type ContentOptions   Recursive ($)Recursive, with value true ($)Recursive is a variable of type Boolean   Comparison Type ($)ComparisonType, with value StringComparison.Ordinal ($)ComparisonType is a variable of type StringComparison   Paths ($)Paths, with no value ($)Paths is a variable that will be set to an IList\u003cString\u003e value    Result Getting all folder paths that match the regex \"Folder$\" (case-sensitive) in \"C:\\Source\\Folder\" or any of its subfolders, results in the variable ($)Paths being updated to the following:\n[ \"C:\\\\Source\\\\Folder\\\\SubFolder\", \"C:\\\\Source\\\\Folder\\\\SubFolder\\\\NestedSubFolder\" ]  Properties Folder Path The Folder Path to get the Paths of files or folders whose name matches the given Search Pattern.\nThe Folder Path is case-insensitive, cannot contain any wildcard characters, and any trailing spaces will be automatically removed.\nFor information about the supported folder path formats (i.e. absolute, relative, UNC etc.) and examples of each, please see File \u0026 Folder Paths.\n         Data Type String   Property Type Input   Default Value ($)FolderPath with value null    Search Pattern The Search Pattern file or folder names must match to be included in the returned Paths.\nOnly file or folder names are matched, not the whole path.\nA Search Pattern of null or empty (i.e. \"\") means match any name; all additional block options such as Content Options etc. still take effect.\n         Data Type String   Property Type Input   Default Value ($)SearchPattern with value null    Search Options Search Options can be specified to choose whether Search Pattern should be interpreted as a ContainsText, PatternMatching or Regex search:\n SearchOptions.ContainsText matches text exactly; as long as the file or folder name contains the text specified in Search Pattern it will be considered a match. SearchOptions.PatternMatching allows wildcard text matching using Pattern Matching Syntax:  * wildcard character can be used to match 0 or more characters. ? wildcard character can be used to match 0 or 1 character. All other characters are treated as a literal character.   SearchOptions.Regex allows regex text matching using .Net Regex Syntax.  Please note that with SearchOptions.ContainsText overlapping matches are detected (e.g. searching for \"aa\" in \"aaa\" matches \"aa\" at index 0 and \"aa\" at index 1). With SearchOptions.Regex only \"aa\" at index 0 will be matched.\n         Data Type SearchOptions   Property Type Input   Default Value ($)SearchOptions with value SearchOptions.ContainsText    Content Options Content Options can be specified to choose whether Search Pattern should be match file or folder names.\n ContentOptions.Files restricts the search to match only files. ContentOptions.Folders restricts the search to match only folders.           Data Type ContentOptions   Property Type Input   Default Value ($)ContentOptions with value ContentOptions.Files    Recursive Recursive option can specified to choose whether to search only in the specified Folder Path, or include all subfolders.\nTo search only in the specified Folder Path set Recursive to false, or to include all subfolders set Recursive to true.\n         Data Type Boolean   Property Type Input   Default Value ($)Recursive with value false    Comparison Type The Comparison Type specifying the rules used to match file or folder names against the given Search Pattern.\nFor information about the supported values for the Comparison Type property and examples of how it is determined whether two pieces of text match, please see Text Equality.\n         Data Type StringComparison   Property Type Input   Default Value ($)ComparisonType with value StringComparison.Ordinal    Paths All Paths that match the specified Search Pattern based on the other specified options.\nThe Paths returned will be absolute paths, and based on the Folder Path provided (i.e. if a UNC path is specified, all returned paths will be UNC paths).\n         Data Type IList\u003cString\u003e   Property Type Output   Default Value ($)Paths with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     ArgumentException Thrown when Search Options is not one of the specified SearchOptions types (e.g. (SearchOptions)10).    Thrown when Content Options is not one of the specified ContentOptions types (e.g. (ContentOptions)10).    Thrown when Comparison Type is not one of the specified StringComparison types (e.g. (StringComparison)10).   OperationFailedException The Folder Path points to a file.    The Folder Path contains leading spaces.    The Folder Path contains only whitespace, or the NUL character (i.e. \\0), or contains one or more invalid characters (i.e. \", *, ?, |, \u003c, \u003e, :, \\, /) in any folder names.    The Folder Path exceeds the system-defined maximum length (typically 32,767 characters).    The Folder Path is invalid (for example, it is on an unmapped drive).    The user the flow is executing as does not have the required permissions to get the paths of files or folders in the Folder Path, or any of its subfolders if Recursive is true.    An unexpected error occurs when getting the paths of files or folders in the Folder Path, or any of its subfolders if Recursive is true.   PropertyEmptyException Thrown when Folder Path is empty (i.e. \"\").   PropertyNullException Thrown when Folder Path is null.   RegexMatchTimeoutException Thrown when using Search Options is either SearchOptions.Regex or SearchOptions.PatternMatching and the execution time of the search exceeds 30 seconds.   RegexParsingFailedException Thrown when Search Options is SearchOptions.Regex and the Search Pattern is not a valid regex (e.g. ().    Remarks Folder Paths For information about the supported folder path formats (i.e. absolute, relative, UNC etc.) and examples of each, including how it is determined if a path points to a folder or a file, please see File \u0026 Folder Paths.\nFolder Path needs escaping Folder Path requires \\ characters to be escaped, otherwise each unescaped \\ will be reported as an Invalid property value message when trying to debug the flow.\nEscaping can be done in two ways:\n Escaping the \\ character with another \\ character (e.g. \"C:\\\\Source\\\\\"), or Prepending an @ character before the start of the Folder Path (e.g. @\"C:\\Source\").  Null or empty Search Pattern A null or empty (i.e. \"\") Search Pattern means match any name; all additional block options such as Content Options etc. still take effect.\nComparison Types For information about the supported values for the Comparison Type property and examples of how it is determined whether two pieces of text match, please see Text Equality.\nHandling of Exceptions If an exception occurs when trying to match a file or folder name, it will be recorded and the block will continue processing the remaining files or folders. Once all files or folders are processed, recorded exceptions will be thrown within an OperationFailedException.\nKnown Limitations If Search Options is set to SearchOptions.Regex or SearchOptions.PatternMatching and Comparison Type is set to StringComparison.CurrentCulture, some characters such as æ that is equivalent to ae may not evaluate as equal.\n","categories":"","description":"Gets the paths of files or folders under the specified folder path.","excerpt":"Gets the paths of files or folders under the specified folder path.","ref":"/docs/reference/blocks/files-and-folders/get-folder-content/get-folder-content-block/","tags":"","title":"Get Folder Content"},{"body":"","categories":"","description":"Get information about a folder (i.e. folder attributes, created, accessed and modified dates etc.).","excerpt":"Get information about a folder (i.e. folder attributes, created, accessed and modified dates etc.).","ref":"/docs/reference/blocks/files-and-folders/get-folder-information/","tags":"","title":"Get Folder Information"},{"body":"\r\rGet Folder Information (Cortex.Blocks.FilesAndFolders.GetFolderInformation.GetFolderInformationBlock)\nDescription Gets Folder Information about a folder (e.g. folder attributes, created, accessed, modified dates etc.) at the specified Folder Path.\nExamples Get folder information This example will get information about \"C:\\Source\\Folder\".\nIn this example assume \"C:\\Source\\Folder\":\n Is on a server where local time and UTC time are the same (e.g. in UK). Was created at 10.00am on the 1st January 2021. Was last modified at 10.00am on the 1st January 2021. Was last accessed at 1.00pm on the 10th January 2021. Contains a single file named \"File.txt\" which is 100 bytes in size. Contains a single empty folder named \"SubFolder\".  Properties    Property Value Notes     Folder Path ($)FolderPath, with value @\"C:\\Source\\Folder\" ($)FolderPath is a variable of type String   Folder Information ($)FolderInformation, with no value ($)FolderPath is a variable that will be set to a FolderInformation value    Result Getting folder information for \"C:\\Source\\Folder\" results in the variable ($)FolderInformation being updated to the following:\n{ \"FileCount\": 1, \"FolderCount\": 1, \"TotalItemCount\": 2, \"Path\": \"C:\\\\Source\\\\Folder\", \"Name\": \"Test\", \"ParentRoot\": \"C:\\\\\", \"ParentPath\": \"C:\\\\Source\", \"SizeInBytes\": 100, \"IsArchive\": false, \"IsCompressed\": false, \"IsEncrypted\": false, \"IsHidden\": false, \"IsNormal\": false, \"IsTemporary\": false, \"IsReadOnly\": false, \"IsSystem\": false, \"CreationTimeLocal\": \"2021-01-01T10:00:00+00:00\", \"CreationTimeUtc\": \"2021-01-01T10:00:00Z\", \"LastAccessTimeLocal\": \"2021-01-10T13:00:00+00:00\", \"LastAccessTimeUtc\": \"2021-01-10T13:00:00Z\", \"LastWriteTimeLocal\": \"2021-01-01T10:00:00+00:00\", \"LastWriteTimeUtc\": \"2021-01-01T10:00:00Z\" }  Properties Folder Path The Folder Path to get the Folder Information of.\nThe Folder Path is case-insensitive, cannot contain any wildcard characters, and any trailing spaces will be automatically removed.\nFor information about the supported folder path formats (i.e. absolute, relative, UNC etc.) and examples of each, please see File \u0026 Folder Paths.\n         Data Type String   Property Type Input   Default Value ($)FolderPath with value null    Folder Information The Folder Information retrieved from the folder at the specified Folder Path.\nFolder Information includes folder attributes, create, access and write dates, path details and folder and file counts.\nFor more information see the example above, or the FolderInformation data type.\n         Data Type FolderInformation   Property Type Output   Default Value ($)FolderInformation with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     OperationFailedException The Folder Path points to a file.    The Folder Path contains leading spaces.    The Folder Path contains only whitespace, or the NUL character (i.e. \\0), or contains one or more invalid characters (i.e. \", *, ?, |, \u003c, \u003e, :, \\, /) in any folder names.    The Folder Path exceeds the system-defined maximum length (typically 32,767 characters).    The Folder Path is invalid (for example, it is on an unmapped drive).    The user the flow is executing as does not have the required permissions to get information about the folder at the Folder Path.    An unexpected error occurs when getting information for the folder at the Folder Path or any of its content.   PropertyEmptyException Thrown when Folder Path is empty (i.e. \"\").   PropertyNullException Thrown when Folder Path is null.    Remarks Folder Paths For information about the supported folder path formats (i.e. absolute, relative, UNC etc.) and examples of each, including how it is determined if a path points to a folder or a file, please see File \u0026 Folder Paths.\nFolder Path needs escaping Folder Path requires \\ characters to be escaped, otherwise each unescaped \\ will be reported as an Invalid property value message when trying to debug the flow.\nEscaping can be done in two ways:\n Escaping the \\ character with another \\ character (e.g. \"C:\\\\Source\\\\\"), or Prepending an @ character before the start of the Folder Path (e.g. @\"C:\\Source\").  ","categories":"","description":"Gets information about a folder (e.g. folder attributes, created, accessed, modified dates etc.) at the specified folder path.","excerpt":"Gets information about a folder (e.g. folder attributes, created, accessed, modified dates etc.) at the specified folder path.","ref":"/docs/reference/blocks/files-and-folders/get-folder-information/get-folder-information-block/","tags":"","title":"Get Folder Information"},{"body":"\r\rGet Index Of Item With Value (Cortex.Blocks.Lists.GetIndex.GetIndexOfItemWithValueBlock`2)\nDescription Gets the Index of the specified Occurrence of an item in a List matching a Value.\nExamples Get the Index of the first Occurrence of an item in a List matching a Value This example will attempt to get the index of the first occurrence of an item matching the value 1 from [1, 2, 3, 3, 2, 1].\nProperties    Property Value Notes     List ($)List, with value [1, 2, 3, 3, 2, 1] ($)List is a variable of type IList\u003cInt32\u003e   Value ($)Value, with value 1 ($)Value is a variable of type Int32   Occurrence ($)Occurrence, with value 1 ($)Occurrence is a variable of type Int32   Index ($)Index, with no value ($)Index is a variable that will be set to an Int32 value    Result An Occurrence of 1 means the first occurrence; 2 means second etc.\nAttempting to get the index of the first occurrence of an item matching the value 1 from [1, 2, 3, 3, 2, 1] results in the variable ($)Index being updated to the following:\n0  Get the Index of the last Occurrence of an item in a List matching a Value This example will attempt to get the index of the last occurrence of an item matching the value 1 from [1, 2, 3, 3, 2, 1].\nProperties    Property Value Notes     List ($)List, with value [1, 2, 3, 3, 2, 1] ($)List is a variable of type IList\u003cInt32\u003e   Value ($)Value, with value 1 ($)Value is a variable of type Int32   Occurrence ($)Occurrence, with value -1 ($)Occurrence is a variable of type Int32   Index ($)Index, with no value ($)Index is a variable that will be set to an Int32 value    Result An Occurrence of -1, means the last occurrence; -2 means second last etc.\nAttempting to get the index of the last occurrence of an item matching the value 1 from [1, 2, 3, 3, 2, 1] results in the variable ($)List being updated to the following:\n5  Properties List The List to get the Index of the specified Occurrence of matching item from.\nItems are considered matching if they have the specified Value.\nList can be any IList\u003cTItem\u003e, where TItem represents the type of items in the List.\n         Data Type IList\u003cTItem\u003e   Property Type Input   Default Value ($)List with value []    Value The Value the item to get the Index of the specified Occurrence must match.\nFor information and examples of how it is determined whether an item matches a specified value, please see Object Equality.\n         Data Type TItem   Property Type Input   Default Value ($)Value with value null    Occurrence The Occurrence of matching item to get the Index of.\nItems are considered matching if they have the specified Value.\nFor information about supported values for the Occurrence property and examples of how it can be used, please see Occurrences.\n         Data Type Int32   Property Type Input   Default Value ($)Occurrence with value 1    Index Int32 indicating the Index of the specified Occurrence of item matching Value in List.\nIf there is no specified Occurrence of item matching Value in List, the specified variable will be set to -1.\nFor information about what an index is, please see Indexes.\n         Data Type Int32   Property Type Output   Default Value ($)Index with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     InvalidPropertyValueException Thrown when Value is null and List only accepts non-nullable value types.   PropertyNullException Thrown when List is null.    Remarks Item Equality For information and examples of how it is determined whether an item matches a specified value, please see Object Equality.\nOccurrences For information about supported values for the Occurrence property and examples of how it can be used, please see Occurrences.\nEmpty List If List is empty (i.e. []), the variable specified in the Index property is set to -1.\nNo items matching Value, or Occurrence is not present If List does not contain items matching the specified Value or the specified Occurrence is not present, the variable specified in the Index property is set to -1.\nOccurrence is zero If the Occurrence is set to 0, the variable specified in the Index property is set to -1.\nDefining lists using literal syntax For information about how to define lists using literal syntax, see List Literals.\nDefining lists using expression syntax For information about how to define lists using expression syntax, see List Expressions.\nLists containing items of a single data type vs multiple data types For information about the different types of lists, including those that can contain only a single type of item, and those that can contain multiple types of item, see Lists.\n","categories":"","description":"Gets the index of the specified occurrence of an item in a List matching a value.","excerpt":"Gets the index of the specified occurrence of an item in a List matching a value.","ref":"/docs/reference/blocks/lists/get-index/get-index-of-item-with-value-block-2/","tags":"","title":"Get Index Of Item With Value"},{"body":"\r\rGet Index Of Text (Cortex.Blocks.Text.GetIndex.GetIndexOfTextBlock)\nDescription Gets the Index of the specified Occurrence of Text To Find in Text.\nSearch Options can be specified to choose whether to use a ContainsText, PatternMatching or Regex search to find the Text To Find.\nExamples Get the Index of the first Occurrence of Text To Find (Ordinal) This example will get the index of the first occurrence of \"The\" in \"The quick brown fox jumps over the lazy dog\".\nIt performs a case-sensitive, culture-insensitive comparison of text.\nProperties    Property Value Notes     Text ($)Text, with value \"The quick brown fox jumps over the lazy dog\" ($)Text is a variable of type String   Text To Find ($)TextToFind, with value \"The\" ($)TextToFind is a variable of type String   Occurrence ($)Occurrence, with value 1 ($)Occurrence is a variable of type Int32   Search Options ($)SearchOptions, with value SearchOptions.ContainsText ($)SearchOptions is a variable of type SearchOptions   Comparison Type ($)ComparisonType, with value StringComparison.Ordinal ($)ComparisonType is a variable of type StringComparison   Index ($)Index, with no value ($)Index is a variable that will be set to an Int32 value    Result An Occurrence of 1 means get the index of the first occurrence; 2 means second etc.\nAs this example is performing a case-sensitive, culture-insensitive comparison of text, \"The quick brown fox jumps over the lazy dog\" only contains the text \"The\" once; \"the\" has a different case so does not match. Therefore, the variable ($)Index will be updated to the following:\n0 where 0 indicates the index of the first character of the first and only occurrence matching \"The\".\n Get the Index of the last Occurrence of Text To Find (Ordinal Ignore Case) This example will get the index of the last occurrence of \"The\" in \"The quick brown fox jumps over the lazy dog\".\nIt performs a case-insensitive, culture-insensitive comparison of text.\nProperties    Property Value Notes     Text ($)Text, with value \"The quick brown fox jumps over the lazy dog\" ($)Text is a variable of type String   Text To Find ($)TextToFind, with value \"The\" ($)TextToFind is a variable of type String   Occurrence ($)Occurrence, with value -1 ($)Occurrence is a variable of type Int32   Search Options ($)SearchOptions, with value SearchOptions.ContainsText ($)SearchOptions is a variable of type SearchOptions   Comparison Type ($)ComparisonType, with value StringComparison.OrdinalIgnoreCase ($)ComparisonType is a variable of type StringComparison   Index ($)Index, with no value ($)Index is a variable that will be set to an Int32 value    Result An Occurrence of -1 means get the index of the last occurrence; 2 means second last etc.\nAs this example is performing a case-insensitive, culture-insensitive comparison of text, \"The quick brown fox jumps over the lazy dog\" contains the text \"The\" twice; the first occurrence is \"The\" and the second and last occurrence is \"the\". Therefore, the variable ($)Index will be updated to the following:\n31 where 31 indicates the index of the first character of the last matching occurrence, \"the\".\n Text does not contain Text To Find This example will attempt to get the index of the first occurrence of \"slow\" in \"The quick brown fox jumps over the lazy dog\".\nIt performs a case-sensitive, culture-insensitive comparison of text.\nProperties    Property Value Notes     Text ($)Text, with value \"The quick brown fox jumps over the lazy dog\" ($)Text is a variable of type String   Text To Find ($)TextToFind, with value \"slow\" ($)TextToFind is a variable of type String   Occurrence ($)Occurrence, with value 1 ($)Occurrence is a variable of type Int32   Search Options ($)SearchOptions, with value SearchOptions.ContainsText ($)SearchOptions is a variable of type SearchOptions   Comparison Type ($)ComparisonType, with value StringComparison.Ordinal ($)ComparisonType is a variable of type StringComparison   Index ($)Index, with no value ($)Index is a variable that will be set to an Int32 value    Result \"The quick brown fox jumps over the lazy dog\" does not contain the text \"slow\", so the index cannot be found. Therefore, the variable ($)Index will be updated to the following:\n-1 where -1 indicates that there are no matching occurrences.\n Get the Index of the first Occurrence matching the pattern in Text To Find This example will get the index of the first occurrence of text matching the pattern \"?he\" from \"The quick brown fox jumps over the lazy dog\".\nIt performs a case-sensitive, culture-insensitive comparison of text.\nProperties    Property Value Notes     Text ($)Text, with value \"The quick brown fox jumps over the lazy dog\" ($)Text is a variable of type String   Text To Find ($)TextToFind, with value \"?he\" ($)TextToFind is a variable of type String   Occurrence ($)Occurrence, with value 1 ($)Occurrence is a variable of type Int32   Search Options ($)SearchOptions, with value SearchOptions.PatternMatching ($)SearchOptions is a variable of type SearchOptions   Comparison Type ($)ComparisonType, with value StringComparison.Ordinal ($)ComparisonType is a variable of type StringComparison   Index ($)Index, with no value ($)Index is a variable that will be set to an Int32 value    Result An Occurrence of 1 means get the index of the first occurrence; 2 means second etc.\n\"The quick brown fox jumps over the lazy dog\" contains two occurrences that match the pattern \"?he\"; the first occurrence is \"The\" and the second occurrence is \"the\". Therefore, the variable ($)Index will be updated to the following:\n0 where 0 indicates the index of the first character of the first occurrence matching the pattern \"?he\".\n Get the Index of the last Occurrence matching the regex in Text To Remove This example will get the index of the last occurrence of text matching the regex \"(fox|dog)\" from \"The quick brown fox jumps over the lazy dog\".\nIt performs a case-sensitive, culture-insensitive comparison of text.\nProperties    Property Value Notes     Text ($)Text, with value \"The quick brown fox jumps over the lazy dog\" ($)Text is a variable of type String   Text To Find ($)TextToFind, with value \"(fox|dog)\" ($)TextToFind is a variable of type String   Occurrence ($)Occurrence, with value -1 ($)Occurrence is a variable of type Int32   Search Options ($)SearchOptions, with value SearchOptions.Regex ($)SearchOptions is a variable of type SearchOptions   Comparison Type ($)ComparisonType, with value StringComparison.Ordinal ($)ComparisonType is a variable of type StringComparison   Index ($)Index, with no value ($)Index is a variable that will be set to an Int32 value    Result An Occurrence of -1 means get the index of the last occurrence; 2 means second last etc.\n\"The quick brown fox jumps over the lazy dog\" contains two occurrences that match the regex \"(fox|dog)\"; the first occurrence is \"fox\" and the second and last occurrence is \"dog\". Therefore, the variable ($)Index will be updated to the following:\n40 where 0 indicates the index of the first character of the last occurrence matching the regex \"(fox|dog)\".\n Properties Text The Text to get the Index of the specified Occurrence of Text To Find from.\n         Data Type String   Property Type Input   Default Value ($)Text with value \"\"    Text To Find The Text To Find the Index of the specified Occurrence of, in Text.\n         Data Type String   Property Type Input   Default Value ($)TextToFind with value \"\"    Occurrence The specified Occurrence of Text To Find in Text.\nFor information about supported values for the Occurrence property and examples of how it can be used, please see Occurrences.\n         Data Type Int32   Property Type Input   Default Value ($)Occurrence with value 1    Search Options Search Options can be specified to choose whether Text To Find should be interpreted as a ContainsText, PatternMatching or Regex search:\n SearchOptions.ContainsText matches text exactly; as long as the Text contains the text specified in Text To Find it will be considered a match. SearchOptions.PatternMatching allows wildcard text matching using Pattern Matching Syntax:  * wildcard character can be used to match 0 or more characters. ? wildcard character can be used to match 0 or 1 character. All other characters are treated as a literal character.   SearchOptions.Regex allows regex text matching using .Net Regex Syntax.  Please note that with SearchOptions.ContainsText overlapping matches are detected (e.g. searching for \"aa\" in \"aaa\" matches \"aa\" at index 0 and \"aa\" at index 1). With SearchOptions.Regex only \"aa\" at index 0 will be matched.\n         Data Type SearchOptions   Property Type Input   Default Value ($)SearchOptions with value SearchOptions.ContainsText    Comparison Type The Comparison Type specifying the rules used to match Text To Find in Text.\nFor information about the supported values for the Comparison Type property and examples of how it is determined whether two pieces of text match, please see Text Equality.\n         Data Type StringComparison   Property Type Input   Default Value ($)ComparisonType with value StringComparison.Ordinal    Index Int32 indicating the Index of the first character of the specified Occurrence of Text To Find in Text.\nIf there is no specified Occurrence of Text To Find in Text, the specified variable will be set to -1.\nFor information about what an index is, please see Indexes.\n         Data Type Int32   Property Type Output   Default Value ($)Index with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     ArgumentException Thrown when Comparison Type is not one of the specified StringComparison types (e.g. (StringComparison)10).    Thrown when Search Options is not one of the specified SearchOptions types (e.g. (SearchOptions)10).   RegexMatchTimeoutException Thrown when Search Options is either SearchOptions.Regex or SearchOptions.PatternMatching and the execution time of the search exceeds 30 seconds.   RegexParsingFailedException Thrown when Search Options is SearchOptions.Regex and Text To Find is not a valid regex (e.g. ().    Remarks Comparison Types For information about the supported values for the Comparison Type property and examples of how it is determined whether two pieces of text match, please see Text Equality.\nNull or empty Text If Text is null or empty (i.e. \"\"), the variable specified in the Index property is set to -1.\nNull or empty Text To Find If Text To Find is null or empty (i.e. \"\"), the variable specified in the Index property is set to -1.\nOccurrence is zero If the Occurrence is set to 0, the variable specified in the Index property is set to -1.\nOccurrence of Text To Find not found If the specified Occurrence of Text To Find is not found in Text, the variable specified in the Index property is set to -1.\nKnown Limitations If Search Options is set to SearchOptions.Regex or SearchOptions.PatternMatching and Comparison Type is set to StringComparison.CurrentCulture, some characters such as æ that is equivalent to ae may not evaluate as equal.\n","categories":"","description":"Gets the index of the specified occurrence of a text in another text.","excerpt":"Gets the index of the specified occurrence of a text in another text.","ref":"/docs/reference/blocks/text/get-index/get-index-of-text-block/","tags":"","title":"Get Index Of Text"},{"body":"","categories":"","description":"Get the index of an item or indexes of multiple items contained in a list.","excerpt":"Get the index of an item or indexes of multiple items contained in a list.","ref":"/docs/reference/blocks/lists/get-index/","tags":"","title":"Get Index(es) of Items"},{"body":"","categories":"","description":"Get the index for the specified occurrence of text, or the indexes of all occurrences of text contained in another text.","excerpt":"Get the index for the specified occurrence of text, or the indexes of all occurrences of text contained in another text.","ref":"/docs/reference/blocks/text/get-index/","tags":"","title":"Get Index(es) of Text"},{"body":"\r\rGet Indexes Of Items With Value (Cortex.Blocks.Lists.GetIndex.GetIndexesOfItemsWithValueBlock`2)\nDescription Gets the Indexes of all items in a List matching a Value.\nExamples Get the Indexes of all items in a List matching a Value This example will attempt to get the indexes of all items matching the value 1 from [1, 2, 3, 3, 2, 1].\nProperties    Property Value Notes     List ($)List, with value [1, 2, 3, 3, 2, 1] ($)List is a variable of type IList\u003cInt32\u003e   Value ($)Value, with value 1 ($)Value is a variable of type Int32   Indexes ($)Indexes, with no value ($)Indexes is a variable that will be set to an IList\u003cInt32\u003e value    Result Attempting to get the indexes of all items matching the value 1 from [1, 2, 3, 3, 2, 1] results in the variable ($)Indexes being updated to the following:\n[0, 5]  Properties List The List to get the Indexes of matching items from.\nItems are considered matching if they have the specified Value.\nList can be any IList\u003cTItem\u003e, where TItem represents the type of items in the List.\n         Data Type IList\u003cTItem\u003e   Property Type Input   Default Value ($)List with value []    Value The Value the items to get the Indexes of must match.\nFor information and examples of how it is determined whether an item matches a specified value, please see Object Equality.\n         Data Type TItem   Property Type Input   Default Value ($)Value with value null    Indexes IList\u003cInt32\u003e containing the Indexes of items matching Value in List.\nIf there are no items matching Value in List, the specified variable will be set to [-1].\nFor information about what an index is, please see Indexes.\n         Data Type IList\u003cInt32\u003e   Property Type Output   Default Value ($)Index with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     InvalidPropertyValueException Thrown when Value is null and List only accepts non-nullable value types.   PropertyNullException Thrown when List is null.    Remarks Item Equality For information and examples of how it is determined whether an item matches a specified value, please see Object Equality.\nEmpty List If List is empty (i.e. []), the variable specified in the Indexes property is set to [-1].\nNo items matching Value If List does not contain items matching the specified Value, the variable specified in the Indexes property is set to [-1].\nDefining lists using literal syntax For information about how to define lists using literal syntax, see List Literals.\nDefining lists using expression syntax For information about how to define lists using expression syntax, see List Expressions.\nLists containing items of a single data type vs multiple data types For information about the different types of lists, including those that can contain only a single type of item, and those that can contain multiple types of item, see Lists.\n","categories":"","description":"Gets the indexes of all items in a List matching a value.","excerpt":"Gets the indexes of all items in a List matching a value.","ref":"/docs/reference/blocks/lists/get-index/get-indexes-of-items-with-value-block-2/","tags":"","title":"Get Indexes Of Items With Value"},{"body":"\r\rGet Indexes Of Text (Cortex.Blocks.Text.GetIndex.GetIndexesOfTextBlock)\nDescription Gets the Indexes of all occurrences of Text To Find in Text.\nSearch Options can be specified to choose whether to use a ContainsText, PatternMatching or Regex search to find the Text To Find.\nExamples Get Indexes of all occurrences of Text To Find (Ordinal) This example will get the indexes of all occurrences of \"The\" in \"The quick brown fox jumps over the lazy dog\".\nIt performs a case-sensitive, culture-insensitive comparison of text.\nProperties    Property Value Notes     Text ($)Text, with value \"The quick brown fox jumps over the lazy dog\" ($)Text is a variable of type String   Text To Find ($)TextToFind, with value \"The\" ($)TextToFind is a variable of type String   Search Options ($)SearchOptions, with value SearchOptions.ContainsText ($)SearchOptions is a variable of type SearchOptions   Comparison Type ($)ComparisonType, with value StringComparison.Ordinal ($)ComparisonType is a variable of type StringComparison   Indexes ($)Indexes, with no value ($)Indexes is a variable that will be set to an IList\u003cInt32\u003e value    Result As this example is performing a case-sensitive, culture-insensitive comparison of text, \"The quick brown fox jumps over the lazy dog\" only contains the text \"The\" once; \"the\" has a different case so does not match. Therefore, the variable ($)Indexes will be updated to the following:\n[0] where 0 indicates the index of the first character of the matching \"The\" occurrence.\n Get Indexes of all occurrences of Text To Find (Ordinal Ignore Case) This example will get the indexes of all occurrences of \"The\" in \"The quick brown fox jumps over the lazy dog\".\nIt performs a case-insensitive, culture-insensitive comparison of text.\nProperties    Property Value Notes     Text ($)Text, with value \"The quick brown fox jumps over the lazy dog\" ($)Text is a variable of type String   Text To Find ($)TextToFind, with value \"The\" ($)TextToFind is a variable of type String   Search Options ($)SearchOptions, with value SearchOptions.ContainsText ($)SearchOptions is a variable of type SearchOptions   Comparison Type ($)ComparisonType, with value StringComparison.OrdinalIgnoreCase ($)ComparisonType is a variable of type StringComparison   Indexes ($)Indexes, with no value ($)Indexes is a variable that will be set to an IList\u003cInt32\u003e value    Result As this example is performing a case-insensitive, culture-insensitive comparison of text, \"The quick brown fox jumps over the lazy dog\" contains the text \"The\" twice; the first occurrence is \"The\" and the second occurrence is \"the\". Therefore, the variable ($)Indexes will be updated to the following:\n[0, 31] where 0 indicates the index of the first character of the matching \"The\" occurrence, and 31 indicates the index of the first character of the matching \"the\" occurrence.\n Text does not contain Text To Find This example will attempt to get the indexes of all occurrences of \"slow\" in \"The quick brown fox jumps over the lazy dog\".\nIt performs a case-sensitive, culture-insensitive comparison of text.\nProperties    Property Value Notes     Text ($)Text, with value \"The quick brown fox jumps over the lazy dog\" ($)Text is a variable of type String   Text To Find ($)TextToFind, with value \"slow\" ($)TextToFind is a variable of type String   Search Options ($)SearchOptions, with value SearchOptions.ContainsText ($)SearchOptions is a variable of type SearchOptions   Comparison Type ($)ComparisonType, with value StringComparison.Ordinal ($)ComparisonType is a variable of type StringComparison   Indexes ($)Indexes, with no value ($)Indexes is a variable that will be set to an IList\u003cInt32\u003e value    Result \"The quick brown fox jumps over the lazy dog\" does not contain the text \"slow\", so the index cannot be found. Therefore, the variable ($)Indexes will be updated to the following:\n[-1] where -1 indicates that there are no matching occurrences.\n Get Indexes of all occurrences matching the pattern in Text To Find This example will get the indexes of all occurrences of text matching the pattern \"?he\" from \"The quick brown fox jumps over the lazy dog\".\nIt performs a case-sensitive, culture-insensitive comparison of text.\nProperties    Property Value Notes     Text ($)Text, with value \"The quick brown fox jumps over the lazy dog\" ($)Text is a variable of type String   Text To Find ($)TextToFind, with value \"?he\" ($)TextToFind is a variable of type String   Search Options ($)SearchOptions, with value SearchOptions.PatternMatching ($)SearchOptions is a variable of type SearchOptions   Comparison Type ($)ComparisonType, with value StringComparison.Ordinal ($)ComparisonType is a variable of type StringComparison   Indexes ($)Indexes, with no value ($)Indexes is a variable that will be set to an IList\u003cInt32\u003e value    Result \"The quick brown fox jumps over the lazy dog\" contains two occurrences that match the pattern \"?he\"; the first occurrence is \"The\" and the second occurrence is \"the\". Therefore, the variable ($)Indexes will be updated to the following:\n[0, 31] where 0 indicates the index of the first character of the matching \"The\" occurrence, and 31 indicates the index of the first character of the matching \"the\" occurrence.\n Get Indexes of all occurrences matching the regex in Text To Remove This example will get the indexes of all occurrences of text matching the regex \"(fox|dog)\" from \"The quick brown fox jumps over the lazy dog\".\nIt performs a case-sensitive, culture-insensitive comparison of text.\nProperties    Property Value Notes     Text ($)Text, with value \"The quick brown fox jumps over the lazy dog\" ($)Text is a variable of type String   Text To Find ($)TextToFind, with value \"(fox|dog)\" ($)TextToFind is a variable of type String   Search Options ($)SearchOptions, with value SearchOptions.Regex ($)SearchOptions is a variable of type SearchOptions   Comparison Type ($)ComparisonType, with value StringComparison.Ordinal ($)ComparisonType is a variable of type StringComparison   Indexes ($)Indexes, with no value ($)Indexes is a variable that will be set to an IList\u003cInt32\u003e value    Result \"The quick brown fox jumps over the lazy dog\" contains two occurrences that match the regex \"(fox|dog)\"; the first occurrence is \"fox\" and the second and last occurrence is \"dog\". Therefore, the variable ($)Indexes will be updated to the following:\n[16, 40] where 16 indicates the index of the first character of the matching \"fox\" occurrence, and 40 indicates the index of the first character of the matching \"dog\" occurrence.\n Properties Text The Text to get the Indexes of all occurrences of Text To Find from.\n         Data Type String   Property Type Input   Default Value ($)Text with value \"\"    Text To Find The Text To Find the Indexes of all occurrences of, in Text.\n         Data Type String   Property Type Input   Default Value ($)TextToFind with value \"\"    Search Options Search Options can be specified to choose whether Text To Find should be interpreted as a ContainsText, PatternMatching or Regex search:\n SearchOptions.ContainsText matches text exactly; as long as the Text contains the text specified in Text To Find it will be considered a match. SearchOptions.PatternMatching allows wildcard text matching using Pattern Matching Syntax:  * wildcard character can be used to match 0 or more characters. ? wildcard character can be used to match 0 or 1 character. All other characters are treated as a literal character.   SearchOptions.Regex allows regex text matching using .Net Regex Syntax.  Please note that with SearchOptions.ContainsText overlapping matches are detected (e.g. searching for \"aa\" in \"aaa\" matches \"aa\" at index 0 and \"aa\" at index 1). With SearchOptions.Regex only \"aa\" at index 0 will be matched.\n         Data Type SearchOptions   Property Type Input   Default Value ($)SearchOptions with value SearchOptions.ContainsText    Comparison Type The Comparison Type specifying the rules used to match Text To Find in Text.\nFor information about the supported values for the Comparison Type property and examples of how it is determined whether two pieces of text match, please see Text Equality.\n         Data Type StringComparison   Property Type Input   Default Value ($)ComparisonType with value StringComparison.Ordinal    Indexes IList\u003cInt32\u003e containing the Indexes of the first character of each occurrence of Text To Find in Text.\nIf there are no occurrences of Text To Find in Text, the specified variable will be set to [-1].\nFor information about what an index is, please see Indexes.\n         Data Type IList\u003cInt32\u003e   Property Type Output   Default Value ($)Indexes with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     ArgumentException Thrown when Comparison Type is not one of the specified StringComparison types (e.g. (StringComparison)10).    Thrown when Search Options is not one of the specified SearchOptions types (e.g. (SearchOptions)10).   RegexMatchTimeoutException Thrown when Search Options is either SearchOptions.Regex or SearchOptions.PatternMatching and the execution time of the search exceeds 30 seconds.   RegexParsingFailedException Thrown when Search Options is SearchOptions.Regex and Text To Find is not a valid regex (e.g. ().    Remarks Comparison Types For information about the supported values for the Comparison Type property and examples of how it is determined whether two pieces of text match, please see Text Equality.\nNull or empty Text If Text is null or empty (i.e. \"\"), the variable specified in the Indexes property is set to [-1].\nNull or empty Text To Find If Text To Find is null or empty (i.e. \"\"), the variable specified in the Indexes property is set to [-1].\nText To Find not found If Text To Find is not found in Text, the variable specified in the Indexes property is set to [-1].\nKnown Limitations If Search Options is set to SearchOptions.Regex or SearchOptions.PatternMatching and Comparison Type is set to StringComparison.CurrentCulture, some characters such as æ that is equivalent to ae may not evaluate as equal.\n","categories":"","description":"Gets the indexes of all occurrences of a text in another text.","excerpt":"Gets the indexes of all occurrences of a text in another text.","ref":"/docs/reference/blocks/text/get-index/get-indexes-of-text-block/","tags":"","title":"Get Indexes Of Text"},{"body":"\r\rGet Item At Beginning (Cortex.Blocks.Lists.GetItem.GetItemAtBeginningBlock`2)\nDescription Gets the Item at the beginning of a List.\nExamples Get the Item at the beginning of a List This example will get the item at the beginning of [\"Some Text\", 1].\nProperties    Property Value Notes     List ($)List, with value [\"Some Text\", 1] ($)List is a variable of type IList\u003cdynamic\u003e   Item ($)Item, with no value ($)Item is a variable that will be set to the type of the item (i.e. String)    Result Getting the item at the beginning of [\"Some Text\", 1] results in the variable ($)Item being updated to the following:\n\"Some Text\"  Properties List The List to get the item from.\nList can be any IList\u003cTItem\u003e, where TItem represents the type of items in the List.\n         Data Type IList\u003cTItem\u003e   Property Type Input   Default Value ($)List with value []    Item The Item at the beginning of List.\n         Data Type TItem   Property Type Output   Default Value ($)Item with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     PropertyEmptyException Thrown when List contains no items.   PropertyNullException Thrown when List is null.    Remarks Defining lists using literal syntax For information about how to define lists using literal syntax, see List Literals.\nDefining lists using expression syntax For information about how to define lists using expression syntax, see List Expressions.\nLists containing items of a single data type vs multiple data types For information about the different types of lists, including those that can contain only a single type of item, and those that can contain multiple types of item, see Lists.\n","categories":"","description":"Gets the item at the beginning of a List.","excerpt":"Gets the item at the beginning of a List.","ref":"/docs/reference/blocks/lists/get-item/get-item-at-beginning-block-2/","tags":"","title":"Get Item At Beginning"},{"body":"\r\rGet Item At End (Cortex.Blocks.Lists.GetItem.GetItemAtEndBlock`2)\nDescription Gets the Item at the end of a List.\nExamples Get the Item at the end of a List This example will get the item at the end of [\"Some Text\", 1].\nProperties    Property Value Notes     List ($)List, with value [\"Some Text\", 1] ($)List is a variable of type IList\u003cdynamic\u003e   Item ($)Item, with no value ($)Item is a variable that will be set to the type of the item (i.e. Int32)    Result Getting the item at the end of [\"Some Text\", 1] results in the variable ($)Item being updated to the following:\n1  Properties List The List to get the item from.\nList can be any IList\u003cTItem\u003e, where TItem represents the type of items in the List.\n         Data Type IList\u003cTItem\u003e   Property Type Input   Default Value ($)List with value []    Item The Item at the end of List.\n         Data Type TItem   Property Type Output   Default Value ($)Item with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     PropertyEmptyException Thrown when List contains no items.   PropertyNullException Thrown when List is null.    Remarks Defining lists using literal syntax For information about how to define lists using literal syntax, see List Literals.\nDefining lists using expression syntax For information about how to define lists using expression syntax, see List Expressions.\nLists containing items of a single data type vs multiple data types For information about the different types of lists, including those that can contain only a single type of item, and those that can contain multiple types of item, see Lists.\n","categories":"","description":"Gets the item at the end of a List.","excerpt":"Gets the item at the end of a List.","ref":"/docs/reference/blocks/lists/get-item/get-item-at-end-block-2/","tags":"","title":"Get Item At End"},{"body":"\r\rGet Item At Index (Cortex.Blocks.Lists.GetItem.GetItemAtIndexBlock`2)\nDescription Gets the Item at the specified Index of a List.\nExamples Get the Item at the first Index (i.e. 0) of a List This example will get the item at index 0 of [\"Some Text\", 1].\nProperties    Property Value Notes     List ($)List, with value [\"Some Text\", 1] ($)List is a variable of type IList\u003cdynamic\u003e   Index ($)Index, with value 0 ($)Index is a variable of type Int32   Item ($)Item, with no value ($)Item is a variable that will be set to the type of the item (i.e. String)    Result Getting the item at index 0 of [\"Some Text\", 1] results in the variable ($)Item being updated to the following:\n\"Some Text\"  Get the Item at the last Index (i.e. Index equals count of items - 1) of a List This example will get the item at index 1 of [\"Some Text\", 1].\nProperties    Property Value Notes     List ($)List, with value [\"Some Text\", 1] ($)List is a variable of type IList\u003cdynamic\u003e   Index ($)Index, with value 1 ($)Index is a variable of type Int32   Item ($)Item, with no value ($)Item is a variable that will be set to the type of the item (i.e. Int32)    Result Getting the item at index 1 of [\"Some Text\", 1] results in the variable ($)Item being updated to the following:\n1  Properties List The List to get the item from.\nList can be any IList\u003cTItem\u003e, where TItem represents the type of items in the List.\n         Data Type IList\u003cTItem\u003e   Property Type Input   Default Value ($)List with value []    Index The Index to get the item at.\nValid values are between and including 0 and the total count of items in the List - 1.\nFor information about what an index is, please see Indexes.\n         Data Type Int32   Property Type Input   Default Value ($)Index with value 0    Item The Item at the specified Index of List.\n         Data Type TItem   Property Type Output   Default Value ($)Item with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     PropertyNullException Thrown when List is null.   PropertyValueOutOfRangeException Thrown when List contains no items.    Thrown when Index is out of the range of the list indexes. Valid indexes are between and including 0 and the count of items in the List - 1.    Remarks Defining lists using literal syntax For information about how to define lists using literal syntax, see List Literals.\nDefining lists using expression syntax For information about how to define lists using expression syntax, see List Expressions.\nLists containing items of a single data type vs multiple data types For information about the different types of lists, including those that can contain only a single type of item, and those that can contain multiple types of item, see Lists.\n","categories":"","description":"Gets the item at the specified index of a List.","excerpt":"Gets the item at the specified index of a List.","ref":"/docs/reference/blocks/lists/get-item/get-item-at-index-block-2/","tags":"","title":"Get Item At Index"},{"body":"\r\rGet Item With Key (Cortex.Blocks.Dictionaries.GetItem.GetItemWithKeyBlock`3)\nDescription Gets the specified Occurrence of an Item with the given Key from a Dictionary.\nExamples Get the first Occurrence of an Item with a Key from a Dictionary This example will attempt to get the first occurrence of an item with the key \"Key1\" from {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1}.\nProperties    Property Value Notes     Dictionary ($)Dictionary, with value {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} ($)Dictionary is a variable of type IDictionary\u003cString, Int32\u003e   Key ($)Key, with value \"Key1\" ($)Key is a variable of type String   Occurrence ($)Occurrence, with value 1 ($)Occurrence is a variable of type Int32   Item ($)Item, with no value ($)Item is a variable that will be set to the type of the item (i.e. Int32)    Result An Occurrence of 1 means get the first occurrence; 2 means second etc.\nAttempting to get the first occurrence of an item with the key \"Key1\" from {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} results in the variable ($)Item being updated to the following:\n1  Get the last Occurrence of an Item with a Key from a Dictionary Typically keys are simple data types such as String, Int32, Boolean, and for these a dictionary cannot the same key value more than once. This is due to how the data type’s object equality is implemented (two items are considered equal if they have the same value rather than being the same object reference).\nHowever, other data types such as IList\u003cInt32\u003e can also be used as keys. For these data types, object equality only considers two items equal if they are the same reference; it does not care about whether they have the same value. Therefore, it is possible to have the same key value more than once, and as a result you should be able to get an occurrence of item with that key.\nThis example will illustrate this, by attempting to get the last occurrence of an item with the key [1] from {[1] : 1, [2] : 2, [3] : 3, [3] : 3, [2] : 2, [1] : 10}.\nProperties    Property Value Notes     Dictionary ($)Dictionary, with value {[1] : 1, [2] : 2, [3] : 3, [3] : 3, [2] : 2, [1] : 10} ($)Dictionary is a variable of type IDictionary\u003cIList\u003cInt32\u003e, Int32\u003e   Key ($)Key, with value [1] ($)Key is a variable of type IList\u003cInt32\u003e   Occurrence ($)Occurrence, with value -1 ($)Occurrence is a variable of type Int32   Item ($)Item, with no value ($)Item is a variable that will be set to the type of the item (i.e. Int32)    Result An Occurrence of -1 means get the last occurrence; -2 means second last etc.\nAttempting to get the last occurrence of an item with the key [1] from {[1] : 1, [2] : 2, [3] : 3, [3] : 3, [2] : 2, [1] : 10} results in the variable ($)Item being updated to the following:\n10  Properties Dictionary The Dictionary to get the specified Occurrence of Item with the given Key from.\nDictionary can be any IDictionary\u003cTKey, TItem\u003e, where TKey represents the type of keys used to lookup items in the Dictionary, and TItem represents the type of items in the Dictionary.\n         Data Type IDictionary\u003cTKey, TItem\u003e   Property Type Input   Default Value ($)Dictionary with value {}    Key The Key the Item to get must have.\nFor information and examples of how it is determined whether an item has a specified key, please see Object Equality.\nFor information about what a key is, please see Keys.\n         Data Type TKey   Property Type Input   Default Value ($)Key with value null    Occurrence The Occurrence of matching Item to get from the Dictionary.\nItems are considered matching if they have the specified Key.\nUnlike lists, dictionaries do not have a defined order. This means the nth occurrence is determined by the underlying Microsoft .Net implementation; this is not published and could change if the algorithm were to change.\nFor information about supported values for the Occurrence property and examples of how it can be used, please see Occurrences.\n         Data Type Int32   Property Type Input   Default Value ($)Occurrence with value 1    Item The specified Occurrence of Item with the given Key from Dictionary.\n         Data Type TItem   Property Type Output   Default Value ($)Item with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     KeyNotPresentException Thrown when the Key is not present in the Dictionary.   OccurrenceNotPresentException Thrown when the specified Occurrence of Item with the given Key is not present in the Dictionary.   PropertyNullException Thrown when Dictionary or Key are null.    Remarks Key Equality For information and examples of how it is determined whether a key is already present, please see Object Equality.\nOccurrences Unlike lists, dictionaries do not have a defined order. This means the nth occurrence is determined by the underlying Microsoft .Net implementation; this is not published and could change if the algorithm were to change.\nFor information about supported values for the Occurrence property and examples of how it can be used, please see Occurrences.\nDefining dictionaries using literal syntax For information about how to define dictionaries using literal syntax, see Dictionary Literals.\nDefining dictionaries using expression syntax For information about how to define dictionaries using expression syntax, see Dictionary Expressions.\nDictionaries containing items with same data types vs different data types For information about the different types of dictionaries, including those that can contain only the same type of item, and those that can contain different types of item, see Dictionaries.\n","categories":"","description":"Gets the specified occurrence of an item with the given key from a Dictionary.","excerpt":"Gets the specified occurrence of an item with the given key from a Dictionary.","ref":"/docs/reference/blocks/dictionaries/get-item/get-item-with-key-block-3/","tags":"","title":"Get Item With Key"},{"body":"","categories":"","description":"Get an item or multiple items from a dictionary.","excerpt":"Get an item or multiple items from a dictionary.","ref":"/docs/reference/blocks/dictionaries/get-item/","tags":"","title":"Get Item(s)"},{"body":"","categories":"","description":"Get an item or multiple items from a list.","excerpt":"Get an item or multiple items from a list.","ref":"/docs/reference/blocks/lists/get-item/","tags":"","title":"Get Item(s)"},{"body":"\r\rGet Items At Beginning (Cortex.Blocks.Lists.GetItem.GetItemsAtBeginningBlock`2)\nDescription Gets the specified Count of Items at the beginning of a List.\nExamples Get Count of Items at the beginning of a List This example will get 2 items at the beginning of [\"Some Text\", 1, \"Some More Text\", 2].\nProperties    Property Value Notes     List ($)List, with value [\"Some Text\", 1, \"Some More Text\", 2] ($)List is a variable of type IList\u003cdynamic\u003e   Count ($)Count, with value 2 ($)Count is a variable of type Int32   Items ($)Items, with no value ($)Items is a variable that will be set to an IList\u003cdynamic\u003e value    Result Getting 2 items from the beginning of [\"Some Text\", 1, \"Some More Text\", 2] results in the variable ($)Items being updated to the following:\n[\"Some Text\", 1]  Properties List The List to get the Items from.\nList can be any IList\u003cTItem\u003e, where TItem represents the type of items in the List.\n         Data Type IList\u003cTItem\u003e   Property Type Input   Default Value ($)List with value []    Count The Count of Items to get.\n         Data Type Int32   Property Type Input   Default Value ($)Count with value 0    Items The Items at the beginning of List.\nItems will be in the same order they are defined in List.\n         Data Type IList\u003cTItem\u003e   Property Type Output   Default Value ($)Items with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     PropertyNullException Thrown when List is null.   PropertyValueOutOfRangeException Thrown when Count is greater than the count of items in the List - 1.    Remarks Negative Count If Count is negative, Items contains all items in the List.\nZero Count If Count is 0, Items is set to an empty list (i.e. []).\nDefining lists using literal syntax For information about how to define lists using literal syntax, see List Literals.\nDefining lists using expression syntax For information about how to define lists using expression syntax, see List Expressions.\nLists containing items of a single data type vs multiple data types For information about the different types of lists, including those that can contain only a single type of item, and those that can contain multiple types of item, see Lists.\n","categories":"","description":"Gets a count of items at the beginning of a List.","excerpt":"Gets a count of items at the beginning of a List.","ref":"/docs/reference/blocks/lists/get-item/get-items-at-beginning-block-2/","tags":"","title":"Get Items At Beginning"},{"body":"\r\rGet Items At End (Cortex.Blocks.Lists.GetItem.GetItemsAtEndBlock`2)\nDescription Gets the specified Count of Items at the end of a List.\nExamples Get Count of Items at the end of a List This example will get 2 items at the end of [\"Some Text\", 1, \"Some More Text\", 2].\nProperties    Property Value Notes     List ($)List, with value [\"Some Text\", 1, \"Some More Text\", 2] ($)List is a variable of type IList\u003cdynamic\u003e   Count ($)Count, with value 2 ($)Count is a variable of type Int32   Items ($)Items, with no value ($)Items is a variable that will be set to an IList\u003cdynamic\u003e value    Result Getting 2 items from the end of [\"Some Text\", 1, \"Some More Text\", 2] results in the variable ($)Items being updated to the following:\n[\"Some More Text\", 2]  Properties List The List to get the Items from.\nList can be any IList\u003cTItem\u003e, where TItem represents the type of items in the List.\n         Data Type IList\u003cTItem\u003e   Property Type Input   Default Value ($)List with value []    Count The Count of Items to get.\n         Data Type Int32   Property Type Input   Default Value ($)Count with value 0    Items The Items at the end of List.\nItems will be in the same order they are defined in List.\n         Data Type IList\u003cTItem\u003e   Property Type Output   Default Value ($)Items with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     PropertyNullException Thrown when List is null.   PropertyValueOutOfRangeException Thrown when Count is greater than the count of items in the List - 1.    Remarks Negative Count If Count is negative, Items contains all items in the List.\nZero Count If Count is 0, Items is set to an empty list (i.e. []).\nDefining lists using literal syntax For information about how to define lists using literal syntax, see List Literals.\nDefining lists using expression syntax For information about how to define lists using expression syntax, see List Expressions.\nLists containing items of a single data type vs multiple data types For information about the different types of lists, including those that can contain only a single type of item, and those that can contain multiple types of item, see Lists.\n","categories":"","description":"Gets a count of items at the end of a List.","excerpt":"Gets a count of items at the end of a List.","ref":"/docs/reference/blocks/lists/get-item/get-items-at-end-block-2/","tags":"","title":"Get Items At End"},{"body":"\r\rGet Items At Index (Cortex.Blocks.Lists.GetItem.GetItemsAtIndexBlock`2)\nDescription Gets the specified Count of Items starting at the given Index of a List.\nExamples Get Count of Items at the first Index (i.e. 0) of a List This example will get 2 items at index 0 of [\"Some Text\", 1, \"Some More Text\", 2].\nProperties    Property Value Notes     List ($)List, with value [\"Some Text\", 1, \"Some More Text\", 2] ($)List is a variable of type IList\u003cdynamic\u003e   Index ($)Index, with value 0 ($)Index is a variable of type Int32   Count ($)Count, with value 2 ($)Count is a variable of type Int32   Items ($)Items, with no value ($)Items is a variable that will be set to an IList\u003cdynamic\u003e value    Result Getting 2 items at index 0 of [\"Some Text\", 1, \"Some More Text\", 2] results in the variable ($)Items being updated to the following:\n[\"Some More\", 1]  Properties List The List to get the Items from.\nList can be any IList\u003cTItem\u003e, where TItem represents the type of items in the List.\n         Data Type IList\u003cTItem\u003e   Property Type Input   Default Value ($)List with value []    Index The Index to get the Count of Items at. This is an inclusive index, which means the item at the specified index will be included.\nValid values are between and including 0 and the total count of items in the List - 1.\nFor information about what an index is, please see Indexes.\n         Data Type Int32   Property Type Input   Default Value ($)Index with value 0    Count The Count of Items to get.\n         Data Type Int32   Property Type Input   Default Value ($)Count with value 0    Items The Items at the specified Index of List.\nItems will be in the same order they are defined in List.\n         Data Type IList\u003cTItem\u003e   Property Type Output   Default Value ($)Items with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     PropertyNullException Thrown when List is null.   PropertyValueOutOfRangeException Thrown when Index is less than 0 or greater than the count of items in List - 1.    Thrown when Index + Count is greater than the count of items in the List - 1.    Remarks Index is inclusive The Index is an inclusive index, which means the item at the index will be included in Items.\nNegative Count If Count is negative, Items contains all items after and including the item at the specified Index in the List.\nZero Count If Count is 0, Items is set to an empty list (i.e. []).\nDefining lists using literal syntax For information about how to define lists using literal syntax, see List Literals.\nDefining lists using expression syntax For information about how to define lists using expression syntax, see List Expressions.\nLists containing items of a single data type vs multiple data types For information about the different types of lists, including those that can contain only a single type of item, and those that can contain multiple types of item, see Lists.\n","categories":"","description":"Gets a count of items starting at the specified index of a List.","excerpt":"Gets a count of items starting at the specified index of a List.","ref":"/docs/reference/blocks/lists/get-item/get-items-at-index-block-2/","tags":"","title":"Get Items At Index"},{"body":"\r\rGet Items At Indexes (Cortex.Blocks.Lists.GetItem.GetItemsAtIndexesBlock`2)\nDescription Gets the Items at each of the specified Indexes of a List.\nExamples Get Items at the first and third Indexes (i.e. [0, 2]) of a List This example will get items at indexes 0 and 2 of [\"Some Text\", 1, \"Some More Text\", 2].\nProperties    Property Value Notes     List ($)List, with value [\"Some Text\", 1, \"Some More Text\", 2] ($)List is a variable of type IList\u003cdynamic\u003e   Indexes ($)Indexes, with value [0, 2] ($)Indexes is a variable of type IEnumerable\u003cInt32\u003e   Items ($)Items, with no value ($)Items is a variable that will be set to an IList\u003cdynamic\u003e value    Result Getting items at indexes 0 and 2 of [\"Some Text\", 1, \"Some More Text\", 2] results in the variable ($)Items being updated to the following:\n[\"Some Text\", \"Some More Text\"]  Properties List The List to get the Items from.\nList can be any IList\u003cTItem\u003e, where TItem represents the type of items in the List.\n         Data Type IList\u003cTItem\u003e   Property Type Input   Default Value ($)List with value []    Indexes The Indexes of the Items to get.\nValid values are between and including 0 and the total count of items in the List - 1.\nFor information about what an index is, please see Indexes.\n         Data Type IEnumerable\u003cInt32\u003e   Property Type Input   Default Value ($)Indexes with value []    Items The Items at the specified Indexes of List.\nItems will be in the order they are defined in Indexes.\n         Data Type IList\u003cTItem\u003e   Property Type Output   Default Value ($)Items with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     DuplicateValueException Thrown when Indexes contains duplicate values.   PropertyNullException Thrown when List or Indexes is null.   PropertyValueOutOfRangeException Thrown when Indexes contains no values.    Thrown when any index in Indexes is less than 0 or greater than the count of items in List - 1.    Remarks Defining lists using literal syntax For information about how to define lists using literal syntax, see List Literals.\nDefining lists using expression syntax For information about how to define lists using expression syntax, see List Expressions.\nLists containing items of a single data type vs multiple data types For information about the different types of lists, including those that can contain only a single type of item, and those that can contain multiple types of item, see Lists.\n","categories":"","description":"Gets the items at each of the specified indexes of a List.","excerpt":"Gets the items at each of the specified indexes of a List.","ref":"/docs/reference/blocks/lists/get-item/get-items-at-indexes-block-2/","tags":"","title":"Get Items At Indexes"},{"body":"\r\rGet Items With Key (Cortex.Blocks.Dictionaries.GetItem.GetItemsWithKeyBlock`3)\nDescription Gets all Items with the given Key from a Dictionary.\nExamples Get all Items with a Key from a Dictionary Typically keys are simple data types such as String, Int32, Boolean, and for these a dictionary cannot the same key value more than once. This is due to how the data type’s object equality is implemented (two items are considered equal if they have the same value rather than being the same object reference).\nHowever, other data types such as IList\u003cInt32\u003e can also be used as keys. For these data types, object equality only considers two items equal if they are the same reference; it does not care about whether they have the same value. Therefore, it is possible to have the same key value more than once, and as a result you should be able to get all items with that key.\nThis example will illustrate this, by attempting to get all items with the key [1] from {[1] : 1, [2] : 2, [3] : 3, [3] : 3, [2] : 2, [1] : 10}.\nProperties    Property Value Notes     Dictionary ($)Dictionary, with value {[1] : 1, [2] : 2, [3] : 3, [3] : 3, [2] : 2, [1] : 10} ($)Dictionary is a variable of type IDictionary\u003cIList\u003cInt32\u003e, Int32\u003e   Key ($)Key, with value [1] ($)Key is a variable of type IList\u003cInt32\u003e   Items ($)Items, with no value ($)Items is a variable that will be set to an IList\u003cInt32\u003e    Result Attempting to get all items with the key [1] from {[1] : 1, [2] : 2, [3] : 3, [3] : 3, [2] : 2, [1] : 10} results in the variable ($)Items being updated to the following:\n[1, 10]  Properties Dictionary The Dictionary to get all Items with the given Key from.\nDictionary can be any IDictionary\u003cTKey, TItem\u003e, where TKey represents the type of keys used to lookup items in the Dictionary, and TItem represents the type of items in the Dictionary.\n         Data Type IDictionary\u003cTKey, TItem\u003e   Property Type Input   Default Value ($)Dictionary with value {}    Key The Key the Items to get must have.\nFor information and examples of how it is determined whether an item has a specified key, please see Object Equality.\nFor information about what a key is, please see Keys.\n         Data Type TKey   Property Type Input   Default Value ($)Key with value null    Items All Items with the given Key in Dictionary.\n         Data Type IList\u003cTItem\u003e   Property Type Output   Default Value ($)Items with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     KeyNotPresentException Thrown when the Key is not present in the Dictionary.   PropertyNullException Thrown when Dictionary or Key are null.    Remarks Key Equality For information and examples of how it is determined whether a key is already present, please see Object Equality.\nDefining dictionaries using literal syntax For information about how to define dictionaries using literal syntax, see Dictionary Literals.\nDefining dictionaries using expression syntax For information about how to define dictionaries using expression syntax, see Dictionary Expressions.\nDictionaries containing items with same data types vs different data types For information about the different types of dictionaries, including those that can contain only the same type of item, and those that can contain different types of item, see Dictionaries.\n","categories":"","description":"Gets all items with the given key from a Dictionary.","excerpt":"Gets all items with the given key from a Dictionary.","ref":"/docs/reference/blocks/dictionaries/get-item/get-items-with-key-block-3/","tags":"","title":"Get Items With Key"},{"body":"","categories":"","description":"Get a key or multiple keys from a dictionary.","excerpt":"Get a key or multiple keys from a dictionary.","ref":"/docs/reference/blocks/dictionaries/get-key/","tags":"","title":"Get Key(s)"},{"body":"","categories":"","description":"Get the length of a text.","excerpt":"Get the length of a text.","ref":"/docs/reference/blocks/text/get-length/","tags":"","title":"Get Length"},{"body":"\r\rGet Length (Cortex.Blocks.Text.GetLength.GetLengthBlock)\nDescription Gets the Length of a given Text.\nExamples Get the Length of a given Text This example will get the length of \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".\nProperties    Property Value Notes     Text ($)Text, with value \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" ($)Text is a variable of type String   Length ($)Length, with no value ($)Length is a variable that will be set to an Int32    Result Getting the length of \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" results in the variable ($)Length being updated to the following:\n26  Properties Text The Text to get the Length of.\n         Data Type String   Property Type Input   Default Value ($)Text with value \"\"    Length The Length of the Text (i.e. the number of characters it contains).\n         Data Type Int32   Property Type Output   Default Value ($)Length with no value    Exceptions No exceptions are thrown by the block.\nRemarks Null or empty Text If Text is null or empty (i.e. \"\") the variable specified in the Length property will be set to 0.\n","categories":"","description":"Gets the length of a given text.","excerpt":"Gets the length of a given text.","ref":"/docs/reference/blocks/text/get-length/get-length-block/","tags":"","title":"Get Length"},{"body":"","categories":"","description":"Get text from a given text.","excerpt":"Get text from a given text.","ref":"/docs/reference/blocks/text/get-text/","tags":"","title":"Get Text"},{"body":"\r\rGet Text At Beginning (Cortex.Blocks.Text.GetText.GetTextAtBeginningBlock)\nDescription Gets a Length of text from the beginning of a given Text.\nExamples Get a Length of text from the beginning of a given Text This example will get the first 3 characters from the beginning of \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".\nProperties    Property Value Notes     Text ($)Text, with value \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" ($)Text is a variable of type String   Length ($)Length, with value 3 ($)Length is a variable of type Int32   Text At Beginning ($)TextAtBeginning, with no value ($)TextAtBeginning is a variable that will be set to a String    Result Getting the first 3 characters from the beginning of \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" results in the variable ($)TextAtBeginning being updated to the following:\n\"ABC\"  Properties Text The Text to get the Text At Beginning from.\n         Data Type String   Property Type Input   Default Value ($)Text with value \"\"    Length The Length of text to get.\n         Data Type Int32   Property Type Input   Default Value ($)Length with value -1    Text At Beginning The Length of text at the beginning of Text.\n         Data Type String   Property Type Output   Default Value ($)TextAtBeginning with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     PropertyValueOutOfRangeException Thrown when Text is null or empty (i.e. \"\").    Thrown when Length is greater than the length of Text.    Remarks Negative Length If Length is negative, the variable specified in the Text At Beginning property will be set to the value of Text.\nZero Length If Length is 0, the variable specified in the Text At Beginning property will be set to empty (i.e. \"\").\n","categories":"","description":"Gets a length of text from the beginning of a given text.","excerpt":"Gets a length of text from the beginning of a given text.","ref":"/docs/reference/blocks/text/get-text/get-text-at-beginning-block/","tags":"","title":"Get Text At Beginning"},{"body":"\r\rGet Text At End (Cortex.Blocks.Text.GetText.GetTextAtEndBlock)\nDescription Gets a Length of text from the end of a given Text.\nExamples Get a Length of text from the end of a given Text This example will get the last 3 characters from the end of \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".\nProperties    Property Value Notes     Text ($)Text, with value \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" ($)Text is a variable of type String   Length ($)Length, with value 3 ($)Length is a variable of type Int32   Text At End ($)TextAtEnd, with no value ($)TextAtEnd is a variable that will be set to a String    Result Getting the last 3 characters from the end of \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" results in the variable ($)TextAtEnd being updated to the following:\n\"XYZ\"  Properties Text The Text to get the Text At End from.\n         Data Type String   Property Type Input   Default Value ($)Text with value \"\"    Length The Length of text to get.\n         Data Type Int32   Property Type Input   Default Value ($)Length with value -1    Text At End The Length of text at the end of Text.\n         Data Type String   Property Type Output   Default Value ($)TextAtEnd with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     PropertyValueOutOfRangeException Thrown when Text is null or empty (i.e. \"\").    Thrown when Length is greater than the length of Text.    Remarks Negative Length If Length is negative, the variable specified in the Text At End property will be set to the value of Text.\nZero Length If Length is 0, the variable specified in the Text At End property will be set to empty (i.e. \"\").\n","categories":"","description":"Gets a length of text from the end of a given text.","excerpt":"Gets a length of text from the end of a given text.","ref":"/docs/reference/blocks/text/get-text/get-text-at-end-block/","tags":"","title":"Get Text At End"},{"body":"\r\rGet Text At Index (Cortex.Blocks.Text.GetText.GetTextAtIndexBlock)\nDescription Gets a Length of text at the specified Index of a given Text.\nExamples Get a Length of text at the specified Index of a given Text This example will get 3 characters at index 3 of \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".\nProperties    Property Value Notes     Text ($)Text, with value \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" ($)Text is a variable of type String   Index ($)Index, with value 3 ($)Index is a variable of type Int32   Length ($)Length, with value 3 ($)Length is a variable of type Int32   Text At Index ($)TextAtIndex, with no value ($)TextAtIndex is a variable that will be set to a String    Result \"D\" is at index 3 in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\". Therefore, getting 3 characters at (and including) index 3 results in the variable ($)TextAtIndex being updated to the following:\n\"DEF\"  Properties Text The Text to get the Text At Index from.\n         Data Type String   Property Type Input   Default Value ($)Text with value \"\"    Index The Index to get the text from. This is an inclusive index, which means the character at the specified index will be included.\nFor information about what an index is, please see Indexes.\n         Data Type Int32   Property Type Input   Default Value ($)Index with value 0    Length The Length of text to get.\n         Data Type Int32   Property Type Input   Default Value ($)Length with value -1    Text At Index The Length of text at the Index of Text.\n         Data Type String   Property Type Output   Default Value ($)TextAtIndex with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     PropertyValueOutOfRangeException Thrown when Textis null or empty (i.e. \"\").    Thrown when Index is less than zero or greater than the length of Text - 1.    Thrown when Index + a positive Length is greater than the length of Text - 1.    Remarks Negative Length A negative Length can be used to get all text at and after the Index of Text.\nZero Length If Length is 0, the variable specified in the Text At Index property will be set to empty (i.e. \"\").\nIndex is inclusive The Index property is an inclusive index, which means the character at the index will be included in the retrieved text.\n","categories":"","description":"Gets a length of text at the specified index of a given text.","excerpt":"Gets a length of text at the specified index of a given text.","ref":"/docs/reference/blocks/text/get-text/get-text-at-index-block/","tags":"","title":"Get Text At Index"},{"body":"\r\rGet Text Before Index (Cortex.Blocks.Text.GetText.GetTextBeforeIndexBlock)\nDescription Gets a Length of text before the specified Index of a given Text.\nExamples Get a Length of text before the specified Index of a given Text This example will get 3 characters before index 3 of \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".\nProperties    Property Value Notes     Text ($)Text, with value \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" ($)Text is a variable of type String   Index ($)Index, with value 3 ($)Index is a variable of type Int32   Length ($)Length, with value 3 ($)Length is a variable of type Int32   Text Before Index ($)TextBeforeIndex, with no value ($)TextBeforeIndex is a variable that will be set to a String    Result \"D\" is at index 3 in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\". Therefore, getting 3 characters before index 3 results in the variable ($)TextBeforeIndex being updated to the following:\n\"ABC\"  Properties Text The Text to get the Text Before Index from.\n         Data Type String   Property Type Input   Default Value ($)Text with value \"\"    Index The Index to get the text before. This is an exclusive index, which means the character at the specified index won’t be included.\nFor information about what an index is, please see Indexes.\n         Data Type Int32   Property Type Input   Default Value ($)Index with value 0    Length The Length of text to get.\n         Data Type Int32   Property Type Input   Default Value ($)Length with value -1    Text Before Index The Length of text before the Index of Text.\n         Data Type String   Property Type Output   Default Value ($)TextBeforeIndex with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     PropertyValueOutOfRangeException Thrown when Text is null or empty (i.e. \"\").    Thrown when Index is less than 1 or greater than the length of Text - 1.    Thrown when Index - a positive Length is less than 1.    Remarks Negative Length A negative Length can be used to get all text before the Index of Text.\nZero Length If Length is 0, the variable specified in the Text Before Index property will be set to empty (i.e. \"\").\nIndex is exclusive The Index property is an exclusive index, which means the character at the index will not be included in the retrieved text.\n","categories":"","description":"Gets a length of text before the specified index of a given text.","excerpt":"Gets a length of text before the specified index of a given text.","ref":"/docs/reference/blocks/text/get-text/get-text-before-index-block/","tags":"","title":"Get Text Before Index"},{"body":"\r\rGet Text Between Indexes (Cortex.Blocks.Text.GetText.GetTextBetweenIndexesBlock)\nDescription Gets text between the specified Start Index and End Index of a given Text.\nExamples Get text between the specified Start Index and End Index of a given Text This example will get all characters between start index 0 and end index 3 of \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".\nProperties    Property Value Notes     Text ($)Text, with value \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" ($)Text is a variable of type String   Start Index ($)StartIndex, with value 0 ($)StartIndex is a variable of type Int32   End Index ($)EndIndex, with value 3 ($)EndIndex is a variable of type Int32   Text Between Indexes ($)TextBetweenIndexes, with no value ($)TextBetweenIndexes is a variable that will be set to a String    Result \"A\" is at index 0 and \"D\" is at index 3 in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\". Therefore, getting all characters between (and including) start index 0 and end index 3 results in the variable ($)TextBetweenIndexes being updated to the following:\n\"ABCD\"  Get text where Start Index is greater than End Index This example will get all characters between start index 3 and end index 0 of \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".\nProperties    Property Value Notes     Text ($)Text, with value \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" ($)Text is a variable of type String   Start Index ($)StartIndex, with value 3 ($)StartIndex is a variable of type Int32   End Index ($)EndIndex, with value 0 ($)EndIndex is a variable of type Int32   Text Between Indexes ($)TextBetweenIndexes, with no value ($)TextBetweenIndexes is a variable that will be set to a String    Result In this example the start index 3 is greater than the end index 0. When this occurs, the block simply swaps the indexes before it processes the text.\nTherefore, having start index 3 and end index 0 is the same as having start index 0 and end index 3.\n\"A\" is at index 0 and \"D\" is at index 3 in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".\nTherefore, getting all characters between (and including) start index 3 and end index 0, or start index 0 and end index 3, results in the variable ($)TextBetweenIndexes being updated to the following:\n\"ABCD\"  Properties Text The Text to get the Text Between Indexes from.\n         Data Type String   Property Type Input   Default Value ($)Text with value \"\"    Start Index The Start Index used to get the text. This is an inclusive index, which means the character at the specified index will be included.\nFor information about what an index is, please see Indexes.\n         Data Type Int32   Property Type Input   Default Value ($)StartIndex with value 0    End Index The End Index used to get the text. This is an inclusive index, which means the character at the specified index will be included.\nFor information about what an index is, please see Indexes.\n         Data Type Int32   Property Type Input   Default Value ($)EndIndex with value 0    Text Between Indexes The text between (and including) the Start Index and End Index of Text.\n         Data Type String   Property Type Output   Default Value ($)TextBetweenIndexes with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     PropertyValueOutOfRangeException Thrown when Text is null or empty (i.e. \"\").    Thrown when Start Index or End Index is less than zero or greater than the length of Text - 1.    Remarks Start Index and End Index are inclusive The Start Index and End Index properties are both inclusive indexes, which means the characters at those indexes will be included in the retrieved text.\nStart Index greater than End Index Start Index can be greater than End Index. If this is the case, the values of the indexes will be swapped. See Example above.\n","categories":"","description":"Gets text between the specified start index and end index of a given text.","excerpt":"Gets text between the specified start index and end index of a given text.","ref":"/docs/reference/blocks/text/get-text/get-text-between-indexes-block/","tags":"","title":"Get Text Between Indexes"},{"body":"","categories":"","description":"Get the time period (Years, Months, Days, Hours, Minutes, Seconds and Milliseconds) between two date times.","excerpt":"Get the time period (Years, Months, Days, Hours, Minutes, Seconds and Milliseconds) between two date times.","ref":"/docs/reference/blocks/date-and-time/get-time-period/","tags":"","title":"Get Time Period"},{"body":"\r\rGet Time Period Between Date Times (Cortex.Blocks.DateAndTime.GetTimePeriod.GetTimePeriodBetweenDateTimesBlock)\nDescription Get the Time Period between the specified Start Date Time and End Date Time.\nExamples Get Time Period between Start Date Time and End Date Time This example will get the Time Period beween 2021-01-01T00:00:00+00:00 and 2022-01-01T00:00:00+00:00.\nProperties    Property Value Notes     Start Date Time ($)StartDateTime, with value of DateTimeOffset that has a text representation of 2021-01-01T00:00:00+00:00 ($)StartDateTime is a variable of type DateTimeOffset   End Date Time ($)EndDateTime, with value of DateTimeOffset that has a text representation of 2022-01-01T00:00:00+00:00 ($)EndDateTime is a variable of type DateTimeOffset   Time Period ($)TimePeriod, with no value ($)TimePeriod is a variable that will be set to a TimePeriod value    Result Getting the Time Period between 2021-01-01T00:00:00+00:00 and 2022-01-01T00:00:00+00:00 will result in the variable ($)TimePeriod being updated to the following:\n{ \"Years\": 0, \"Months\": 0, \"Days\": 365, \"Hours\": 0, \"Minutes\": 0, \"Seconds\": 0, \"Milliseconds\": 0 }  Properties Start Date Time The Start Date Time to get the Time Period between.\nIts text representation will be in the ISO 8601 Standard (e.g. 2021-11-05T08:48:08.0307614+00:00).\nFor more information about Date and Time, please see Working with Dates and Time.\n         Data Type DateTimeOffset   Property Type Input   Default Value ($)StartDateTime with DateTimeOffset value that has a text representation of 0001-01-01T00:00:00+00:00    End Date Time The End Date Time to get the Time Period between.\nIts text representation will be in the ISO 8601 Standard (e.g. 2021-11-05T08:48:08.0307614+00:00).\nFor more information about Date and Time, please see Working with Dates and Time.\n         Data Type DateTimeOffset   Property Type Input   Default Value ($)EndDateTime with DateTimeOffset value that has a text representation of 0001-01-01T00:00:00+00:00    Time Period The Time Period between the Start Date Time and End Date Time.\nTime Period can have positive and negative components where components are:\n Years Months Days Hours Minutes Seconds Milliseconds  In this block, the Year and Month components are not used as they aren’t constant (i.e. Years can have different numbers of days depending upon whether it is a leap year or not, and months can have different numbers of days); instead Days will be used.\nTime Period is calculated by subtracting Start Date Time from End Date Time; therefore if Start Date Time is less than End Date Time, the Time Period components will be positive, if it is equal they will be 0 and finally if it is greater than they will be negative.\nFor more information about Date and Time, please see Working with Dates and Time.\n         Data Type TimePeriod   Property Type Output   Default Value ($)TimePeriod with no value    Exceptions No exceptions are thrown by the block.\nRemarks Dates and Time The default text representation of Date and Time will be in the ISO 8601 Standard (e.g. 2021-11-05T08:48:08.0307614+00:00).\nFor more information, please see Working with Dates and Time.\nYears and Months components not used In this block, the Year and Month components are not used as they aren’t constant (i.e. Years can have different numbers of days depending upon whether it is a leap year or not, and months can have different numbers of days); instead Days will be used.\nStart Date Time greater than End Date Time Start Date Time can be greater than End Date Time; if this is the case the components of the Time Period will be negative.\n","categories":"","description":"Gets the Time Period between two Date Times.","excerpt":"Gets the Time Period between two Date Times.","ref":"/docs/reference/blocks/date-and-time/get-time-period/get-time-period-between-date-times-block/","tags":"","title":"Get Time Period Between Date Times"},{"body":"\r\rHandle Block Exception (Cortex.Blocks.Exceptions.HandleBlockException.HandleBlockExceptionBlock)\nDescription Handles any Exception thrown by the block it is connected to.\nExamples Handle and save the Exception This example will handle any exception thrown by the block it is connected to; saving the exception to a variable, so the flow execution can use it to make decisions or take further action.\nProperties    Property Value Notes     Exception ($)Exception, with no value ($)Exception is a variable that will be set to a dynamic value    Result The block will handle any exception and save the exception to the ($)Exception variable for use later in the flow execution.\n Handle and discard the Exception This example will handle any exception thrown by the block it is connected to; not saving the exception to a variable, as the flow execution does not need it to make decisions or take further action.\nProperties    Property Value Notes     Exception ($)_, with no value ($)_ is a built-in variable that indicates the flow execution does not need to save the exception, so it can be discarded    Result The block will handle any exception, but will not save the exception as the ($)_ variable indicates it is not needed and can be discarded.\nFor more infomation about using the built-in ($)_ variable, please see Discarding Output Properties.\n Properties Exception The Exception that is handled.\nException can be any Exception data type.\nIf the flow execution does not need the exception, it can be discarded by assigning the built-in ($)_ variable.\nFor more infomation about using the built-in ($)_ variable, please see Discarding Output Properties.\n         Data Type dynamic   Property Type Output   Default Value ($)Exception with no value    Exceptions No exceptions are thrown by the block.\nRemarks Chaining Exception handling blocks Blocks that handle block exceptions can be chained together so different exceptions can be handled separately. The blocks are listed below:\n Handle Block Exception Matching Message Handle Block Exception Matching Messages Handle Block Exception Matching Type Name Handle Block Exception Matching Type Names Handle Block Exception  Each block has an input port on its left-hand side and, with the exception of this block, also have an output port on their right-hand side; this is so they can pass any exception they do not handle to the next block.\nAs this block handles any exception, it does not require the output port.\nFor more information about chaining of exception handling blocks and passing of exceptions, please see Exception Handling.\nWhy does the Exception property return a dynamic data type? The decision for the Exception to return a dynamic data type rather than an Exception data type, was to avoid users having to cast the exception to its correct type to be able to use all of its properties.\nAs a result, any issues with using the Exception data type (i.e. trying to access a property it does not have) will not be reported as messages when trying to debug the flow; they will only be discovered when the flow execution reaches the part of the flow with the issue.\nIf it is desirable to have any issues reported as messages when trying to debug the flow, the user can cast the exception to its correct type.\nUsing the built-in ($)_ variable to discard the Exception Sometimes when an exception occurs the flow execution wants to use the exception to make decisions or take further action. However, there are occasions when the exception is not needed, and being forced to create another variable to save the exception is extra work for no benefit. In these circumstances it is possible to use the built-in ($)_ variable to indicate the exception does not need to be saved.\nFor more infomation about using the built-in ($)_ variable, please see Discarding Output Properties.\n","categories":"","description":"Handles any exception thrown by the block it is connected to.","excerpt":"Handles any exception thrown by the block it is connected to.","ref":"/docs/reference/blocks/exceptions/handle-block-exception/handle-block-exception-block/","tags":"","title":"Handle Block Exception"},{"body":"\r\rHandle Block Exception Matching Message (Cortex.Blocks.Exceptions.HandleBlockException.HandleBlockExceptionMatchingMessageBlock)\nDescription Handles any Exception thrown by the block it is connected to that matches a specified Message.\nExamples Handle Exception containing Message and save the Exception This example will handle any exception thrown by the block it is connected to that contains \"'List' is null\" in its Message property; saving the exception to a variable, so the flow execution can use it to make decisions or take further action.\nIt performs a case-sensitive, culture-insensitive comparison of messages.\nProperties    Property Value Notes     Message ($)Message, with value \"'List' is null\" ($)Message is a variable of type String   Comparison Type ($)ComparisonType, with value StringComparison.Ordinal ($)ComparisonType is a variable of type StringComparison   Exception ($)Exception, with no value ($)Exception is a variable that will be set to a dynamic value    Result The block will handle any exception containing \"'List' is null\" in its Message property and save the exception to the ($)Exception variable for use later in the flow execution.\nE.g.\nIf the List property of the Add Item At Beginning list block was set to null, it would throw a PropertyNullException when executed.\nThis exception’s Message property would be \"'List' is null; it must be provided with a non-null value.\\r\\nPlease click the HelpLink for more information on how to fix this.\"; therefore as we are checking for exceptions containing \"'List' is null\" in their Message, this exception would be handled and saved to the ($)Exception variable.\n Handle Exception containing Message and discard the Exception This example is the same as the example above, except it does not save the exception to a variable, as the flow execution does not need it to make decisions or take further action.\nIt performs a case-sensitive, culture-insensitive comparison of messages.\nProperties    Property Value Notes     Message ($)Message, with value \"'List' is null\" ($)Message is a variable of type String   Comparison Type ($)ComparisonType, with value StringComparison.Ordinal ($)ComparisonType is a variable of type StringComparison   Exception ($)_, with no value ($)_ is a built-in variable that indicates the flow execution does not need to save the exception, so it can be discarded    Result The block will handle any exception containing \"'List' is null\" in its Message property, but will not save the exception as the ($)_ variable indicates it is not needed and can be discarded.\nE.g.\nIf the List property of the Add Item At Beginning list block was set to null, it would throw a PropertyNullException when executed.\nThis exception’s Message property would be \"'List' is null; it must be provided with a non-null value.\\r\\nPlease click the HelpLink for more information on how to fix this.\"; therefore as we are checking for exceptions containing \"'List' is null\" in their Message, this exception would be handled, but because the ($)_ variable is used it will not be saved to the ($)Exception variable.\nFor more infomation about using the built-in ($)_ variable, please see Discarding Output Properties.\n Exception does not contain Message This example will not handle an exception thrown by the block it is connected to that does not contain \"'List' is null\" in its Message property; the exception will be passed to the next exception handling block.\nIt performs a case-sensitive, culture-insensitive comparison of messages.\nProperties    Property Value Notes     Message ($)Message, with value \"'List' is null\" ($)Message is a variable of type String   Comparison Type ($)ComparisonType, with value StringComparison.Ordinal ($)ComparisonType is a variable of type StringComparison   Exception ($)Exception, with no value ($)Exception is a variable that won’t be set    Result The block will not handle any exception that does not contain \"'List' is null\" in its Message property; instead the exception will be passed to the next exception handling block.\nE.g.\nIf the List property of the Add Item At Beginning list block was set to a read-only List, it would throw a CannotModifyReadOnlyListException when executed.\nThis exception’s Message property would be \"'List' cannot be modified because it's read-only.\\r\\nPlease click the HelpLink for more information on how to fix this.\"; therefore as we are checking for exceptions containing \"'List' is null\" in their Message, this exception would not be handled.\n Properties Message The Message the Exception’s Message property must contain for this block to handle the Exception.\n         Data Type String   Property Type Input   Default Value ($)Message with value \"\"    Comparison Type The Comparison Type specifying the rules used to determine whether Message is contained in the Exception’s Message property.\nFor information about the supported values for the Comparison Type property and examples of how it is determined whether two pieces of text match, please see Text Equality.\n         Data Type StringComparison   Property Type Input   Default Value ($)ComparisonType with value StringComparison.Ordinal    Exception The Exception if it is handled by the block.\nException can be any Exception data type.\nIf the flow execution does not need the exception, it can be discarded by assigning the built-in ($)_ variable.\nFor more infomation about using the built-in ($)_ variable, please see Discarding Output Properties.\n         Data Type dynamic   Property Type Output   Default Value ($)Exception with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     ArgumentException Thrown when Comparison Type is not one of the specified StringComparison types (e.g. (StringComparison)10).    Remarks Comparison Types For information about the supported values for the Comparison Type property and examples of how it is determined whether two pieces of text match, please see Text Equality.\nNull or empty Message If Message is null or empty (i.e. \"\"), and the thrown exception’s Message property is also null or empty (i.e. \"\"), the exception will be handled and saved to the variable specified in the Exception property.\nChaining Exception handling blocks Blocks that handle block exceptions can be chained together so different exceptions can be handled separately. The blocks are listed below:\n Handle Block Exception Matching Message Handle Block Exception Matching Messages Handle Block Exception Matching Type Name Handle Block Exception Matching Type Names Handle Block Exception  Each block has an input port on its left-hand side and, with the exception of the Handle Block Exception block, also have an output port on their right-hand side; this is so they can pass any exception they do not handle to the next block.\nAs the Handle Block Exception block handles any exception, it does not require the output port.\nFor more information about chaining of exception handling blocks and passing of exceptions, please see Exception Handling.\nWhy does the Exception property return a dynamic data type? The decision for the Exception to return a dynamic data type rather than an Exception data type, was to avoid users having to cast the exception to its correct type to be able to use all of its properties.\nAs a result, any issues with using the Exception data type (i.e. trying to access a property it does not have) will not be reported as messages when trying to debug the flow; they will only be discovered when the flow execution reaches the part of the flow with the issue.\nIf it is desirable to have any issues reported as messages when trying to debug the flow, the user can cast the exception to its correct type.\nUsing the built-in ($)_ variable to discard the Exception Sometimes when an exception occurs the flow execution wants to use the exception to make decisions or take further action. However, there are occasions when the exception is not needed, and being forced to create another variable to save the exception is extra work for no benefit. In these circumstances it is possible to use the built-in ($)_ variable to indicate the exception does not need to be saved.\nFor more infomation about using the built-in ($)_ variable, please see Discarding Output Properties.\n","categories":"","description":"Handles any exception thrown by the block it is connected to that matches a specified message.","excerpt":"Handles any exception thrown by the block it is connected to that matches a specified message.","ref":"/docs/reference/blocks/exceptions/handle-block-exception/handle-block-exception-matching-message-block/","tags":"","title":"Handle Block Exception Matching Message"},{"body":"\r\rHandle Block Exception Matching Messages (Cortex.Blocks.Exceptions.HandleBlockException.HandleBlockExceptionMatchingMessagesBlock)\nDescription Handles any Exception thrown by the block it is connected to that matches any message in a given set of Messages.\nExamples Handle Exception containing any of the Messages and save the Exception This example will handle any exception thrown by the block it is connected to that contains any of the messages in [\"'List' is null\", \"'List' is empty\"] in its Message property; saving the exception to a variable, so the flow execution can use it to make decisions or take further action.\nIt performs a case-sensitive, culture-insensitive comparison of messages.\nProperties    Property Value Notes     Messages ($)Messages, with value [\"'List' is null\", \"'List' is empty\"] ($)Messages is a variable of type IEnumerable\u003cString\u003e   Comparison Type ($)ComparisonType, with value StringComparison.Ordinal ($)ComparisonType is a variable of type StringComparison   Exception ($)Exception, with no value ($)Exception is a variable that will be set to a dynamic value    Result The block will handle any exception containing any of the messages in [\"'List' is null\", \"'List' is empty\"] in its Message property and save the exception to the ($)Exception variable for use later in the flow execution.\nE.g.\nIf the List property of the Add Item At Beginning list block was set to null, it would throw a PropertyNullException when executed.\nThis exception’s Message property would be \"'List' is null; it must be provided with a non-null value.\\r\\nPlease click the HelpLink for more information on how to fix this.\"; therefore as we are checking for exceptions containing any of [\"'List' is null\", \"'List' is empty\"] in their Message, this exception would be handled and saved to the ($)Exception variable.\n Handle Exception containing any of the Messages and discard the Exception This example is the same as the example above, except it does not save the exception to a variable, as the flow execution does not need it to make decisions or take further action.\nIt performs a case-sensitive, culture-insensitive comparison of messages.\nProperties    Property Value Notes     Messages ($)Messages, with value [\"'List' is null\", \"'List' is empty\"] ($)Messages is a variable of type IEnumerable\u003cString\u003e   Comparison Type ($)ComparisonType, with value StringComparison.Ordinal ($)ComparisonType is a variable of type StringComparison   Exception ($)_, with no value ($)_ is a built-in variable that indicates the flow execution does not need to save the exception, so it can be discarded    Result The block will handle any exception containing any of the messages in [\"'List' is null\", \"'List' is empty\"] in its Message property, but will not save the exception as the ($)_ variable indicates it is not needed and can be discarded.\nE.g.\nIf the List property of the Add Item At Beginning list block was set to null, it would throw a PropertyNullException when executed.\nThis exception’s Message property would be \"'List' is null; it must be provided with a non-null value.\\r\\nPlease click the HelpLink for more information on how to fix this.\"; therefore as we are checking for exceptions containing any of [\"'List' is null\", \"'List' is empty\"] in their Message, this exception would be handled, but because the ($)_ variable is used it will not be saved to the ($)Exception variable.\nFor more infomation about using the built-in ($)_ variable, please see Discarding Output Properties.\n Exception does not contain any of the Messages This example will not handle an exception thrown by the block it is connected to that does not contain any of [\"'List' is null\", \"'List' is empty\"] in its Message property; the exception will be passed to the next exception handling block.\nIt performs a case-sensitive, culture-insensitive comparison of messages.\nProperties    Property Value Notes     Messages ($)Messages, with value [\"'List' is null\", \"'List' is empty\"] ($)Messages is a variable of type IEnumerable\u003cString\u003e   Comparison Type ($)ComparisonType, with value StringComparison.Ordinal ($)ComparisonType is a variable of type StringComparison   Exception ($)Exception, with no value ($)Exception is a variable that won’t be set    Result The block will not handle any exception that does not contain any of [\"'List' is null\", \"'List' is empty\"] in its Message property; instead the exception will be passed to the next exception handling block.\nE.g.\nIf the List property of the Add Item At Beginning list block was set to a read-only List, it would throw a CannotModifyReadOnlyListException when executed.\nThis exception’s Message property would be \"'List' cannot be modified because it's read-only.\\r\\nPlease click the HelpLink for more information on how to fix this.\"; therefore as we are checking for exceptions containing any of [\"'List' is null\", \"'List' is empty\"] in their Message, this exception would not be handled.\n Properties Messages The Messages the Exception’s Message property must contain any of for this block to handle the Exception.\n         Data Type IEnumerable\u003cString\u003e   Property Type Input   Default Value ($)Messages with value []    Comparison Type The Comparison Type specifying the rules used to determine whether any of the Messages are contained in the Exception’s Message property.\nFor information about the supported values for the Comparison Type property and examples of how it is determined whether two pieces of text match, please see Text Equality.\n         Data Type StringComparison   Property Type Input   Default Value ($)ComparisonType with value StringComparison.Ordinal    Exception The Exception if it is handled by the block.\nException can be any Exception data type.\nIf the flow execution does not need the exception, it can be discarded by assigning the built-in ($)_ variable.\nFor more infomation about using the built-in ($)_ variable, please see Discarding Output Properties.\n         Data Type dynamic   Property Type Output   Default Value ($)Exception with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     ArgumentException Thrown when Comparison Type is not one of the specified StringComparison types (e.g. (StringComparison)10).   PropertyEmptyException Thrown when Messages contains no items.   PropertyNullException Thrown when Messages is null.    Remarks Comparison Types For information about the supported values for the Comparison Type property and examples of how it is determined whether two pieces of text match, please see Text Equality.\nNull or empty Message in Messages If any message in Messages is null or empty (i.e. \"\"), and the thrown exception’s Message property is also null or empty (i.e. \"\"), the exception will be handled and saved to the variable specified in the Exception property.\nChaining Exception handling blocks Blocks that handle block exceptions can be chained together so different exceptions can be handled separately. The blocks are listed below:\n Handle Block Exception Matching Message Handle Block Exception Matching Messages Handle Block Exception Matching Type Name Handle Block Exception Matching Type Names Handle Block Exception  Each block has an input port on its left-hand side and, with the exception of the Handle Block Exception block, also have an output port on their right-hand side; this is so they can pass any exception they do not handle to the next block.\nAs the Handle Block Exception block handles any exception, it does not require the output port.\nFor more information about chaining of exception handling blocks and passing of exceptions, please see Exception Handling.\nWhy does the Exception property return a dynamic data type? The decision for the Exception to return a dynamic data type rather than an Exception data type, was to avoid users having to cast the exception to its correct type to be able to use all of its properties.\nAs a result, any issues with using the Exception data type (i.e. trying to access a property it does not have) will not be reported as messages when trying to debug the flow; they will only be discovered when the flow execution reaches the part of the flow with the issue.\nIf it is desirable to have any issues reported as messages when trying to debug the flow, the user can cast the exception to its correct type.\nUsing the built-in ($)_ variable to discard the Exception Sometimes when an exception occurs the flow execution wants to use the exception to make decisions or take further action. However, there are occasions when the exception is not needed, and being forced to create another variable to save the exception is extra work for no benefit. In these circumstances it is possible to use the built-in ($)_ variable to indicate the exception does not need to be saved.\nFor more infomation about using the built-in ($)_ variable, please see Discarding Output Properties.\n","categories":"","description":"Handles any exception thrown by the block it is connected to that matches any message in a given set of messages.","excerpt":"Handles any exception thrown by the block it is connected to that matches any message in a given set of messages.","ref":"/docs/reference/blocks/exceptions/handle-block-exception/handle-block-exception-matching-messages-block/","tags":"","title":"Handle Block Exception Matching Messages"},{"body":"\r\rHandle Block Exception Matching Type Name (Cortex.Blocks.Exceptions.HandleBlockException.HandleBlockExceptionMatchingTypeNameBlock)\nDescription Handles any Exception thrown by the block it is connected to that matches a specified Type Name.\nExamples Handle Exception matching Type Name and save the Exception This example will handle any exception thrown by the block it is connected to that contains \"PropertyNull\" in its fully qualified TypeName; saving the exception to a variable, so the flow execution can use it to make decisions or take further action.\nIt performs a case-sensitive, culture-insensitive comparison of type names.\nProperties    Property Value Notes     Type Name ($)TypeName, with value \"PropertyNull\" ($)TypeName is a variable of type String   Comparison Type ($)ComparisonType, with value StringComparison.Ordinal ($)ComparisonType is a variable of type StringComparison   Exception ($)Exception, with no value ($)Exception is a variable that will be set to a dynamic value    Result The block will handle any exception containing \"PropertyNull\" in its fully qualified TypeName and save the exception to the ($)Exception variable for use later in the flow execution.\nE.g.\nIf the List property of the Add Item At Beginning list block was set to null, it would throw a PropertyNullException when executed.\nThis exception’s fully qualified TypeName is \"Cortex.Exceptions.Common.Property.PropertyNullException\"; therefore as we are checking for exceptions containing \"PropertyNull\" in their TypeName, this exception would be handled and saved to the ($)Exception variable.\n Handle Exception matching Type Name and discard the Exception This example is the same as the example above, except it does not save the exception to a variable, as the flow execution does not need it to make decisions or take further action.\nIt performs a case-sensitive, culture-insensitive comparison of type names.\nProperties    Property Value Notes     Type Name ($)TypeName, with value \"PropertyNull\" ($)TypeName is a variable of type String   Comparison Type ($)ComparisonType, with value StringComparison.Ordinal ($)ComparisonType is a variable of type StringComparison   Exception ($)_, with no value ($)_ is a built-in variable that indicates the flow execution does not need to save the exception, so it can be discarded    Result The block will handle any exception containing \"PropertyNull\" in its fully qualified TypeName, but will not save the exception as the ($)_ variable indicates it is not needed and can be discarded.\nE.g.\nIf the List property of the Add Item At Beginning list block was set to null, it would throw a PropertyNullException when executed.\nThis exception’s fully qualified TypeName is \"Cortex.Exceptions.Common.Property.PropertyNullException\"; therefore as we are checking for exceptions containing \"PropertyNull\" in their TypeName, this exception would be handled, but because the ($)_ variable is used it will not be saved to the ($)Exception variable.\nFor more infomation about using the built-in ($)_ variable, please see Discarding Output Properties.\n Exception does not match Type Name This example will not handle an exception thrown by the block it is connected to that does not contain \"PropertyNull\" in its fully qualified TypeName; the exception will be passed to the next exception handling block.\nIt performs a case-sensitive, culture-insensitive comparison of type names.\nProperties    Property Value Notes     Type Name ($)TypeName, with value \"PropertyNull\" ($)TypeName is a variable of type String   Comparison Type ($)ComparisonType, with value StringComparison.Ordinal ($)ComparisonType is a variable of type StringComparison   Exception ($)Exception, with no value ($)Exception is a variable that won’t be set    Result The block will not handle any exception that does not contain \"PropertyNull\" in its fully qualified TypeName; instead the exception will be passed to the next exception handling block.\nE.g.\nIf the List property of the Add Item At Beginning list block was set to a read-only List, it would throw a CannotModifyReadOnlyListException when executed.\nThis exception’s fully qualified TypeName is \"Cortex.Exceptions.Lists.CannotModifyReadOnlyListException\"; therefore as we are checking for exceptions containing \"PropertyNull\" in their TypeName, this exception would not be handled.\n Properties Type Name The Type Name the Exception’s fully qualified TypeName must contain for this block to handle the Exception.\n         Data Type String   Property Type Input   Default Value ($)TypeName with value \"\"    Comparison Type The Comparison Type specifying the rules used to determine whether Type Name is contained in the Exception’s fully qualified TypeName.\nFor information about the supported values for the Comparison Type property and examples of how it is determined whether two pieces of text match, please see Text Equality.\n         Data Type StringComparison   Property Type Input   Default Value ($)ComparisonType with value StringComparison.Ordinal    Exception The Exception if it is handled by the block.\nException can be any Exception data type.\nIf the flow execution does not need the exception, it can be discarded by assigning the built-in ($)_ variable.\nFor more infomation about using the built-in ($)_ variable, please see Discarding Output Properties.\n         Data Type dynamic   Property Type Output   Default Value ($)Exception with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     ArgumentException Thrown when Comparison Type is not one of the specified StringComparison types (e.g. (StringComparison)10).   PropertyEmptyException Thrown when Type Name is empty (i.e. \"\").   PropertyNullException Thrown when Type Name is null.    Remarks Comparison Types For information about the supported values for the Comparison Type property and examples of how it is determined whether two pieces of text match, please see Text Equality.\nChaining Exception handling blocks Blocks that handle block exceptions can be chained together so different exceptions can be handled separately. The blocks are listed below:\n Handle Block Exception Matching Message Handle Block Exception Matching Messages Handle Block Exception Matching Type Name Handle Block Exception Matching Type Names Handle Block Exception  Each block has an input port on its left-hand side and, with the exception of the Handle Block Exception block, also have an output port on their right-hand side; this is so they can pass any exception they do not handle to the next block.\nAs the Handle Block Exception block handles any exception, it does not require the output port.\nFor more information about chaining of exception handling blocks and passing of exceptions, please see Exception Handling.\nWhy does the Exception property return a dynamic data type? The decision for the Exception to return a dynamic data type rather than an Exception data type, was to avoid users having to cast the exception to its correct type to be able to use all of its properties.\nAs a result, any issues with using the Exception data type (i.e. trying to access a property it does not have) will not be reported as messages when trying to debug the flow; they will only be discovered when the flow execution reaches the part of the flow with the issue.\nIf it is desirable to have any issues reported as messages when trying to debug the flow, the user can cast the exception to its correct type.\nUsing the built-in ($)_ variable to discard the Exception Sometimes when an exception occurs the flow execution wants to use the exception to make decisions or take further action. However, there are occasions when the exception is not needed, and being forced to create another variable to save the exception is extra work for no benefit. In these circumstances it is possible to use the built-in ($)_ variable to indicate the exception does not need to be saved.\nFor more infomation about using the built-in ($)_ variable, please see Discarding Output Properties.\n","categories":"","description":"Handles any exception thrown by the block it is connected to that matches a specified type name.","excerpt":"Handles any exception thrown by the block it is connected to that matches a specified type name.","ref":"/docs/reference/blocks/exceptions/handle-block-exception/handle-block-exception-matching-type-name-block/","tags":"","title":"Handle Block Exception Matching Type Name"},{"body":"\r\rHandle Block Exception Matching Type Names (Cortex.Blocks.Exceptions.HandleBlockException.HandleBlockExceptionMatchingTypeNamesBlock)\nDescription Handles any Exception thrown by the block it is connected to that matches any type name in a given set of Type Names.\nExamples Handle Exception matching any of the Type Names and save the Exception This example will handle any exception thrown by the block it is connected to that contains any of the type names in [\"PropertyNull\", \"PropertyEmpty\"] in its fully qualified TypeName; saving the exception to a variable, so the flow execution can use it to make decisions or take further action.\nIt performs a case-sensitive, culture-insensitive comparison of messages.\nProperties    Property Value Notes     Type Names ($)TypeNames, with value [\"PropertyNull\", \"PropertyEmpty\"] ($)TypeNames is a variable of type IEnumerable\u003cString\u003e   Comparison Type ($)ComparisonType, with value StringComparison.Ordinal ($)ComparisonType is a variable of type StringComparison   Exception ($)Exception, with no value ($)Exception is a variable that will be set to a dynamic value    Result The block will handle any exception containing any of the type names in [\"PropertyNull\", \"PropertyEmpty\"] in its fully qualified TypeName and save the exception to the ($)Exception variable for use later in the flow execution.\nE.g.\nIf the List property of the Add Item At Beginning list block was set to null, it would throw a PropertyNullException when executed.\nThis exception’s fully qualified TypeName is \"Cortex.Exceptions.Common.Property.PropertyNullException\"; therefore as we are checking for exceptions containing any of [\"PropertyNull\", \"PropertyEmpty\"] in their TypeName, this exception would be handled and saved to the ($)Exception variable.\n Handle Exception containing any of the Type Names and discard the Exception This example is the same as the example above, except it does not save the exception to a variable, as the flow execution does not need it to make decisions or take further action.\nIt performs a case-sensitive, culture-insensitive comparison of messages.\nProperties    Property Value Notes     Type Names ($)TypeNames, with value [\"PropertyNull\", \"PropertyEmpty\"] ($)TypeNames is a variable of type IEnumerable\u003cString\u003e   Comparison Type ($)ComparisonType, with value StringComparison.Ordinal ($)ComparisonType is a variable of type StringComparison   Exception ($)_, with no value ($)_ is a built-in variable that indicates the flow execution does not need to save the exception, so it can be discarded    Result The block will handle any exception containing any of the type names in [\"PropertyNull\", \"PropertyEmpty\"] in its fully qualified TypeName, but will not save the exception as the ($)_ variable indicates it is not needed and can be discarded.\nE.g.\nIf the List property of the Add Item At Beginning list block was set to null, it would throw a PropertyNullException when executed.\nThis exception’s fully qualified TypeName is \"Cortex.Exceptions.Common.Property.PropertyNullException\"; therefore as we are checking for exceptions containing any of [\"PropertyNull\", \"PropertyEmpty\"] in their TypeName, this exception would be handled, but because the ($)_ variable is used it will not be saved to the ($)Exception variable.\nFor more infomation about using the built-in ($)_ variable, please see Discarding Output Properties.\n Exception does not contain any of the Type Names This example will not handle an exception thrown by the block it is connected to that does not contain any of [\"PropertyNull\", \"PropertyEmpty\"] in its fully qualified TypeName; the exception will be passed to the next exception handling block.\nIt performs a case-sensitive, culture-insensitive comparison of messages.\nProperties    Property Value Notes     Type Names ($)TypeNames, with value [\"PropertyNull\", \"PropertyEmpty\"] ($)TypeNames is a variable of type IEnumerable\u003cString\u003e   Comparison Type ($)ComparisonType, with value StringComparison.Ordinal ($)ComparisonType is a variable of type StringComparison   Exception ($)Exception, with no value ($)Exception is a variable that won’t be set    Result The block will not handle any exception that does not contain any of [\"PropertyNull\", \"PropertyEmpty\"] in its fully qualified TypeName; instead the exception will be passed to the next exception handling block.\nE.g.\nIf the List property of the Add Item At Beginning list block was set to a read-only List, it would throw a CannotModifyReadOnlyListException when executed.\nThis exception’s fully qualified TypeName is \"Cortex.Exceptions.Lists.CannotModifyReadOnlyListException\"; therefore as we are checking for exceptions containing any of [\"PropertyNull\", \"PropertyEmpty\"] in their TypeName, this exception would not be handled.\n Properties Type Names The Type Names the Exception’s fully qualified TypeName must contain any of for this block to handle the Exception.\n         Data Type IEnumerable\u003cString\u003e   Property Type Input   Default Value ($)TypeNames with value []    Comparison Type The Comparison Type specifying the rules used to determine whether any of the Type Names are contained in the Exception’s fully qualified TypeName.\nFor information about the supported values for the Comparison Type property and examples of how it is determined whether two pieces of text match, please see Text Equality.\n         Data Type StringComparison   Property Type Input   Default Value ($)ComparisonType with value StringComparison.Ordinal    Exception The Exception if it is handled by the block.\nException can be any Exception data type.\nIf the flow execution does not need the exception, it can be discarded by assigning the built-in ($)_ variable.\nFor more infomation about using the built-in ($)_ variable, please see Discarding Output Properties.\n         Data Type dynamic   Property Type Output   Default Value ($)Exception with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     ArgumentException Thrown when Comparison Type is not one of the specified StringComparison types (e.g. (StringComparison)10).   PropertyContainsNullOrEmptyItemException Thrown when any Type Name in Type Names is null or empty (i.e. \"\").   PropertyEmptyException Thrown when Type Names contains no items.   PropertyNullException Thrown when Type Names is null.    Remarks Comparison Types For information about the supported values for the Comparison Type property and examples of how it is determined whether two pieces of text match, please see Text Equality.\nChaining Exception handling blocks Blocks that handle block exceptions can be chained together so different exceptions can be handled separately. The blocks are listed below:\n Handle Block Exception Matching Message Handle Block Exception Matching Messages Handle Block Exception Matching Type Name Handle Block Exception Matching Type Names Handle Block Exception  Each block has an input port on its left-hand side and, with the exception of the Handle Block Exception block, also have an output port on their right-hand side; this is so they can pass any exception they do not handle to the next block.\nAs the Handle Block Exception block handles any exception, it does not require the output port.\nFor more information about chaining of exception handling blocks and passing of exceptions, please see Exception Handling.\nWhy does the Exception property return a dynamic data type? The decision for the Exception to return a dynamic data type rather than an Exception data type, was to avoid users having to cast the exception to its correct type to be able to use all of its properties.\nAs a result, any issues with using the Exception data type (i.e. trying to access a property it does not have) will not be reported as messages when trying to debug the flow; they will only be discovered when the flow execution reaches the part of the flow with the issue.\nIf it is desirable to have any issues reported as messages when trying to debug the flow, the user can cast the exception to its correct type.\nUsing the built-in ($)_ variable to discard the Exception Sometimes when an exception occurs the flow execution wants to use the exception to make decisions or take further action. However, there are occasions when the exception is not needed, and being forced to create another variable to save the exception is extra work for no benefit. In these circumstances it is possible to use the built-in ($)_ variable to indicate the exception does not need to be saved.\nFor more infomation about using the built-in ($)_ variable, please see Discarding Output Properties.\n","categories":"","description":"Handles any exception thrown by the block it is connected to that matches any type name in a given set of type names.","excerpt":"Handles any exception thrown by the block it is connected to that matches any type name in a given set of type names.","ref":"/docs/reference/blocks/exceptions/handle-block-exception/handle-block-exception-matching-type-names-block/","tags":"","title":"Handle Block Exception Matching Type Names"},{"body":"","categories":"","description":"Handle exceptions that occur during block execution.","excerpt":"Handle exceptions that occur during block execution.","ref":"/docs/reference/blocks/exceptions/handle-block-exception/","tags":"","title":"Handle Block Exception(s)"},{"body":"\r\rHandle Flow Exception (Cortex.Blocks.Exceptions.HandleFlowException.HandleFlowExceptionWorkspaceBlock)\nDescription Handles any unhandled Exception within the Flow.\nFor more information, please see Unhandled Exceptions.\nExamples Handle and save the Exception This example will handle any unhandled exception within the Flow; saving the exception to a variable, so the flow execution can use it to make decisions or take further action.\nProperties    Property Value Notes     Exception ($)Exception, with no value ($)Exception is a variable that will be set to a dynamic value    Result The block will handle any unhandled exception within the Flow and save the exception to the ($)Exception variable for use later in the flow execution.\n Handle and discard the Exception This example will handle any unhandled exception within the Flow; not saving the exception to a variable, as the flow execution does not need it to make decisions or take further action.\nProperties    Property Value Notes     Exception ($)_, with no value ($)_ is a built-in variable that indicates the flow execution does not need to save the exception, so it can be discarded    Result The block will handle any unhandled exception within the Flow, but will not save the exception as the ($)_ variable indicates it is not needed and can be discarded.\nFor more infomation about using the built-in ($)_ variable, please see Discarding Output Properties.\n Properties Exception The Exception that is handled.\nException can be any Exception data type.\nBy default, this property is assigned the built-in ($)_ variable, so the exception will be discarded. If the flow execution does need the exception, a variable can be assigned to save it in.\nFor more infomation about using the built-in ($)_ variable, please see Discarding Output Properties.\n         Data Type dynamic   Property Type Output   Default Value ($)_ meaning the exception will be discarded    Exceptions No exceptions are thrown by the block.\nRemarks Block Restrictions The following restrictions apply to this block:\n A flow cannot contain more than one Handle Flow Exception block. The Handle Flow Exception block is not available on any palette. The Handle Flow Exception block cannot be copied. The Handle Flow Exception block cannot be deleted.  Unhandled Exceptions If an exception thrown by a block is not handled by any connected Handle Block Exception blocks, it will be passed to the Handle Workspace Exception block on the same workspace.\nIf the workspace does not contain a Handle Workspace Exception block it will be rethrown by the Workspace block the workspace belongs to.\nThis process repeats until:\n The exception is handled, or The exception reaches the flow’s top-level workspace, is not handled by any Handle Block Exception blocks and the top-level workspace does not contain a Handle Workspace Exception block. At this stage, the exception is handled by the flow’s Handle Flow Exception block.  If an exception occurs within the workspace of the Handle Flow Exception block and is not handled, the flow will end with a status of Error.\nFor more information about chaining of exception handling blocks and passing of exceptions, please see Exception Handling.\nWhy does the Exception property return a dynamic data type? The decision for the Exception to return a dynamic data type rather than an Exception data type, was to avoid users having to cast the exception to its correct type to be able to use all of its properties.\nAs a result, any issues with using the Exception data type (i.e. trying to access a property it does not have) will not be reported as messages when trying to debug the flow; they will only be discovered when the flow execution reaches the part of the flow with the issue.\nIf it is desirable to have any issues reported as messages when trying to debug the flow, the user can cast the exception to its correct type.\nUsing the built-in ($)_ variable to discard the Exception Sometimes when an exception occurs the flow execution wants to use the exception to make decisions or take further action. However, there are occasions when the exception is not needed, and being forced to create another variable to save the exception is extra work for no benefit. In these circumstances it is possible to use the built-in ($)_ variable to indicate the exception does not need to be saved.\nFor more infomation about using the built-in ($)_ variable, please see Discarding Output Properties.\n","categories":"","description":"Handles any unhandled exception within the Flow.","excerpt":"Handles any unhandled exception within the Flow.","ref":"/docs/reference/blocks/exceptions/handle-flow-exception/handle-flow-exception-block/","tags":"","title":"Handle Flow Exception"},{"body":"","categories":"","description":"Handle exceptions not handled by any Handle Block Exception or Handle Workspace Exception blocks.","excerpt":"Handle exceptions not handled by any Handle Block Exception or Handle Workspace Exception blocks.","ref":"/docs/reference/blocks/exceptions/handle-flow-exception/","tags":"","title":"Handle Flow Exception(s)"},{"body":"\r\rHandle Workspace Exception (Cortex.Blocks.Exceptions.HandleWorkspaceException.HandleWorkspaceExceptionBlock)\nDescription Handles any unhandled Exception within its workspace.\nFor more information, please see Unhandled Exceptions.\nExamples Handle and save the Exception This example will handle any unhandled exception within the block’s workspace; saving the exception to a variable, so the flow execution can use it to make decisions or take further action.\nProperties    Property Value Notes     Exception ($)Exception, with no value ($)Exception is a variable that will be set to a dynamic value    Result The block will handle any unhandled exception within the block’s workspace and save the exception to the ($)Exception variable for use later in the flow execution.\n Handle and discard the Exception This example will handle any unhandled exception within the block’s workspace; not saving the exception to a variable, as the flow execution does not need it to make decisions or take further action.\nProperties    Property Value Notes     Exception ($)_, with no value ($)_ is a built-in variable that indicates the flow execution does not need to save the exception, so it can be discarded    Result The block will handle any unhandled exception within the block’s workspace, but will not save the exception as the ($)_ variable indicates it is not needed and can be discarded.\nFor more infomation about using the built-in ($)_ variable, please see Discarding Output Properties.\n Properties Exception The Exception that is handled.\nException can be any Exception data type.\nIf the flow execution does not need the exception, it can be discarded by assigning the built-in ($)_ variable.\nFor more infomation about using the built-in ($)_ variable, please see Discarding Output Properties.\n         Data Type dynamic   Property Type Output   Default Value ($)Exception with no value    Exceptions No exceptions are thrown by the block.\nRemarks Block Restrictions The following restrictions apply to this block:\n A workspace cannot contain more than one Handle Workspace Exception block. If more than one is added to a workspace, it will be reported as a message when trying to debug the flow. The Handle Workspace Exception block will only handle the first unhandled exception within its workspace. This is to prevent infinite recursion within the flow. Subsequent unhandled exceptions are passed to the next relevant exception handling block. For more information about chaining of exception handling blocks and passing of exceptions, please see Exception Handling.  Unhandled Exceptions If an exception thrown by a block is not handled by any connected Handle Block Exception blocks, it will be passed to the Handle Workspace Exception block on the same workspace.\nIf the workspace does not contain a Handle Workspace Exception block it will be rethrown by the Workspace block the workspace belongs to.\nThis process repeats until:\n The exception is handled, or The exception reaches the flow’s top-level workspace, is not handled by any Handle Block Exception blocks and the top-level workspace does not contain a Handle Workspace Exception block. At this stage, the exception is handled by the flow’s Handle Flow Exception block.  If an exception occurs within the workspace of the Handle Flow Exception block and is not handled, the flow will end with a status of Error.\nFor more information about chaining of exception handling blocks and passing of exceptions, please see Exception Handling.\nWhy does the Exception property return a dynamic data type? The decision for the Exception to return a dynamic data type rather than an Exception data type, was to avoid users having to cast the exception to its correct type to be able to use all of its properties.\nAs a result, any issues with using the Exception data type (i.e. trying to access a property it does not have) will not be reported as messages when trying to debug the flow; they will only be discovered when the flow execution reaches the part of the flow with the issue.\nIf it is desirable to have any issues reported as messages when trying to debug the flow, the user can cast the exception to its correct type.\nUsing the built-in ($)_ variable to discard the Exception Sometimes when an exception occurs the flow execution wants to use the exception to make decisions or take further action. However, there are occasions when the exception is not needed, and being forced to create another variable to save the exception is extra work for no benefit. In these circumstances it is possible to use the built-in ($)_ variable to indicate the exception does not need to be saved.\nFor more infomation about using the built-in ($)_ variable, please see Discarding Output Properties.\n","categories":"","description":"Handles any unhandled exception within its workspace.","excerpt":"Handles any unhandled exception within its workspace.","ref":"/docs/reference/blocks/exceptions/handle-workspace-exception/handle-workspace-exception-block/","tags":"","title":"Handle Workspace Exception"},{"body":"","categories":"","description":"Handle exceptions not handled by any Handle Block Exception blocks.","excerpt":"Handle exceptions not handled by any Handle Block Exception blocks.","ref":"/docs/reference/blocks/exceptions/handle-workspace-exception/","tags":"","title":"Handle Workspace Exception(s)"},{"body":"ICommand (Cortex.DataTypes.Data.ICommand)\nSummary Properties Command Text Parameters Known limitations None\nSee also TODO:\n AnyCommand AnyCommands QueryCommand NonQueryCommand  ","categories":"","description":"The interface defining data source commands.","excerpt":"The interface defining data source commands.","ref":"/docs/reference/data-types/data/icommand/","tags":"","title":"ICommand"},{"body":"","categories":"","description":"Perform if-else like conditional decision making.","excerpt":"Perform if-else like conditional decision making.","ref":"/docs/reference/blocks/decisions/if/","tags":"","title":"If Else"},{"body":"\r\rIf Null Exit Bottom (Cortex.Blocks.Decisions.If.IfNullExitBottomBlock`1)\nDescription Checks if a given Value is null; if so the flow execution exits via the block’s bottom port (green tick), otherwise it exits via the right port (red cross).\nFor information about null, please see Null and Nullable Types.\nExamples Value is null This example will check if null is null.\nProperties    Property Value Notes     Value ($)Value, with value null ($)Value is a variable of type String    Result null is null, so the flow execution exits via the block’s bottom port (green tick).\n Value is not null This example will check if \"The quick brown fox jumps over the lazy dog\" is null.\nProperties    Property Value Notes     Value ($)Value, with value \"The quick brown fox jumps over the lazy dog\" ($)Value is a variable of type String    Result \"The quick brown fox jumps over the lazy dog\" is not null, so the flow execution exits via the block’s right port (red cross).\n Properties Value The Value to check is null.\nFor information about null, please see Null and Nullable Types.\n         Data Type TValue   Property Type Input   Default Value ($)Value with value null    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     PropertyNotNullableException Thrown when Value is given a non-nullable value type.    Remarks Null and Nullable Types For information about null, please see Null and Nullable Types.\n","categories":"","description":"Checks if a given value is `null`; if so the flow execution exits via the block's bottom port, otherwise it exits via the right port.","excerpt":"Checks if a given value is `null`; if so the flow execution exits via the block's bottom port, otherwise it exits via the right port.","ref":"/docs/reference/blocks/decisions/if/if-null-exit-bottom-block-1/","tags":"","title":"If Null Exit Bottom"},{"body":"\r\rIf Null Exit Right (Cortex.Blocks.Decisions.If.IfNullExitRightBlock`1)\nDescription Checks if a given Value is null; if so the flow execution exits via the block’s right port (green tick), otherwise it exits via the bottom port (red cross).\nFor information about null, please see Null and Nullable Types.\nExamples Value is null This example will check if null is null.\nProperties    Property Value Notes     Value ($)Value, with value null ($)Value is a variable of type String    Result null is null, so the flow execution exits via the block’s right port (green tick).\n Value is not null This example will check if \"The quick brown fox jumps over the lazy dog\" is null.\nProperties    Property Value Notes     Value ($)Value, with value \"The quick brown fox jumps over the lazy dog\" ($)Value is a variable of type String    Result \"The quick brown fox jumps over the lazy dog\" is not null, so the flow execution exits via the block’s bottom port (red cross).\n Properties Value The Value to check is null.\nFor information about null, please see Null and Nullable Types.\n         Data Type TValue   Property Type Input   Default Value ($)Value with value null    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     PropertyNotNullableException Thrown when Value is given a non-nullable value type.    Remarks Null and Nullable Types For information about null, please see Null and Nullable Types.\n","categories":"","description":"Checks if a given value is `null`; if so the flow execution exits via the block's right port, otherwise it exits via the bottom port.","excerpt":"Checks if a given value is `null`; if so the flow execution exits via the block's right port, otherwise it exits via the bottom port.","ref":"/docs/reference/blocks/decisions/if/if-null-exit-right-block-1/","tags":"","title":"If Null Exit Right"},{"body":"\r\rIf True Exit Bottom (Cortex.Blocks.Decisions.If.IfTrueExitBottomBlock)\nDescription Checks if a given Value evaluates to true; if so the flow execution exits via the block’s bottom port (green tick), otherwise it exits via the right port (red cross).\nExamples Value is true This example will check if 1 + 1 == 2 evaluates to true or false.\nProperties    Property Value Notes     Value ($)Value, with value 1 + 1 == 2 ($)Value is a variable whose value evaluates to type Boolean    Result 1 + 1 == 2 is true, so the flow execution exits via the block’s bottom port (green tick).\n Value is false This example will check if 1 + 1 == 1 evaluates to true or false.\nProperties    Property Value Notes     Value ($)Value, with value 1 + 1 == 1 ($)Value is a variable whose value evaluates to type Boolean    Result 1 + 1 == 1 is false, so the flow execution exits via the block’s right port (red cross).\n Properties Value The Value to check evaluates to true or false.\n         Data Type Boolean   Property Type Input   Default Value ($)Value with value false    Exceptions No exceptions are thrown by the block.\nRemarks No remarks for the block.\n","categories":"","description":"Checks if a given value evaluates to `true`; if so the flow execution exits via the block's bottom port, otherwise it exits via the right port.","excerpt":"Checks if a given value evaluates to `true`; if so the flow execution exits via the block's bottom port, otherwise it exits via the right port.","ref":"/docs/reference/blocks/decisions/if/if-true-exit-bottom-block/","tags":"","title":"If True Exit Bottom"},{"body":"\r\rIf True Exit Right (Cortex.Blocks.Decisions.If.IfTrueExitRightBlock)\nDescription Checks if a given Value evaluates to true; if so the flow execution exits via the block’s right port (green tick), otherwise it exits via the bottom port (red cross).\nExamples Value is true This example will check if 1 + 1 == 2 evaluates to true or false.\nProperties    Property Value Notes     Value ($)Value, with value 1 + 1 == 2 ($)Value is a variable whose value evaluates to type Boolean    Result 1 + 1 == 2 is true, so the flow execution exits via the block’s right port (green tick).\n Value is false This example will check if 1 + 1 == 1 evaluates to true or false.\nProperties    Property Value Notes     Value ($)Value, with value 1 + 1 == 1 ($)Value is a variable whose value evaluates to type Boolean    Result 1 + 1 == 1 is false, so the flow execution exits via the block’s bottom port (red cross).\n Properties Value The Value to check evaluates to true or false.\n         Data Type Boolean   Property Type Input   Default Value ($)Value with value false    Exceptions No exceptions are thrown by the block.\nRemarks No remarks for the block.\n","categories":"","description":"Checks if a given value evaluates to `true`; if so the flow execution exits via the block's right port, otherwise it exits via the bottom port.","excerpt":"Checks if a given value evaluates to `true`; if so the flow execution exits via the block's right port, otherwise it exits via the bottom port.","ref":"/docs/reference/blocks/decisions/if/if-true-exit-right-block/","tags":"","title":"If True Exit Right"},{"body":"Indexes Overview TODO: Overview/summary\nBlocks which use Indexes ","categories":"","description":"This page describes the concept of Indexes.","excerpt":"This page describes the concept of Indexes.","ref":"/docs/reference/concepts/indexes/","tags":"","title":"Indexes"},{"body":"InfiniteLoopException (Cortex.Exceptions.Loops.InfiniteLoopException)\nTODO: The exception thrown when…\nThe format of the exception message is as follows:\nTODO: Format How to fix TODO: How to fix…\n","categories":"","description":"The exception thrown when an infinite loop can occur.","excerpt":"The exception thrown when an infinite loop can occur.","ref":"/docs/reference/exceptions/loops/infiniteloopexception/","tags":"","title":"InfiniteLoopException"},{"body":"\rCortex Evolution can be deployed on-premise across multiple servers to provide improved scale and high availability (HA), or to a single server if scale and HA aren’t required.\n\r","categories":"","description":"Information on installing Cortex Evolution to virtual machines or physical servers on-premise.","excerpt":"Information on installing Cortex Evolution to virtual machines or physical servers on-premise.","ref":"/docs/getting-started/on-premise/","tags":"","title":"Install On-Premise"},{"body":"Int16 (System.Int16)\nSummary The Int16 data type is used to represent a whole number from -32,768 through 32,767.\n         Category: Numbers   Name: Int16   Full Name: System.Int16   Alias: short   Description: A whole number from -32,768 through 32,767   Size: 2 bytes   Default Value: 0   Can be used as: Int16, Int32, Int64, Single, Double, Object, dynamic   Can be cast to: N/A    Remarks Create an Int16 The following table shows some of the ways that an Int16 can be created.\n   Method Example Result Editor Support Notes     Use an Int16 expression (Int16)(1 + 1) 2 Expression Add    (System.Int16)(1 - 1) 0 Expression Subtract    (short)(1 * 1) 1 Expression Multiply    (short)(1 / 1) 1 Expression Divide    Int16.MaxValue 32767 Expression Maximum value of an Int16. See Int16.MaxValue    Int16.MinValue -32768 Expression Minimum value of an Int16. See Int16.MinValue    Int16.Parse(\"1\") 1 Expression Attempts to parse text and convert it to an Int16 value. See Int16.Parse    Convert.ToInt16(\"1\") 1 Expression Attempts to convert text to an Int16 value. See Convert.ToInt16    Convert Int16 to Text The following table shows some of the ways that an Int16 can be converted to text.\n   Method Example Result Editor Support Notes     Use ToString ((Int16)1).ToString() \"1\" Expression See Int16.ToString    ($)Int16Variable.ToString() where ($)Int16Variable has an Int16 value of 1 \"1\" Expression See Int16.ToString   Use Convert.ToString Convert.ToString((Int16)1) \"1\" Expression See Convert.ToString    Convert.ToString(($)Int16Variable) where ($)Int16Variable has an Int16 value of 1 \"1\" Expression See Convert.ToString   Use Convert Object To Text block where Object property has an Int16 value of 1 \"1\" N/A See Convert Object To Text   Use Convert Object To Json block where Object property has an Int16 value of 1 \"1\" N/A See Convert Object To Json    Property Editor Support  The Expression Editor is available for Input properties where the data type is Int16. The Literal Editor is available for Input properties where the data type is Int16.  Expression syntax is not supported within the Literal Editor for the Int16 data type.   The Variable Editor is available for InputOutput and Output properties where the data type is Int16.  Known Limitations None\nSee Also Related Types  Int32 Int64 Single Double  Related Concepts  Working with Numbers  External Documentation  System.Int16  ","categories":"","description":"Used to represent a whole number from `-32,768` through `32767`.","excerpt":"Used to represent a whole number from `-32,768` through `32767`.","ref":"/docs/reference/data-types/numbers/int16/","tags":"","title":"Int16"},{"body":"Int32 (System.Int32)\nSummary The Int32 data type is used to represent a whole number from -2,147,483,648 through 2,147,483,647.\n         Category: Numbers   Name: Int32   Full Name: System.Int32   Alias: int   Description: A whole number from -2,147,483,648 through 2,147,483,647   Size: 4 bytes   Default Value: 0   Can be used as: Int32, Int64, Single, Double, Object, dynamic   Can be cast to: Int16, as long as value is from -32,768 through 32,767 (e.g. (Int16)32767 or (System.Int16)32767 or (short)32767)    Remarks Create an Int32 The following table shows some of the ways that an Int32 can be created.\n   Method Example Result Editor Support Notes     Declare an Int32 literal 0 0 Literal, Expression Zero    1 1 Literal, Expression Positive    -1 -1 Literal, Expression Negative   Use an Int32 expression 1 + 1 2 Expression Add    1 - 1 0 Expression Subtract    1 * 1 1 Expression Multiply    1 / 1 1 Expression Divide    Int32.MaxValue 2147483647 Expression Maximum value of an Int32. See Int32.MaxValue    Int32.MinValue -2147483648 Expression Minimum value of an Int32. See Int32.MinValue    Int32.Parse(\"1\") 1 Expression Attempts to parse text and convert it to an Int32 value. See Int32.Parse    Convert.ToInt32(\"1\") 1 Expression Attempts to convert text to an Int32 value. See Convert.ToInt32    Please see Instantiating an Int32 Value for further information.\nConvert Int32 to Text The following table shows some of the ways that an Int32 can be converted to text.\n   Method Example Result Editor Support Notes     Use ToString 1.ToString() \"1\" Expression See Int32.ToString    ($)Int32Variable.ToString() where ($)Int32Variable has a value of 1 \"1\" Expression See Int32.ToString   Use Convert.ToString Convert.ToString(1) \"1\" Expression See Convert.ToString    Convert.ToString(($)Int32Variable) where ($)Int32Variable has a value of 1 \"1\" Expression See Convert.ToString   Use Convert Object To Text block where Object property has a value of 1 \"1\" N/A See Convert Object To Text   Use Convert Object To Json block where Object property has a value of 1 \"1\" N/A See Convert Object To Json    Please see Representing an Int32 as a String for further information.\nProperty Editor Support  The Expression Editor is available for Input properties where the data type is Int32. The Literal Editor is available for Input properties where the data type is Int32.  Expression syntax is not supported within the Literal Editor for the Int32 data type.   The Variable Editor is available for InputOutput and Output properties where the data type is Int32.  Known Limitations None\nSee Also Related Types  Int16 Int64 Single Double  Related Concepts  Working with Numbers  External Documentation  System.Int32  ","categories":"","description":"Used to represent a whole number from `-2,147,483,648` through `2,147,483,647`.","excerpt":"Used to represent a whole number from `-2,147,483,648` through `2,147,483,647`.","ref":"/docs/reference/data-types/numbers/int32/","tags":"","title":"Int32"},{"body":"Int64 (System.Int64)\nSummary The Int64 data type is used to represent a whole number from -9,223,372,036,854,775,808 through 9,223,372,036,854,775,807.\n         Category: Numbers   Name: Int64   Full Name: System.Int64   Alias: long   Description: A whole number from -9,223,372,036,854,775,808 through 9,223,372,036,854,775,807   Size: 8 bytes   Default Value: 0   Can be used as: Int64, Single, Double, Object, dynamic   Can be cast to: Int16, as long as value is from -32,768 through 32,767 (e.g. (Int16)32767 or (System.Int16)32767 or (short)32767)    Int32, as long as value is from -2,147,483,648 through 2,147,483,647 (e.g. (Int32)2147483647 or (System.Int32)2147483647 or (int)2147483647)    Remarks Create an Int64 The following table shows some of the ways that an Int64 can be created.\n   Method Example Result Editor Support Notes     Declare an Int64 literal 9223372036854775807 9223372036854775807 Literal, Expression Positive, where value is greater than 2,147,483,647. If it is between 0 and 2,147,483,647 it will only be an Int64 if the property’s data type is also Int64, otherwise it will be an Int32.    -9223372036854775808 -9223372036854775808 Literal, Expression Negative, where value is less than -2,147,483,648. If it is between -2,147,483,648 and 0 it will only be an Int64 if the property’s data type is also Int64, otherwise it will be an Int32.   Use an Int64 expression (Int64)(1 + 1) 2 Expression Add    (System.Int64)(1 - 1) 0 Expression Subtract    (long)(1 * 1) 1 Expression Multiply    (long)(1 / 1) 1 Expression Divide    Int64.MaxValue 9223372036854775807 Expression Maximum value of an Int64. See Int64.MaxValue    Int64.MinValue -9223372036854775808 Expression Minimum value of an Int64. See Int64.MinValue    Int64.Parse(\"1\") 1 Expression Attempts to parse text and convert it to an Int64 value. See Int64.Parse    Convert.ToInt64(\"1\") 1 Expression Attempts to convert text to an Int64 value. See Convert.ToInt64    Please see Instantiating an Int64 Value for further information.\nConvert Int64 to Text The following table shows some of the ways that an Int64 can be converted to text.\n   Method Example Result Editor Support Notes     Use ToString ((Int64)1).ToString() \"1\" Expression See Int64.ToString    ($)Int64Variable.ToString() where ($)Int64Variable has an Int64 value of 1 \"1\" Expression See Int64.ToString   Use Convert.ToString Convert.ToString((Int64)1) \"1\" Expression See Convert.ToString    Convert.ToString(($)Int64Variable) where ($)Int64Variable has an Int64 value of 1 \"1\" Expression See Convert.ToString   Use Convert Object To Text block where Object property has an Int64 value of 1 \"1\" N/A See Convert Object To Text   Use Convert Object To Json block where Object property has an Int64 value of 1 \"1\" N/A See Convert Object To Json    Please see Representing an Int64 as a String for further information.\nProperty Editor Support  The Expression Editor is available for Input properties where the data type is Int64. The Literal Editor is available for Input properties where the data type is Int64.  Expression syntax is not supported within the Literal Editor for the Int64 data type.   The Variable Editor is available for InputOutput and Output properties where the data type is Int64.  Known Limitations None\nSee Also Related Types  Int16 Int32 Single Double  Related Concepts  Working with Numbers  External Documentation  System.Int64  ","categories":"","description":"Used to represent a whole number from `-9,223,372,036,854,775,808` through `9,223,372,036,854,775,807`.","excerpt":"Used to represent a whole number from `-9,223,372,036,854,775,808` through `9,223,372,036,854,775,807`.","ref":"/docs/reference/data-types/numbers/int64/","tags":"","title":"Int64"},{"body":"InvalidConnectionStringException (Cortex.Exceptions.Data.InvalidConnectionStringException)\nException thrown when an invalid connection string is used.\nThe format of the exception message is as follows:\n\"TODO. Please click the HelpLink for more information on how to fix this.\" TODO: This is an example of how we can do exceptions with categories and error codes\n   Category Error Code Notes     BasicCredentials 300 Some notes    301 Some notes    302 Some notes   BasicCredentials 300 Some notes    301 Some notes    302 Some notes   BasicCredentials 300 Some notes    301 Some notes    302 Some notes   BasicCredentials 300 Some notes    301 Some notes    302 Some notes   BasicCredentials 300 Some notes    301 Some notes    302 Some notes   BasicCredentials 300 Some notes    301 Some notes    302 Some notes   BasicCredentials 300 Some notes    301 Some notes    302 Some notes   BasicCredentials 300 Some notes    301 Some notes    302 Some notes   BasicCredentials 300 Some notes    301 Some notes    302 Some notes    BasicCredentials.AccessTokenUri 300 How to fix TODO:\n301 How to fix TODO:\n302 How to fix TODO:\n","categories":"","description":"Exception thrown when an invalid connection string is used.","excerpt":"Exception thrown when an invalid connection string is used.","ref":"/docs/reference/exceptions/data/invalidconnectionstringexception/","tags":"","title":"InvalidConnectionStringException"},{"body":"InvalidFolderNameException (Cortex.Exceptions.FilesAndFolders.InvalidFolderNameException)\nThe exception thrown when specifying an invalid folder name.\nThe format of the exception message is as follows:\n\"TODO. Please click the HelpLink for more information on how to fix this.\" How to fix TODO:\n","categories":"","description":"The exception thrown when a folder name is invalid.","excerpt":"The exception thrown when a folder name is invalid.","ref":"/docs/reference/exceptions/files-and-folders/invalidfoldernameexception/","tags":"","title":"InvalidFolderNameException"},{"body":"InvalidPathException (Cortex.Exceptions.FilesAndFolders.InvalidPathException)\nThe exception thrown when specifying an invalid file or folder path.\nThe format of the exception message is as follows:\n\"TODO. Please click the HelpLink for more information on how to fix this.\" How to fix TODO:\n","categories":"","description":"The exception thrown when a file or folder path is invalid.","excerpt":"The exception thrown when a file or folder path is invalid.","ref":"/docs/reference/exceptions/files-and-folders/invalidpathexception/","tags":"","title":"InvalidPathException"},{"body":"InvalidPropertyValueException (Cortex.Exceptions.Common.Property.InvalidPropertyValueException)\nThe exception thrown when a property is provided with an invalid value.\nThe format of the exception message is as follows:\n\"The value of the property could not be evaluated.\" How to fix Provide a valid value for the property.\n","categories":"","description":"The exception thrown when a property is provided with an invalid value.","excerpt":"The exception thrown when a property is provided with an invalid value.","ref":"/docs/reference/exceptions/common/property/invalidpropertyvalueexception/","tags":"","title":"InvalidPropertyValueException"},{"body":"","categories":"","description":"Check if a date time is equal to another date time, before it, after it, or between two date times.","excerpt":"Check if a date time is equal to another date time, before it, after it, or between two date times.","ref":"/docs/reference/blocks/date-and-time/is-date-time/","tags":"","title":"Is Date Time"},{"body":"\r\rIs Date Time After (Cortex.Blocks.DateAndTime.IsDateTime.IsDateTimeAfterBlock)\nDescription Checks if a Date Time is after a given Date Time To Compare.\nExamples Date Time is after Date Time To Compare This example will check if 2022-01-01T00:00:00+00:00 is after 2021-01-01T00:00:00+00:00.\nProperties    Property Value Notes     Date Time ($)DateTime, with value of DateTimeOffset that has a text representation of 2022-01-01T00:00:00+00:00 ($)DateTime is a variable of type DateTimeOffset   Date Time To Compare ($)DateTimeToCompare, with value of DateTimeOffset that has a text representation of 2021-01-01T00:00:00+00:00 ($)DateTimeToCompare is a variable of type DateTimeOffset   Date Time Is After ($)DateTimeIsAfter, with no value ($)DateTime is a variable that will be set to a Boolean value    Result Checking if 2022-01-01T00:00:00+00:00 is after 2021-01-01T00:00:00+00:00 will result in the variable ($)DateTimeIsAfter being updated to the following:\ntrue  Date Time is before Date Time To Compare This example will check if 2021-01-01T00:00:00+00:00 is after 2022-01-01T00:00:00+00:00.\nProperties    Property Value Notes     Date Time ($)DateTime, with value of DateTimeOffset that has a text representation of 2021-01-01T00:00:00+00:00 ($)DateTime is a variable of type DateTimeOffset   Date Time To Compare ($)DateTimeToCompare, with value of DateTimeOffset that has a text representation of 2022-01-01T00:00:00+00:00 ($)DateTimeToCompare is a variable of type DateTimeOffset   Date Time Is After ($)DateTimeIsAfter, with no value ($)DateTime is a variable that will be set to a Boolean value    Result Checking if 2021-01-01T00:00:00+00:00 is after 2022-01-01T00:00:00+00:00 will result in the variable ($)DateTimeIsAfter being updated to the following:\nfalse  Date Time is equal to Date Time To Compare This example will check if 2022-01-01T00:00:00+00:00 is after 2022-01-01T00:00:00+00:00.\nProperties    Property Value Notes     Date Time ($)DateTime, with value of DateTimeOffset that has a text representation of 2022-01-01T00:00:00+00:00 ($)DateTime is a variable of type DateTimeOffset   Date Time To Compare ($)DateTimeToCompare, with value of DateTimeOffset that has a text representation of 2022-01-01T00:00:00+00:00 ($)DateTimeToCompare is a variable of type DateTimeOffset   Date Time Is After ($)DateTimeIsAfter, with no value ($)DateTime is a variable that will be set to a Boolean value    Result Checking if 2022-01-01T00:00:00+00:00 is after 2022-01-01T00:00:00+00:00 will result in the variable ($)DateTimeIsAfter being updated to the following:\nfalse  Properties Date Time The Date Time to check is after Date Time To Compare.\nFor more information about Date and Time, please see Working with Dates and Time.\n         Data Type DateTimeOffset   Property Type Input   Default Value ($)DateTime with DateTimeOffset value that has a text representation of 0001-01-01T00:00:00+00:00    Date Time To Compare The Date Time to check if Date Time is after.\nFor more information about Date and Time, please see Working with Dates and Time.\n         Data Type DateTimeOffset   Property Type Input   Default Value ($)DateTimeToCompare with DateTimeOffset value that has a text representation of 0001-01-01T00:00:00+00:00    Date Time Is After The result of the is after check.\nIf Date Time is after Date Time To Compare, the specified variable will be set to true, otherwise it will be set to false.\n         Data Type Boolean   Property Type Output   Default Value ($)DateTimeIsAfter with no value    Exceptions No exceptions are thrown by the block.\nRemarks Dates and Time The default text representation of Date and Time will be in the ISO 8601 Standard (e.g. 2021-11-05T08:48:08.0307614+00:00).\nFor more information, please see Working with Dates and Time.\n","categories":"","description":"Checks if a Date Time is after another Date Time.","excerpt":"Checks if a Date Time is after another Date Time.","ref":"/docs/reference/blocks/date-and-time/is-date-time/is-date-time-after-block/","tags":"","title":"Is Date Time After"},{"body":"\r\rIs Date Time Before (Cortex.Blocks.DateAndTime.IsDateTime.IsDateTimeBeforeBlock)\nDescription Checks if a Date Time is before a given Date Time To Compare.\nExamples Date Time is before Date Time To Compare This example will check if 2021-01-01T00:00:00+00:00 is before 2022-01-01T00:00:00+00:00.\nProperties    Property Value Notes     Date Time ($)DateTime, with value of DateTimeOffset that has a text representation of 2021-01-01T00:00:00+00:00 ($)DateTime is a variable of type DateTimeOffset   Date Time To Compare ($)DateTimeToCompare, with value of DateTimeOffset that has a text representation of 2022-01-01T00:00:00+00:00 ($)DateTimeToCompare is a variable of type DateTimeOffset   Date Time Is Before ($)DateTimeIsBefore, with no value ($)DateTime is a variable that will be set to a Boolean value    Result Checking if 2021-01-01T00:00:00+00:00 is before 2022-01-01T00:00:00+00:00 will result in the variable ($)DateTimeIsBefore being updated to the following:\ntrue  Date Time is after Date Time To Compare This example will check if 2022-01-01T00:00:00+00:00 is before 2021-01-01T00:00:00+00:00.\nProperties    Property Value Notes     Date Time ($)DateTime, with value of DateTimeOffset that has a text representation of 2022-01-01T00:00:00+00:00 ($)DateTime is a variable of type DateTimeOffset   Date Time To Compare ($)DateTimeToCompare, with value of DateTimeOffset that has a text representation of 2021-01-01T00:00:00+00:00 ($)DateTimeToCompare is a variable of type DateTimeOffset   Date Time Is Before ($)DateTimeIsBefore, with no value ($)DateTime is a variable that will be set to a Boolean value    Result Checking if 2022-01-01T00:00:00+00:00 is before 2021-01-01T00:00:00+00:00 will result in the variable ($)DateTimeIsBefore being updated to the following:\nfalse  Date Time is equal to Date Time To Compare This example will check if 2022-01-01T00:00:00+00:00 is before 2022-01-01T00:00:00+00:00.\nProperties    Property Value Notes     Date Time ($)DateTime, with value of DateTimeOffset that has a text representation of 2022-01-01T00:00:00+00:00 ($)DateTime is a variable of type DateTimeOffset   Date Time To Compare ($)DateTimeToCompare, with value of DateTimeOffset that has a text representation of 2022-01-01T00:00:00+00:00 ($)DateTimeToCompare is a variable of type DateTimeOffset   Date Time Is Before ($)DateTimeIsBefore, with no value ($)DateTime is a variable that will be set to a Boolean value    Result Checking if 2022-01-01T00:00:00+00:00 is before 2022-01-01T00:00:00+00:00 will result in the variable ($)DateTimeIsBefore being updated to the following:\nfalse  Properties Date Time The Date Time to check is before Date Time To Compare.\nFor more information about Date and Time, please see Working with Dates and Time.\n         Data Type DateTimeOffset   Property Type Input   Default Value ($)DateTime with DateTimeOffset value that has a text representation of 0001-01-01T00:00:00+00:00    Date Time To Compare The Date Time to check if Date Time is before.\nFor more information about Date and Time, please see Working with Dates and Time.\n         Data Type DateTimeOffset   Property Type Input   Default Value ($)DateTimeToCompare with DateTimeOffset value that has a text representation of 0001-01-01T00:00:00+00:00    Date Time Is Before The result of the is before check.\nIf Date Time is before Date Time To Compare, the specified variable will be set to true, otherwise it will be set to false.\n         Data Type Boolean   Property Type Output   Default Value ($)DateTimeIsBefore with no value    Exceptions No exceptions are thrown by the block.\nRemarks Dates and Time The default text representation of Date and Time will be in the ISO 8601 Standard (e.g. 2021-11-05T08:48:08.0307614+00:00).\nFor more information, please see Working with Dates and Time.\n","categories":"","description":"Checks if a Date Time is before another Date Time.","excerpt":"Checks if a Date Time is before another Date Time.","ref":"/docs/reference/blocks/date-and-time/is-date-time/is-date-time-before-block/","tags":"","title":"Is Date Time Before"},{"body":"\r\rIs Date Time Between (Cortex.Blocks.DateAndTime.IsDateTime.IsDateTimeBetweenBlock)\nDescription Checks if a Date Time is between the specified Start Date Time and End Date Time.\nExamples Date Time is between Start Date Time and End Date Time This example will check if 2021-06-01T00:00:00+00:00 is between 2021-01-01T00:00:00+00:00 and 2022-01-01T00:00:00+00:00.\nProperties    Property Value Notes     Date Time ($)DateTime, with value of DateTimeOffset that has a text representation of 2021-06-01T00:00:00+00:00 ($)DateTime is a variable of type DateTimeOffset   Start Date Time ($)StartDateTime, with value of DateTimeOffset that has a text representation of 2021-01-01T00:00:00+00:00 ($)StartDateTime is a variable of type DateTimeOffset   End Date Time ($)EndDateTime, with value of DateTimeOffset that has a text representation of 2022-01-01T00:00:00+00:00 ($)EndDateTime is a variable of type DateTimeOffset   Date Time Is Between ($)DateTimeIsBetween, with no value ($)DateTime is a variable that will be set to a Boolean value    Result Checking if 2021-06-01T00:00:00+00:00 is between 2021-01-01T00:00:00+00:00 and 2022-01-01T00:00:00+00:00 will result in the variable ($)DateTimeIsBetween being updated to the following:\ntrue  Date Time is not between Start Date Time and End Date Time This example will check if 2020-01-01T00:00:00+00:00 is between 2021-01-01T00:00:00+00:00 and 2022-01-01T00:00:00+00:00.\nProperties    Property Value Notes     Date Time ($)DateTime, with value of DateTimeOffset that has a text representation of 2020-01-01T00:00:00+00:00 ($)DateTime is a variable of type DateTimeOffset   Start Date Time ($)StartDateTime, with value of DateTimeOffset that has a text representation of 2021-01-01T00:00:00+00:00 ($)StartDateTime is a variable of type DateTimeOffset   End Date Time ($)EndDateTime, with value of DateTimeOffset that has a text representation of 2022-01-01T00:00:00+00:00 ($)EndDateTime is a variable of type DateTimeOffset   Date Time Is Between ($)DateTimeIsBetween, with no value ($)DateTime is a variable that will be set to a Boolean value    Result Checking if 2020-01-01T00:00:00+00:00 is between 2021-01-01T00:00:00+00:00 and 2022-01-01T00:00:00+00:00 will result in the variable ($)DateTimeIsBetween being updated to the following:\nfalse  Properties Date Time The Date Time to check is between Start Date Time and End Date Time.\nFor more information about Date and Time, please see Working with Dates and Time.\n         Data Type DateTimeOffset   Property Type Input   Default Value ($)DateTime with DateTimeOffset value that has a text representation of 0001-01-01T00:00:00+00:00    Start Date Time The Start Date Time to check against. This is inclusive, which means if Date Time is equal to it, it will be considered between.\nFor more information about Date and Time, please see Working with Dates and Time.\n         Data Type DateTimeOffset   Property Type Input   Default Value ($)StartDateTime with DateTimeOffset value that has a text representation of 0001-01-01T00:00:00+00:00    End Date Time The End Date Time to check against. This is inclusive, which means if Date Time is equal to it, it will be considered between.\nFor more information about Date and Time, please see Working with Dates and Time.\n         Data Type DateTimeOffset   Property Type Input   Default Value ($)EndDateTime with DateTimeOffset value that has a text representation of 0001-01-01T00:00:00+00:00    Date Time Is Between The result of the is between check.\nIf Date Time is between (and including) the Start Date Time and End Date Time, the specified variable will be set to true, otherwise it will be set to false.\n         Data Type Boolean   Property Type Output   Default Value ($)DateTimeIsBetween with no value    Exceptions No exceptions are thrown by the block.\nRemarks Dates and Time The default text representation of Date and Time will be in the ISO 8601 Standard (e.g. 2021-11-05T08:48:08.0307614+00:00).\nFor more information, please see Working with Dates and Time.\nStart Date Time and End Date Time are inclusive The Start Date Time and End Date Time properties are both inclusive, which means if Date Time is equal to either of them, it will be considered between.\nStart Date Time greater than End Date Time Start Date Time can be greater than End Date Time; as long as Date Time is between or equal to either of them the variable specified for Date Time Is Between will be set to true, otherwise it will be set to false.\n","categories":"","description":"Checks if a Date Time is between two Date Times.","excerpt":"Checks if a Date Time is between two Date Times.","ref":"/docs/reference/blocks/date-and-time/is-date-time/is-date-time-between-block/","tags":"","title":"Is Date Time Between"},{"body":"\r\rIs Date Time Equal (Cortex.Blocks.DateAndTime.IsDateTime.IsDateTimeEqualBlock)\nDescription Checks if a Date Time is equal to a given Date Time To Compare.\nExamples Date Time is equal to Date Time To Compare This example will check if 2022-01-01T00:00:00+00:00 is equal to 2022-01-01T00:00:00+00:00.\nProperties    Property Value Notes     Date Time ($)DateTime, with value of DateTimeOffset that has a text representation of 2022-01-01T00:00:00+00:00 ($)DateTime is a variable of type DateTimeOffset   Date Time To Compare ($)DateTimeToCompare, with value of DateTimeOffset that has a text representation of 2022-01-01T00:00:00+00:00 ($)DateTimeToCompare is a variable of type DateTimeOffset   Date Time Is Equal ($)DateTimeIsEqual, with no value ($)DateTime is a variable that will be set to a Boolean value    Result Checking if 2022-01-01T00:00:00+00:00 is equal 2022-01-01T00:00:00+00:00 will result in the variable ($)DateTimeIsEqual being updated to the following:\ntrue  Date Time is after Date Time To Compare This example will check if 2022-01-01T00:00:00+00:00 is equal to 2021-01-01T00:00:00+00:00.\nProperties    Property Value Notes     Date Time ($)DateTime, with value of DateTimeOffset that has a text representation of 2022-01-01T00:00:00+00:00 ($)DateTime is a variable of type DateTimeOffset   Date Time To Compare ($)DateTimeToCompare, with value of DateTimeOffset that has a text representation of 2021-01-01T00:00:00+00:00 ($)DateTimeToCompare is a variable of type DateTimeOffset   Date Time Is Equal ($)DateTimeIsEqual, with no value ($)DateTime is a variable that will be set to a Boolean value    Result Checking if 2022-01-01T00:00:00+00:00 is equal to 2021-01-01T00:00:00+00:00 will result in the variable ($)DateTimeIsEqual being updated to the following:\nfalse  Date Time is before Date Time To Compare This example will check if 2021-01-01T00:00:00+00:00 is equal to 2022-01-01T00:00:00+00:00.\nProperties    Property Value Notes     Date Time ($)DateTime, with value of DateTimeOffset that has a text representation of 2021-01-01T00:00:00+00:00 ($)DateTime is a variable of type DateTimeOffset   Date Time To Compare ($)DateTimeToCompare, with value of DateTimeOffset that has a text representation of 2022-01-01T00:00:00+00:00 ($)DateTimeToCompare is a variable of type DateTimeOffset   Date Time Is Equal ($)DateTimeIsEqual, with no value ($)DateTime is a variable that will be set to a Boolean value    Result Checking if 2021-01-01T00:00:00+00:00 is equal to 2022-01-01T00:00:00+00:00 will result in the variable ($)DateTimeIsEqual being updated to the following:\nfalse  Properties Date Time The Date Time to check is equal to Date Time To Compare.\nFor more information about Date and Time, please see Working with Dates and Time.\n         Data Type DateTimeOffset   Property Type Input   Default Value ($)DateTime with DateTimeOffset value that has a text representation of 0001-01-01T00:00:00+00:00    Date Time To Compare The Date Time to check if Date Time is equal to.\nFor more information about Date and Time, please see Working with Dates and Time.\n         Data Type DateTimeOffset   Property Type Input   Default Value ($)DateTimeToCompare with DateTimeOffset value that has a text representation of 0001-01-01T00:00:00+00:00    Date Time Is Equal The result of the is equal check.\nIf Date Time is equal to Date Time To Compare, the specified variable will be set to true, otherwise it will be set to false.\n         Data Type Boolean   Property Type Output   Default Value ($)DateTimeIsEqual with no value    Exceptions No exceptions are thrown by the block.\nRemarks Dates and Time The default text representation of Date and Time will be in the ISO 8601 Standard (e.g. 2021-11-05T08:48:08.0307614+00:00).\nFor more information, please see Working with Dates and Time.\n","categories":"","description":"Checks if a Date Time is equal to another Date Time.","excerpt":"Checks if a Date Time is equal to another Date Time.","ref":"/docs/reference/blocks/date-and-time/is-date-time/is-date-time-equal-block/","tags":"","title":"Is Date Time Equal"},{"body":"","categories":"","description":"Check if text is equal to another text, `null`, empty (i.e. `\"\"`), or whitespace (e.g. `\"     \"`).","excerpt":"Check if text is equal to another text, `null`, empty (i.e. `\"\"`), or whitespace (e.g. `\"     \"`).","ref":"/docs/reference/blocks/text/is-text/","tags":"","title":"Is Text"},{"body":"\r\rIs Text Empty (Cortex.Blocks.Text.IsText.IsTextEmptyBlock)\nDescription Checks if Text is empty (i.e. \"\") .\nFor information about empty, please see Empty Text and Whitespace.\nExamples Text is empty This example will check if \"\" is empty (i.e. \"\").\nProperties    Property Value Notes     Text ($)Text, with value \"\" ($)Text is a variable of type String   Text Is Empty ($)TextIsEmpty, with no value ($)TextIsEmpty is a variable that will be set to a Boolean value    Result \"\" is empty (i.e. \"\"), resulting in the variable ($)TextIsEmpty being updated to the following:\ntrue  Text is null This example will check if null is empty (i.e. \"\").\nProperties    Property Value Notes     Text ($)Text, with value null ($)Text is a variable of type String   Text Is Empty ($)TextIsEmpty, with no value ($)TextIsEmpty is a variable that will be set to a Boolean value    Result null is not empty (i.e. \"\"), resulting in the variable ($)TextIsEmpty being updated to the following:\nfalse  Text is whitespace This example will check if \" \" is empty (i.e. \"\").\nProperties    Property Value Notes     Text ($)Text, with value \" \" ($)Text is a variable of type String   Text Is Empty ($)TextIsEmpty, with no value ($)TextIsEmpty is a variable that will be set to a Boolean value    Result \" \" is not empty (i.e. \"\"), resulting in the variable ($)TextIsEmpty being updated to the following:\nfalse  Text is not empty This example will check if \"The quick brown fox jumps over the lazy dog\" is empty (i.e. \"\").\nProperties    Property Value Notes     Text ($)Text, with value \"The quick brown fox jumps over the lazy dog\" ($)Text is a variable of type String   Text Is Empty ($)TextIsEmpty, with no value ($)TextIsEmpty is a variable that will be set to a Boolean value    Result \"The quick brown fox jumps over the lazy dog\" is not empty (i.e. \"\"), resulting in the variable ($)TextIsEmpty being updated to the following:\nfalse  Properties Text The Text to check is empty (i.e. \"\").\n         Data Type String   Property Type Input   Default Value ($)Text with value \"\"    Text Is Empty The result of the is empty check.\nIf the Text is empty (i.e. \"\"), the specified variable will be set to true, otherwise it will be set to false.\n         Data Type Boolean   Property Type Output   Default Value ($)TextIsEmpty with no value    Exceptions No exceptions are thrown by the block.\nRemarks Null Text If Text is null the variable specified in the Text Is Empty property will be set to false. See Example above.\nWhitespace Text If Text is whitespace (e.g. \" \") the variable specified in the Text Is Empty property will be set to false. See Example above.\n","categories":"","description":"Checks if text is empty (i.e. `\"\"`).","excerpt":"Checks if text is empty (i.e. `\"\"`).","ref":"/docs/reference/blocks/text/is-text/is-text-empty-block/","tags":"","title":"Is Text Empty"},{"body":"\r\rIs Text Empty Or Whitespace (Cortex.Blocks.Text.IsText.IsTextEmptyOrWhitespaceBlock)\nDescription Checks if Text is empty (i.e. \"\") or whitespace (i.e. space, tab, carriage return, line feed characters).\nFor information about empty and whitespace, please see Empty Text and Whitespace.\nExamples Text is empty This example will check if \"\" is empty (i.e. \"\") or whitespace (i.e. space, tab, carriage return, line feed characters).\nProperties    Property Value Notes     Text ($)Text, with value \"\" ($)Text is a variable of type String   Text Is Empty Or Whitespace ($)TextIsEmptyOrWhitespace, with no value ($)TextIsEmptyOrWhitespace is a variable that will be set to a Boolean value    Result \"\" is empty (i.e. \"\"), resulting in the variable ($)TextIsEmptyOrWhitespace being updated to the following:\ntrue  Text is whitespace This example will check if \" \" is empty (i.e. \"\") or whitespace (i.e. space, tab, carriage return, line feed characters).\nProperties    Property Value Notes     Text ($)Text, with value \" \" ($)Text is a variable of type String   Text Is Empty Or Whitespace ($)TextIsEmptyOrWhitespace, with no value ($)TextIsEmptyOrWhitespace is a variable that will be set to a Boolean value    Result \" \" is whitespace, resulting in the variable ($)TextIsEmptyOrWhitespace being updated to the following:\ntrue  Text is null This example will check if null is empty (i.e. \"\") or whitespace (i.e. space, tab, carriage return, line feed characters).\nProperties    Property Value Notes     Text ($)Text, with value null ($)Text is a variable of type String   Text Is Empty Or Whitespace ($)TextIsEmptyOrWhitespace, with no value ($)TextIsEmptyOrWhitespace is a variable that will be set to a Boolean value    Result null is not empty (i.e. \"\") or whitespace (i.e. space, tab, carriage return, line feed characters), resulting in the variable ($)TextIsEmptyOrWhitespace being updated to the following:\nfalse  Text is not empty or whitespace This example will check if \"The quick brown fox jumps over the lazy dog\" is empty (i.e. \"\") or whitespace (i.e. space, tab, carriage return, line feed characters).\nProperties    Property Value Notes     Text ($)Text, with value \"The quick brown fox jumps over the lazy dog\" ($)Text is a variable of type String   Text Is Empty Or Whitespace ($)TextIsEmptyOrWhitespace, with no value ($)TextIsEmptyOrWhitespace is a variable that will be set to a Boolean value    Result \"The quick brown fox jumps over the lazy dog\" is not empty (i.e. \"\") or whitespace (i.e. space, tab, carriage return, line feed characters), resulting in the variable ($)TextIsEmptyOrWhitespace being updated to the following:\nfalse  Properties Text The Text to check is empty (i.e. \"\") or whitespace (i.e. space, tab, carriage return, line feed characters).\n         Data Type String   Property Type Input   Default Value ($)Text with value \"\"    Text Is Empty Or Whitespace The result of the is empty or whitespace check.\nIf the Text is empty (i.e. \"\") or whitespace (i.e. space, tab, carriage return, line feed characters), the specified variable will be set to true, otherwise it will be set to false.\n         Data Type Boolean   Property Type Output   Default Value ($)TextIsEmptyOrWhitespace with no value    Exceptions No exceptions are thrown by the block.\nRemarks Null Text If Text is null the variable specified in the Text Is Empty Or Whitespace property will be set to false. See Example above.\n","categories":"","description":"Checks if text is empty (i.e. `\"\"`) or whitespace (i.e. `space`, `tab`, `carriage return`, `line feed` characters).","excerpt":"Checks if text is empty (i.e. `\"\"`) or whitespace (i.e. `space`, `tab`, `carriage return`, `line feed` characters).","ref":"/docs/reference/blocks/text/is-text/is-text-empty-or-whitespace-block/","tags":"","title":"Is Text Empty Or Whitespace"},{"body":"\r\rIs Text Equal (Cortex.Blocks.Text.IsText.IsTextEqualBlock)\nDescription Checks if Text is equal to Text To Compare.\nExamples Text is equal to Text To Compare (Ordinal) This example will check if \"The quick brown fox jumps over the lazy dog\" is equal to \"The quick brown fox jumps over the lazy dog\".\nIt performs a case-sensitive, culture-insensitive comparison of text.\nProperties    Property Value Notes     Text ($)Text, with value \"The quick brown fox jumps over the lazy dog\" ($)Text is a variable of type String   Text To Compare ($)TextToCompare, with value \"The quick brown fox jumps over the lazy dog\" ($)TextToCompare is a variable of type String   Comparison Type ($)ComparisonType, with value StringComparison.Ordinal ($)ComparisonType is a variable of type StringComparison   Text Is Equal ($)TextIsEqual, with no value ($)TextIsEqual is a variable that will be set to a Boolean value    Result As this example is performing a case-sensitive, culture-insensitive comparison of text, \"The quick brown fox jumps over the lazy dog\" is equal to \"The quick brown fox jumps over the lazy dog\", as they match exactly, including casing. Therefore, the variable ($)TextIsEqual will be updated to the following:\ntrue  Text is not equal to Text To Compare (Ordinal) This example will check if \"The quick brown fox jumps over the lazy dog\" is equal to \"the quick brown fox jumps over the lazy dog\".\nIt performs a case-sensitive, culture-insensitive comparison of text.\nProperties    Property Value Notes     Text ($)Text, with value \"The quick brown fox jumps over the lazy dog\" ($)Text is a variable of type String   Text To Compare ($)TextToCompare, with value \"the quick brown fox jumps over the lazy dog\" ($)TextToCompare is a variable of type String   Comparison Type ($)ComparisonType, with value StringComparison.Ordinal ($)ComparisonType is a variable of type StringComparison   Text Is Equal ($)TextIsEqual, with no value ($)TextIsEqual is a variable that will be set to a Boolean value    Result As this example is performing a case-sensitive, culture-insensitive comparison of text, \"The quick brown fox jumps over the lazy dog\" is not equal to \"the quick brown fox jumps over the lazy dog\", as whilst the characters match exactly, the casing of the first \"T\" differs. Therefore, the variable ($)TextIsEqual will be updated to the following:\nfalse  Text is equal to Text To Compare (Ordinal Ignore Case) This example will check if \"The quick brown fox jumps over the lazy dog\" is equal to \"the quick brown fox jumps over the lazy dog\".\nIt performs a case-insensitive, culture-insensitive comparison of text.\nProperties    Property Value Notes     Text ($)Text, with value \"The quick brown fox jumps over the lazy dog\" ($)Text is a variable of type String   Text To Compare ($)TextToCompare, with value \"the quick brown fox jumps over the lazy dog\" ($)TextToCompare is a variable of type String   Comparison Type ($)ComparisonType, with value StringComparison.OrdinalIgnoreCase ($)ComparisonType is a variable of type StringComparison   Text Is Equal ($)TextIsEqual, with no value ($)TextIsEqual is a variable that will be set to a Boolean value    Result As this example is performing a case-insensitive, culture-insensitive comparison of text, \"The quick brown fox jumps over the lazy dog\" is equal to \"the quick brown fox jumps over the lazy dog\", as the characters match exactly, and casing is not considered. Therefore, the variable ($)TextIsEqual will be updated to the following:\ntrue  Properties Text The Text to check is equal to Text To Compare.\n         Data Type String   Property Type Input   Default Value ($)Text with value \"\"    Text To Compare The Text To Compare if Text is equal to.\n         Data Type String   Property Type Input   Default Value ($)TextToCompare with value \"\"    Comparison Type The Comparison Type specifying the rules used to compare if Text is equal to Text To Compare.\nFor information about the supported values for the Comparison Type property and examples of how it is determined whether two pieces of text match, please see Text Equality.\n         Data Type StringComparison   Property Type Input   Default Value ($)ComparisonType with value StringComparison.Ordinal    Text Is Equal Boolean indicating whether Text is equal to Text To Compare.\nIf they are equal the specified variable will be set to true, otherwise it will be set to false.\n         Data Type Boolean   Property Type Output   Default Value ($)TextIsEqual with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     ArgumentException Thrown when Comparison Type is not one of the specified StringComparison types (e.g. (StringComparison)10).    Remarks Comparison Types For information about the supported values for the Comparison Type property and examples of how it is determined whether two pieces of text match, please see Text Equality.\nNull vs empty If Text is null and Text To Compare is empty (i.e. \"\"), or vice versa, the variable specified in the Text Is Equal property is set to false, as null and \"\" are not equal.\n","categories":"","description":"Checks if a text is equal to another text.","excerpt":"Checks if a text is equal to another text.","ref":"/docs/reference/blocks/text/is-text/is-text-equal-block/","tags":"","title":"Is Text Equal"},{"body":"\r\rIs Text Null (Cortex.Blocks.Text.IsText.IsTextNullBlock)\nDescription Checks if Text is null.\nFor information about null, please see Null and Nullable Types.\nExamples Text is null This example will check if null is null.\nProperties    Property Value Notes     Text ($)Text, with value null ($)Text is a variable of type String   Text Is Null ($)TextIsNull, with no value ($)TextIsNull is a variable that will be set to a Boolean value    Result null is null, resulting in the variable ($)TextIsNull being updated to the following:\ntrue  Text is empty This example will check if empty (i.e. \"\") is null.\nProperties    Property Value Notes     Text ($)Text, with value \"\" ($)Text is a variable of type String   Text Is Null ($)TextIsNull, with no value ($)TextIsNull is a variable that will be set to a Boolean value    Result Empty (i.e. \"\") is not null, resulting in the variable ($)TextIsNull being updated to the following:\nfalse  Text is whitespace This example will check if \" \" is null.\nProperties    Property Value Notes     Text ($)Text, with value \" \" ($)Text is a variable of type String   Text Is Null ($)TextIsNull, with no value ($)TextIsNull is a variable that will be set to a Boolean value    Result \" \" is not null, resulting in the variable ($)TextIsNull being updated to the following:\nfalse  Text is not null This example will check if \"The quick brown fox jumps over the lazy dog\" is null.\nProperties    Property Value Notes     Text ($)Text, with value \"The quick brown fox jumps over the lazy dog\" ($)Text is a variable of type String   Text Is Null ($)TextIsNull, with no value ($)TextIsNull is a variable that will be set to a Boolean value    Result \"The quick brown fox jumps over the lazy dog\" is not null, resulting in the variable ($)TextIsNull being updated to the following:\nfalse  Properties Text The Text to check is null.\n         Data Type String   Property Type Input   Default Value ($)Text with value \"\"    Text Is Null The result of the is null check.\nIf the Text is null, the specified variable will be set to true, otherwise it will be set to false.\n         Data Type Boolean   Property Type Output   Default Value ($)TextIsNull with no value    Exceptions No exceptions are thrown by the block.\nRemarks Empty Text If Text is empty (i.e.. \"\") the variable specified in the Text Is Null property will be set to false. See Example above.\nWhitespace Text If Text is whitespace (e.g. \" \") the variable specified in the Text Is Null property will be set to false. See Example above.\n","categories":"","description":"Checks if text is `null`.","excerpt":"Checks if text is `null`.","ref":"/docs/reference/blocks/text/is-text/is-text-null-block/","tags":"","title":"Is Text Null"},{"body":"\r\rIs Text Null Or Empty (Cortex.Blocks.Text.IsText.IsTextNullOrEmptyBlock)\nDescription Checks if Text is null or empty (i.e. \"\").\nFor information about null, please see Null and Nullable Types.\nFor information about empty, please see Empty Text and Whitespace.\nExamples Text is null This example will check if null is null or empty (i.e. \"\").\nProperties    Property Value Notes     Text ($)Text, with value null ($)Text is a variable of type String   Text Is Null Or Empty ($)TextIsNullOrEmpty, with no value ($)TextIsNullOrEmpty is a variable that will be set to a Boolean value    Result null is null, resulting in the variable ($)TextIsNullOrEmpty being updated to the following:\ntrue  Text is empty This example will check if \"\" is null or empty (i.e. \"\").\nProperties    Property Value Notes     Text ($)Text, with value \"\" ($)Text is a variable of type String   Text Is Null Or Empty ($)TextIsNullOrEmpty, with no value ($)TextIsNullOrEmpty is a variable that will be set to a Boolean value    Result \"\" is empty (i.e. \"\"), resulting in the variable ($)TextIsNullOrEmpty being updated to the following:\ntrue  Text is whitespace This example will check if \" \" is null or empty (i.e. \"\").\nProperties    Property Value Notes     Text ($)Text, with value \" \" ($)Text is a variable of type String   Text Is Null Or Empty ($)TextIsNullOrEmpty, with no value ($)TextIsNullOrEmpty is a variable that will be set to a Boolean value    Result \" \" is not null or empty (i.e. \"\"), resulting in the variable ($)TextIsNullOrEmpty being updated to the following:\nfalse  Text is not null or empty This example will check if \"The quick brown fox jumps over the lazy dog\" is null or empty (i.e. \"\").\nProperties    Property Value Notes     Text ($)Text, with value \"The quick brown fox jumps over the lazy dog\" ($)Text is a variable of type String   Text Is Null Or Empty ($)TextIsNullOrEmpty, with no value ($)TextIsNullOrEmpty is a variable that will be set to a Boolean value    Result \"The quick brown fox jumps over the lazy dog\" is not null or empty (i.e. \"\"), resulting in the variable ($)TextIsNullOrEmpty being updated to the following:\nfalse  Properties Text The Text to check is null or empty (i.e. \"\").\n         Data Type String   Property Type Input   Default Value ($)Text with value \"\"    Text Is Null Or Empty The result of the is null or empty check.\nIf the Text is null or empty (i.e. \"\"), the specified variable will be set to true, otherwise it will be set to false.\n         Data Type Boolean   Property Type Output   Default Value ($)TextIsNullOrEmpty with no value    Exceptions No exceptions are thrown by the block.\nRemarks Whitespace Text If Text is whitespace (e.g. \" \") the variable specified in the Text Is Null Or Empty property will be set to false. See Example above.\n","categories":"","description":"Checks if text is `null` or empty (i.e. `\"\"`).","excerpt":"Checks if text is `null` or empty (i.e. `\"\"`).","ref":"/docs/reference/blocks/text/is-text/is-text-null-or-empty-block/","tags":"","title":"Is Text Null Or Empty"},{"body":"\r\rIs Text Null, Empty Or Whitespace (Cortex.Blocks.Text.IsText.IsTextNullEmptyOrWhitespaceBlock)\nDescription Checks if Text is null, empty (i.e. \"\") or whitespace (i.e. space, tab, carriage return, line feed characters).\nFor information about null, please see Null and Nullable Types.\nFor information about empty and whitespace, please see Empty Text and Whitespace.\nExamples Text is null This example will check if null is null, empty (i.e. \"\") or whitespace (i.e. space, tab, carriage return, line feed characters).\nProperties    Property Value Notes     Text ($)Text, with value null ($)Text is a variable of type String   Text Is Null Empty Or Whitespace ($)TextIsNullEmptyOrWhitespace, with no value ($)TextIsNullEmptyOrWhitespace is a variable that will be set to a Boolean value    Result null is null, resulting in the variable ($)TextIsNullEmptyOrWhitespace being updated to the following:\ntrue  Text is empty This example will check if \"\" is null, empty (i.e. \"\") or whitespace (i.e. space, tab, carriage return, line feed characters).\nProperties    Property Value Notes     Text ($)Text, with value \"\" ($)Text is a variable of type String   Text Is Null Empty Or Whitespace ($)TextIsNullEmptyOrWhitespace, with no value ($)TextIsNullEmptyOrWhitespace is a variable that will be set to a Boolean value    Result \"\" is empty (i.e. \"\"), resulting in the variable ($)TextIsNullEmptyOrWhitespace being updated to the following:\ntrue  Text is whitespace This example will check if \" \" is null, empty (i.e. \"\") or whitespace (i.e. space, tab, carriage return, line feed characters).\nProperties    Property Value Notes     Text ($)Text, with value \" \" ($)Text is a variable of type String   Text Is Null Empty Or Whitespace ($)TextIsNullEmptyOrWhitespace, with no value ($)TextIsNullEmptyOrWhitespace is a variable that will be set to a Boolean value    Result \" \" is whitespace (i.e. space, tab, carriage return, line feed characters), resulting in the variable ($)TextIsNullEmptyOrWhitespace being updated to the following:\ntrue  Text is not null, empty or whitespace This example will check if \"The quick brown fox jumps over the lazy dog\" is null, empty (i.e. \"\") or whitespace (i.e. space, tab, carriage return, line feed characters).\nProperties    Property Value Notes     Text ($)Text, with value \"The quick brown fox jumps over the lazy dog\" ($)Text is a variable of type String   Text Is Null Empty Or Whitespace ($)TextIsNullEmptyOrWhitespace, with no value ($)TextIsNullEmptyOrWhitespace is a variable that will be set to a Boolean value    Result \"The quick brown fox jumps over the lazy dog\" is not null, empty (i.e. \"\") or whitespace (i.e. space, tab, carriage return, line feed characters), resulting in the variable ($)TextIsNullEmptyOrWhitespace being updated to the following:\nfalse  Properties Text The Text to check is null, empty (i.e. \"\") or whitespace (i.e. space, tab, carriage return, line feed characters).\n         Data Type String   Property Type Input   Default Value ($)Text with value \"\"    Text Is Null Empty Or Whitespace The result of the is null, empty or whitespace check.\nIf the Text is null, empty (i.e. \"\") or whitespace (i.e. space, tab, carriage return, line feed characters), the specified variable will be set to true, otherwise it will be set to false.\n         Data Type Boolean   Property Type Output   Default Value ($)TextIsNullEmptyOrWhitespace with no value    Exceptions No exceptions are thrown by the block.\nRemarks No remarks for the block.\n","categories":"","description":"Checks if text is `null`, empty (i.e. `\"\"`) or whitespace (i.e. `space`, `tab`, `carriage return`, `line feed` characters).","excerpt":"Checks if text is `null`, empty (i.e. `\"\"`) or whitespace (i.e. `space`, `tab`, `carriage return`, `line feed` characters).","ref":"/docs/reference/blocks/text/is-text/is-text-null-empty-or-whitespace-block/","tags":"","title":"Is Text Null, Empty Or Whitespace"},{"body":"ISO 8601 Standard Overview TODO Should this disappear and move to date time formats? If so, need to rework links\n","categories":"","description":"This page gives information about the ISO 8601 Standard.","excerpt":"This page gives information about the ISO 8601 Standard.","ref":"/docs/reference/concepts/iso-8601-standard/","tags":"","title":"ISO 8601 Standard"},{"body":"","categories":"","description":"Join a set of values together (using a separator) to create text.","excerpt":"Join a set of values together (using a separator) to create text.","ref":"/docs/reference/blocks/text/join-text/","tags":"","title":"Join Text"},{"body":"\r\rJoin Text (Cortex.Blocks.Text.JoinText.JoinTextBlock`1)\nDescription Joins a set of Values together as Text, using the given Separator between each value.\nExamples Join a set of String Values together with a pipe Separator This example will join the set of String values, [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"], together with a pipe separator (i.e. \"|\").\nProperties    Property Value Notes     Values ($)Values, with value [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"] ($)Values is a variable of type IEnumerable\u003cString\u003e   Separator ($)Separator, with value \"|\" ($)Separator is a variable of type String   Text ($)Text, with no value ($)Text is a variable that will be set to a String    Result Joining [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"] together as text with a pipe separator (i.e. \"|\"), results in the variable ($)Text being updated to the following:\n\"Sunday|Monday|Tuesday|Wednesday|Thursday|Friday|Saturday\"  Join a set of Int32 Values together with a comma Separator This example will join the set of Int32 values, [1, 2, 3], together with a comma separator (i.e. \",\").\nProperties    Property Value Notes     Values ($)Values, with value [1, 2, 3] ($)Values is a variable of type IEnumerable\u003cInt32\u003e   Separator ($)Separator, with value \",\" ($)Separator is a variable of type String   Text ($)Text, with no value ($)Text is a variable that will be set to a String    Result Each Int32 value will be converted to its text representation, by calling its ToString method (i.e. value.ToString()).\nJoining [1, 2, 3] together as text with a comma separator (i.e. \",\"), results in the variable ($)Text being updated to the following:\n\"1,2,3\"  Properties Values The set of Values to join together as Text.\nValues will be joined together in the order they are defined.\nValues can be any IEnumerable\u003cTValue\u003e, where TValue represents the type of values.\nEach non-text value will be converted to its text representation, by calling its ToString method (i.e. value.ToString()).\n         Data Type IEnumerable\u003cTValue\u003e   Property Type Input   Default Value ($)Values with value []    Separator The text to use as a Separator between each of the Values.\nSeparator can contain zero or more characters.\nThe Separator is only included in the resultant Text if Values has more than 1 item.\n         Data Type String   Property Type Input   Default Value ($)Separator with value \"\"    Text The resultant Text containing the specified Values converted to their text representation and separated by the given Separator.\n         Data Type String   Property Type Output   Default Value ($)Text with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     PropertyNullException Thrown when Values is null.   OutOfMemoryException Thrown when the length of the resultant Text is longer than the maximum allowed length (2,147,483,647).    Remarks Null or empty Separator If Separator is null or empty (i.e. \"\"), an empty text (i.e. \"\") will be used as the separator.\nNull or empty Value in Values If any value in Values is null or empty (i.e. \"\"), an empty text (i.e. \"\") will be used as the value.\n","categories":"","description":"Joins a set of values together as text, using the given separator between each value.","excerpt":"Joins a set of values together as text, using the given separator between each value.","ref":"/docs/reference/blocks/text/join-text/join-text-block-1/","tags":"","title":"Join Text"},{"body":"","categories":"","description":"Blocks related to working with Json.","excerpt":"Blocks related to working with Json.","ref":"/docs/reference/blocks/json/","tags":"","title":"Json"},{"body":"KeyNotPresentException (Cortex.Exceptions.Dictionaries.KeyNotPresentException)\nThe exception thrown when trying to get an item from a dictionary, or set an item in a dictionary, with a key that is not present.\nThe format of the exception message is as follows:\n\"TODO. Please click the HelpLink for more information on how to fix this.\" How to fix TODO:\n","categories":"","description":"The exception thrown when trying to get an item from a dictionary, or set an item in a dictionary, with a key that is not present.","excerpt":"The exception thrown when trying to get an item from a dictionary, or set an item in a dictionary, with a key that is not present.","ref":"/docs/reference/exceptions/dictionaries/keynotpresentexception/","tags":"","title":"KeyNotPresentException"},{"body":"KeyPresentException (Cortex.Exceptions.Dictionaries.KeyPresentException)\nThe exception thrown when trying to add an item to a dictionary with a key that is already present.\nThe format of the exception message is as follows:\n\"TODO. Please click the HelpLink for more information on how to fix this.\" How to fix TODO:\n","categories":"","description":"The exception thrown when trying to add an item to a dictionary with a key that is already present.","excerpt":"The exception thrown when trying to add an item to a dictionary with a key that is already present.","ref":"/docs/reference/exceptions/dictionaries/keypresentexception/","tags":"","title":"KeyPresentException"},{"body":"Keys Overview TODO: Overview/summary\nBlocks which use Keys ","categories":"","description":"This page describes the concept of Keys.","excerpt":"This page describes the concept of Keys.","ref":"/docs/reference/concepts/keys/","tags":"","title":"Keys"},{"body":"KeysNotPresentException (Cortex.Exceptions.Dictionaries.KeysNotPresentException)\nThe exception thrown when trying to get items from a dictionary, or set items in a dictionary, and one of the keys used to find the items is not present.\nThe format of the exception message is as follows:\n\"TODO. Please click the HelpLink for more information on how to fix this.\" How to fix TODO:\n","categories":"","description":"The exception thrown when trying to get items from a dictionary, or set items in a dictionary, and one of the keys used to find the items is not present.","excerpt":"The exception thrown when trying to get items from a dictionary, or set items in a dictionary, and one of the keys used to find the items is not present.","ref":"/docs/reference/exceptions/dictionaries/keysnotpresentexception/","tags":"","title":"KeysNotPresentException"},{"body":"","categories":"","description":"Blocks related to working with Lists.","excerpt":"Blocks related to working with Lists.","ref":"/docs/reference/blocks/lists/","tags":"","title":"Lists"},{"body":"","categories":"","description":"Exceptions related to Lists","excerpt":"Exceptions related to Lists","ref":"/docs/reference/exceptions/lists/","tags":"","title":"List"},{"body":"Literals, Variables and Expressions This page describes the different syntax that can be used when entering values for block properties.\nLiterals A literal is a value that does not need to be calculated during the execution of the flow. A literal can be of any data type.\nString literals Note that a string requires double quotes to indicate that it is a string literal.\n\"Example String\" TODO: Chars\nInteger literals 1 TODO: Talk about integer sizing TODO: floating points\nBoolean literals true or false Object literals { \"StringProperty\": \"Example String\", \"IntegerProperty\": 1, \"BooleanProperty\": true, \"EmptyDictionaryProperty\": {}, \"EmptyListProperty\": [], \"EmptyObjectProperty\": {}, \"EmptyStructureProperty\": {}, \"NullProperty\": null } If the [Cortex Flow Engine][TODO Link] can determine that a literal object matches a known data type, then the engine will convert the literal object to that data type, otherwise it will convert it to a [structure][TODO Link].\nTODO: talk about $type TODO: talk about using the data type of properties TODO: talk about dictionaries TODO: talk about structures TODO: Datetimeoffset/timeperiod TODO: Enums\nDictionary literals { \"Key 1\" : \"\", \"Key 2\" : 1, \"Key 3\" : true, \"Key 4\" : {}, \"Key 5\" : [], \"Key 6\" : null } TODO: Talk about heterogenous vs homogenous dictionaries. TODO: talk about keys and uniqueness TODO: talk about complex keys TODO: talk about {} and dynamic vs object TODO: talk about typed dictionaries\nList literals [ \"Example String\", 1, true, {}, [], null ] TODO: talk about [] and dynamic vs object TODO: talk about typed lists TODO: Talk about heterogenous vs homogenous lists.\nVariable Reference TODO: Review\nA variable reference is a value that has been stored within a variable. The value that the variable evaluates to will not be constant, it will depend on what value was assigned to it.\nWhen the variable contains a Structure or a List, you can index into the variable to access values within the Structure/List.\nA variable reference ($)variableName A structure property ($)variableName.PropertyName A list value Note that you can index into a list using an int variable as well as with an int literal.\n($)variableName[5] ($)variableName[($)indexVariable] Expressions TODO: Review\nAn expression is a value that will be calculated when the execution reaches the block. Cortex expressions use C# syntax so anything that is a valid C# expression will be valid. Full namespaces or keywords for built-in C# types will need to be used to reference a .NET data type.\nArithmetic expressions ($)intVar1 equals 6 and ($)intVar2 equals 3\n   Expression Result     ($)intVar1 + ($)intVar2 9   ($)intVar1 / ($)intVar2 2    String expressions ($)stringVar1 equals \"hello\" and ($)stringVar2 equals \"world\"\n   Expression Result Notes     ($)stringVar1 + \" \" + ($)stringVar2 \"hello world\"    $\"{($)stringVar1} {($)stringVar2}\" \"hello world\" using .NET string interpolation   @\"c:\\programs\\file.txt\" \"c:\\\\programs\\\\file.txt\" using .NET verbatim string literal   $@\"c:\\programs\\{($)stringVar1}.txt\" \"c:\\\\programs\\\\hello.txt\" using .NET string interpolation and verbatim string literal    TODO: Other data type expressions like above with literals\nDictionary expressions TODO\nList expressions TODO\nCreating a new object    Expression Result     new Structure() {}    Using a method on an object ($)stringVar1 equals \"hello\" and ($)stringVar2 equals \"123\"\n   Expression Result     stringVar1.ToUpper() \"HELLO\"   int.Parse(stringVar2) 123    Explicitly cast a variable ($)longVar equals 1 as a long\n   Expression Result Notes     (int)($)longVar 1 as an int   (System.Int32)($)longVar 1 as an int    ","categories":"","description":"This page describes the different syntax that can be used when entering values for block properties.","excerpt":"This page describes the different syntax that can be used when entering values for block properties.","ref":"/docs/reference/concepts/literal-variables-expressions/","tags":"","title":"Literals, Variables and Expressions"},{"body":"","categories":"","description":"Log events to the filesystem.","excerpt":"Log events to the filesystem.","ref":"/docs/reference/blocks/logs/log-event/","tags":"","title":"Log Event"},{"body":"\r\rLog Event (Cortex.Blocks.Logs.LogEvent.LogEventBlock)\nDescription Logs an event to the filesystem.\nAdditional options can be specified:\n Event Type can be specified to define the type of event being logged. Event Severity can be specified to define the severity of the event being logged. Started At can be specified to define the Date and Time the event being logged started. Ended At can be specified to define the Date and Time the event being logged ended.  Examples Log an event This example will log details about all tasks of a multi-stage process that provisions a new user at a company.\n Process: \"Provision New User\"  Stage: \"Configure Active Directory\"  Task: \"Add User to Azure Active Directory\" Task: \"Add User to On-Premise Active Directory\"   Stage: \"Configure Email\"  Task: \"Create Outlook Account\" Task: \"Create Default Signature\"      Properties    Property Value Notes     Event Details ($)EventDetails, with value {\"Process\":{\"Provision New User\":{\"Stages\":[{\"Configure Active Directory\":{\"Tasks\":[\"Add User to Azure Active Directory\",\"Add User to On-Premise Active Directory\"]}},{\"Configure Email\":{\"Tasks\":[\"Create Outlook Account\",\"Create Default Signature\"]}}]}}} ($)EventDetails is a variable of type Structure.   Event Type ($)EventType, with value \"User Provisioning\" ($)EventType is a variable of type String.   Event Severity ($)EventSeverity, with value EventSeverity.Information ($)EventSeverity is a variable of type Nullable\u003cEventSeverity\u003e.   Started At ($)StartedAt, with value of DateTimeOffset that has a text representation of 2021-11-15T10:05:32.0000000Z ($)StartedAt is a variable of type Nullable\u003cDateTimeOffset\u003e.   Ended At ($)EndedAt, with value of DateTimeOffset that has a text representation of 2021-11-15T10:06:12.0000000Z ($)EndedAt is a variable of type Nullable\u003cDateTimeOffset\u003e.    Result Logging the event results in the following log being written:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49  { \"@t\":\"2021-11-15T10:06:15.0000000Z\", \"@mt\":\"{@Event}\", \"Event\":{ \"Type\":\"User Provisioning\",  \"Duration\":{ \"StartedAt\":\"2021-11-15T10:05:32.0000000Z\", \"EndedAt\":\"2021-11-15T10:06:12.0000000Z\",  \"InMs\":40000, \"$type\":\"EventDurationDetails\" }, \"Details\":{ \"Process\":{ \"Provision New User\":{ \"Stages\":[ { \"Configure Active Directory\":{ \"Tasks\":[ \"Add User to Azure Active Directory\", \"Add User to On-Premise Active Directory\" ] } }, { \"Configure Email\":{ \"Tasks\":[ \"Create Outlook Account\", \"Create Default Signature\" ] } } ] }  }, \"Correlation\":{ \"TraceId\":null, \"SpanId\":null, \"ParentSpanId\":null, \"$type\":\"EventCorrelationDetails\" }, \"Service\":{ \"Type\":null, \"IpAddressOrFqdn\":null, \"$type\":\"ServiceDetails\" }, \"$type\":\"StructuredEventLog\" } } }   For information about the format of the logs written, see Anatomy of a Log.\nFor information about where the logs are written to, see Configuring Logging.\n Properties Event Details The Event Details to log.\nEvent Details can be any object of any data type; it does not have to be a String. Using a data type like a Structure allows you to create richer logs with a more defined format. This makes them easier to consume, process and query by other systems that consume logs, such as Grafana, ElasticSearch and Splunk, which are commonly used for log analysis, reporting and dashboarding.\n         Data Type dynamic   Property Type Input   Default Value ($)EventDetails with value null    Event Type Event Type can be specified to define the type of event being logged.\nEvent Type is a free format text property. If left blank or null it will default to Cortex.Blocks.Logs.LogEvent.LogEventBlock.\n         Data Type String   Property Type Input   Default Value ($)EventType with value null    Event Severity Event Severity can be specified to define the severity of the event being logged.\nEvent Severity can be any of the following predefined values:\n EventSeverity.Verbose - Logs that contain the most detailed messages. These messages may contain sensitive application data. These logs should never be enabled in a production environment. EventSeverity.Debug - Logs that are used for interactive investigation during development. These logs should primarily contain information useful for debugging and have no long-term value. EventSeverity.Information - Logs that track the general path of the flow execution. These logs should have long-term value. EventSeverity.Warning - Logs that highlight an abnormal or unexpected event in the path of the flow execution, but do not otherwise cause the flow execution to exit. EventSeverity.Error - Logs that highlight when the current flow execution exits due to an error. These should indicate a failure in the current flow execution, not a service-wide or process-wide failure. EventSeverity.Fatal - Logs that describe an unrecoverable service or process error, or a catastrophic failure that requires immediate attention.  Event Severity can also be left blank or set to null, in which case it will default to EventSeverity.Information.\nLogs with an Event Severity of EventSeverity.Information, have the event severity ommitted from the log that is written to the filesystem. This is to save disk space, as typically the highest volume of logs produced are Information logs. This cannot be changed and is a restriction of the underlying logging system used. All non-Information logs do include the event severity in the log that is written to the filesystem.\n         Data Type Nullable\u003cEventSeverity\u003e   Property Type Input   Default Value ($)EventSeverity with value null    Started At Started At can be specified to define the Date and Time the event being logged started.\nIts text representation will be in the ISO 8601 Standard (e.g. 2021-11-05T08:48:08.0307614+00:00).\nIf Started At is left blank or set to null, a value of null will be logged.\nFor more information about Date and Time, please see Working with Dates and Time.\n         Data Type Nullable\u003cDateTimeOffset\u003e   Property Type Input   Default Value ($)StartedAt with value null    Ended At Ended At can be specified to define the Date and Time the event being logged ended.\nIts text representation will be in the ISO 8601 Standard (e.g. 2021-11-05T08:48:08.0307614+00:00).\nIf Ended At is left blank or set to null, a value of null will be logged.\nFor more information about Date and Time, please see Working with Dates and Time.\n         Data Type Nullable\u003cDateTimeOffset\u003e   Property Type Input   Default Value ($)EndedAt with value null    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     ArgumentException Thrown when Event Severity is not one of the specified EventSeverity types (e.g. (EventSeverity)10).   PropertyNullException Thrown when Event Details is null.    Remarks Configuring Logging Log settings exist for the following Cortex Services:\n   Service Default File Location Description     Cortex Debugger Service \u003cinstall-location\u003e\\appsettings.json Debugger Service is used to debug flows when developing them in Cortex Studio   Cortex Flow Execution Service \u003cinstall-location\u003e\\appsettings.json Flow Execution Service is used to execute published flows in a runtime environment (e.g. Development, UAT, Production)    An example of the log settings can be found below (some settings that do not need to be modified have been ommitted):\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  { \"Cortex.Blocks.Logs\": { \"Using\": [ \"Serilog.Sinks.File\" ], \"MinimumLevel\": { \"Default\": \"Verbose\"  }, \"WriteTo\": [ { \"Name\": \"File\", \"Args\": { \"path\": \"%ProgramData%/Cortex/Logging/LogEventBlock-.json\", \"rollingInterval\": \"Day\", \"fileSizeLimitBytes\": 50000000, \"rollOnFileSizeLimit\": true, \"retainedFileCountLimit\": 365  } } ] } }   A list of the main log settings (highlighted above) and an accompanying description can be found below:\n   Log Setting Default Value Description     Default \"Verbose\" The default minimum log level that will be logged.Possible options are \"Verbose\", \"Debug\", \"Information\", \"Warning\", \"Error\", \"Fatal\".The order of log levels is \"Verbose\"-\u003e\"Debug\"-\u003e\"Information\"-\u003e\"Warning\"-\u003e\"Error\"-\u003e\"Fatal\". When setting the default log level, that level and every level to its right will be logged.   path \"%ProgramData%/Cortex/Logging/LogEventBlock-.json\" The location that logs will be written to.This value supports use of environment variables, as seen in the default value.If any part of the location does not exist, the logging will attempt to create it.The file names written will include a date format after the - and before .json (e.g. \"LogEventBlock-yyyyMMdd.json\" -\u003e \"LogEventBlock-20210921.json\")The date format used will be decided by the value specified in rollingInterval.The file name may also include a file count number and is added automatically to make sure file names are unique. This can happen if rollOnFileSizeLimit is set to true and a log file reaches the size specified in fileSizeLimitBytes. It can also happen if the log file is locked by another process, preventing it from being written to.   rollingInterval \"Day\" The time interval at which the logging system will create and start logging to a new log file.Possible options are \"Infinite\", \"Year\", \"Month\", \"Day\", \"Hour\", \"Minute\".Infinite means that the log files never roll over based on a time interval.   fileSizeLimitBytes 50000000 The maximum file size in bytes that the loggging system will write to. Once this size is exceeded the logging system will create and start logging to a new log file.Null can be used to mean unlimited size.rollOnFileSizeLimit must be set to true for this setting to take effect.   rollOnFileSizeLimit true Whether the loggging system should start creating a new log file if the current one reaches the maximum file size specified in fileSizeLimitBytes.Possible options are true and false.   retainedFileCountLimit 365 The maximum number of files to retain on disk. Once this number is reached, the loggging system will start delete the oldest file.    Please note that if the appsetting.json file cannot be found for one of the services, the logger will use the same default settings specified above.\nAnatomy of a Log The format of the logs written by this block are the same as the logs written by the rest of the Cortex Services. This is to ensure logging is consistent and done one way within Cortex Evolution. Hopefully this will make it easier to work with logging, and also make it easier to gain a holistic picture into what has happened to a flow execution throughout its entire lifecycle (i.e. from initial request to returning the response to the caller), rather than just what happens inside of the flow.\nAn example log can be found below:\n{ \"@t\":\"2021-11-15T10:06:15.0000000Z\", \"@mt\":\"{@Event}\", \"@l\":\"Debug\", \"Event\":{ \"Type\":\"User Provisioning\", \"Duration\":{ \"StartedAt\":\"2021-11-15T10:05:32.0000000Z\", \"EndedAt\":\"2021-11-15T10:06:12.0000000Z\", \"InMs\":40000, \"$type\":\"EventDurationDetails\" }, \"Details\":{ \"Process\":{ \"Provision New User\":{ \"Stages\":[ { \"Configure Active Directory\":{ \"Tasks\":[ \"Add User to Azure Active Directory\", \"Add User to On-Premise Active Directory\" ] } }, { \"Configure Email\":{ \"Tasks\":[ \"Create Outlook Account\", \"Create Default Signature\" ] } } ] } } }, \"Correlation\":{ \"TraceId\":null, \"SpanId\":null, \"ParentSpanId\":null, \"$type\":\"EventCorrelationDetails\" }, \"Service\":{ \"Type\":null, \"IpAddressOrFqdn\":null, \"$type\":\"ServiceDetails\" }, \"$type\":\"StructuredEventLog\" } } } A list of each of the log’s properties and an accompanying description can be found below:\n   Log Property Description     @t The date and time the log was written. The format is ISO 8601 Standard.   @mt The message template for the log. This is set to log the entire Event.   @l The level for the log. The value of Event Severity is used here.   Event The event that was logged.   Event.Type The type of event that was logged. This can be used for log analysis and reporting. The value of Event Type is used here.   Event.Duration Contains the date and time the event started at, ended at, and its duration.   Event.Duration.StartedAt The date and time the event started. The format is ISO 8601 Standard. The value of Started At is used here.   Event.Duration.EndedAt The date and time the event ended. The format is ISO 8601 Standard. The value of Ended At is used here.   Event.Duration.InMs The duration of the event in milliseconds and is calculated using Event.Duration.StartedAt and Event.Duration.EndedAt .   Event.Duration.$type The .Net data type used to represent the duration data. This can be ignored and is an artefact of the underlying implementation.   Event.Details Contains the details of the event. The value of Event Details is written as a child property of this (e.g. in this example Event.Details.Process).   Event.Correlation Contains details that can be used to correlate related events. E.g. The act of starting a new flow execution may result in multiple Cortex Services processing the event. As a result, each service may write its own logs, and additionally the flow developer may also write out multiple logs during the flow execution. The Correlation details allow all of these logs to easily be correlated back together when performing log analysis and reporting to gain a full picture of everything that happened.   Event.Correlation.TraceId ID common to all related logs, so they can be easily correlated together.   Event.Correlation.SpanId Unique ID for each log, so tools like Grafana can display a call stack, showing each step that occurred when processing an event.   Event.Correlation.ParentSpanId The ID of the step that called this step of processing, so tools like Grafana can display a call stack, showing each step that occurred when processing an event.   Event.Correlation.$type The .Net data type used to represent the correlation data. This can be ignored and is an artefact of the underlying implementation.   Event.Service Contains details of the Cortex Service that logged this event, and will allow enhanced log analysis and reporting to gain a full picture of everything that happened.   Event.Service.Type The type of the Cortex Service that logged this event.   Event.Service.IpAddressOrFqdn The IP address or fully qualified domain name of the Cortex Service that logged this event.   Event.Service.$type The .Net data type used to represent the service data. This can be ignored and is an artefact of the underlying implementation.   Event.$type The .Net data type used to represent the event data. This can be ignored and is an artefact of the underlying implementation.    Null Event Type If Event Type is left blank or null it will default to Cortex.Blocks.Logs.LogEvent.LogEventBlock.\nNull Event Severity If Event Severity is left blank or set to null, it will default to EventSeverity.Information.\nNull Started At If Started At is left blank or set to null, a value of null will be logged.\nNull Ended At If Ended At is left blank or set to null, a value of null will be logged.\n","categories":"","description":"Logs an event to the filesystem.","excerpt":"Logs an event to the filesystem.","ref":"/docs/reference/blocks/logs/log-event/log-event-block/","tags":"","title":"Log Event"},{"body":"","categories":"","description":"Blocks related to creating Logs.","excerpt":"Blocks related to creating Logs.","ref":"/docs/reference/blocks/logs/","tags":"","title":"Logs"},{"body":"","categories":"","description":"Blocks used to perform looping.","excerpt":"Blocks used to perform looping.","ref":"/docs/reference/blocks/loops/","tags":"","title":"Loops"},{"body":"","categories":"","description":"Exceptions related to Loops.","excerpt":"Exceptions related to Loops.","ref":"/docs/reference/exceptions/loops/","tags":"","title":"Loops"},{"body":"\r\rMove File (Cortex.Blocks.FilesAndFolders.MoveFile.MoveFileBlock)\nDescription Moves a file at the specified File Path to the given Destination Path, with an option to Overwrite the file if it already exists.\nExamples Move a file to a folder keeping the same file name This example will move \"C:\\Source\\OriginalFile.txt\" to \"C:\\Destination\", with the same file name of \"OriginalFile.txt\".\nIn this example assume \"C:\\Destination\" does not already contain a file named \"OriginalFile.txt\", so overwrite can be set to either true or false and it will still work.\nProperties    Property Value Notes     File Path ($)FilePath, with value @\"C:\\Source\\OriginalFile.txt\" ($)FilePath is a variable of type String   Destination Path ($)DestinationPath, with value @\"C:\\Destination\" ($)DestinationPath is a variable of type String   Overwrite ($)Overwrite, with value false ($)Overwrite is a variable of type Boolean    Result Moving \"C:\\Source\\OriginalFile.txt\" to \"C:\\Destination\" that does not already contain a file named \"OriginalFile.txt\" will:\n Move \"C:\\Source\\OriginalFile.txt\" to \"C:\\Destination\\OriginalFile.txt\" with:  The content left unchanged. The Date Created left unchanged. The Date Accessed left unchanged. The Date Modified left unchanged. The File attributes left unchanged.     Move a file to a folder with a new name This example will move \"C:\\Source\\OriginalFile.txt\" to \"C:\\Destination\", with a new file name of \"NewFile.txt\".\nTo rename the file when it is being moved, please note that the Destination Path must be a file path, rather than a folder path (e.g. \"C:\\Destination\\NewFile.txt\" rather than \"C:\\Destination\").\nIn this example assume \"C:\\Destination\" does not already contain a file named \"NewFile.txt\", so overwrite can be set to either true or false and it will still work.\nProperties    Property Value Notes     File Path ($)FilePath, with value @\"C:\\Source\\OriginalFile.txt\" ($)FilePath is a variable of type String   Destination Path ($)DestinationPath, with value @\"C:\\Destination\\NewFile.txt\" ($)DestinationPath is a variable of type String   Overwrite ($)Overwrite, with value false ($)Overwrite is a variable of type Boolean    Result Move \"C:\\Source\\OriginalFile.txt\" to the path \"C:\\Destination\\NewFile.txt\" that does not already exist will:\n Move \"C:\\Source\\OriginalFile.txt\" to \"C:\\Destination\\NewFile.txt\" with:  The content left unchanged. The Date Created left unchanged. The Date Accessed left unchanged. The Date Modified left unchanged. The File attributes left unchanged.     Move a file to a folder overwriting any file that already exists with the same name This example will move \"C:\\Source\\FileAlreadyExists.txt\" to \"C:\\Destination\", with the same file name of \"FileAlreadyExists.txt\".\nIn this example assume \"C:\\Destination\" already contains a file named \"FileAlreadyExists.txt\", so overwrite must be set to true to ensure the content of the existing file can be overwritten.\nProperties    Property Value Notes     File Path ($)FilePath, with value @\"C:\\Source\\FileAlreadyExists.txt\" ($)FilePath is a variable of type String   Destination Path ($)DestinationPath, with value @\"C:\\Destination\" ($)DestinationPath is a variable of type String   Overwrite ($)Overwrite, with value true ($)Overwrite is a variable of type Boolean    Result Moving \"C:\\Source\\FileAlreadyExists.txt\" to \"C:\\Destination\" and overwriting the existing file named \"FileAlreadyExists.txt\" will:\n Overwrite the existing file at \"C:\\Destination\\FileAlreadyExists.txt\" with:  The content copied from \"C:\\Source\\FileAlreadyExists.txt\". The Date Created copied from \"C:\\Source\\FileAlreadyExists.txt\". The Date Accessed copied from \"C:\\Source\\FileAlreadyExists.txt\" The Date Modified copied from \"C:\\Source\\FileAlreadyExists.txt\". The File Attributes copied from \"C:\\Source\\FileAlreadyExists.txt\".     Properties File Path The File Path to move the file from.\nThe File Path is case-insensitive, cannot contain any wildcard characters, and any trailing spaces will be automatically removed.\nFor information about the supported file path formats (i.e. absolute, relative, UNC etc.) and examples of each, please see File \u0026 Folder Paths.\n         Data Type String   Property Type Input   Default Value ($)FilePath with value null    Destination Path The Destination Path to move the file to.\nThe Destination Path is case-insensitive, cannot contain any wildcard characters, and any trailing spaces will be automatically removed.\nThe Destination Path can either point to a folder or a file:\n If it points to a folder, the moved file will have the name specified in the File Path. If it points to a file, the moved file will have the name specified in the Destination Path.  Any non-existing folders within the Destination Path will be automatically created.\nFor information about the supported file and folder path formats (i.e. absolute, relative, UNC etc.) and examples of each, including how it is determined if a path points to a folder or a file, please see File \u0026 Folder Paths.\n         Data Type String   Property Type Input   Default Value ($)DestinationPath with value null    Overwrite Option to Overwrite the file in the Destination Path if it already exists.\nIf the file exists, Overwrite must be set to true, otherwise an OperationFailedException will be thrown. By default, this is set to false to avoid implicit and accidental overwriting of existing files.\n         Data Type Boolean   Property Type Input   Default Value ($)Overwrite with value false    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     InvalidPathException The Destination Path contains leading spaces.    The Destination Path contains only whitespace, or the NUL character (i.e. \\0), or contains one or more invalid characters (i.e. \", *, ?, |, \u003c, \u003e, :, \\, /) in any file or folder names.    The Destination Path (if it points to a file), or the Destination Path (if it points to a folder) plus the file name, exceeds the system-defined maximum length (typically 32,767 characters).   OperationFailedException The File Path does not exist.    The File Path points to a folder.    The File Path contains leading spaces.    The File Path contains only whitespace, or the NUL character (i.e. \\0), or contains one or more invalid characters (i.e. \", *, ?, |, \u003c, \u003e, :, \\, /) in any file or folder names.    The File Path exceeds the system-defined maximum length (typically 32,767 characters).    The File Path or Destination Path is invalid (for example, it is on an unmapped drive).    The file in the specified Destination Path exists and overwrite is false.    The file in the specified Destination Path exists, is read-only and overwrite is true.    The user the flow is executing as does not have the required permissions to move the file (e.g. not having read access to the File Path or write access to the Destination Path).    An unexpected error occurs when moving the file.   PropertyEmptyException Thrown when File Path or Destination Path are empty (i.e. \"\").   PropertyNullException Thrown when File Path or Destination Path are null.    Remarks File and Folder Paths For information about the supported file and folder path formats (i.e. absolute, relative, UNC etc.) and examples of each, including how it is determined if a path points to a folder or a file, please see File \u0026 Folder Paths.\nFile Path and Destination Path need escaping File Path and Destination Path require \\ characters to be escaped, otherwise each unescaped \\ will be reported as an Invalid property value message when trying to debug the flow.\nEscaping can be done in two ways:\n Escaping the \\ character with another \\ character (e.g. \"C:\\\\Source\\\\OriginalFile.txt\"), or Prepending an @ character before the start of the File Path (e.g. @\"C:\\Source\\OriginalFile.txt\") and Destination Path (e.g. @\"C:\\Destination\").  File Attributes When moving a file from the File Path to the new Destination Path, all of the file’s attributes will also be moved.\nFor information about the file attributes (i.e. ReadOnly, Hidden, Archive etc.), please see File \u0026 Folder Attributes.\n","categories":"","description":"Moves a file at the specified file path to the given destination path.","excerpt":"Moves a file at the specified file path to the given destination path.","ref":"/docs/reference/blocks/files-and-folders/move-file/move-file-block/","tags":"","title":"Move File"},{"body":"","categories":"","description":"Move a file or multiple files.","excerpt":"Move a file or multiple files.","ref":"/docs/reference/blocks/files-and-folders/move-file/","tags":"","title":"Move File(s)"},{"body":"\r\rMove Files (Cortex.Blocks.FilesAndFolders.MoveFile.MoveFilesBlock)\nDescription Moves files at the specified File Paths to the given Destination Path, with an option to Overwrite the files if they already exist.\nExamples Move files to a folder keeping the same file names This example will move [\"C:\\Source\\OriginalFile1.txt\", \"C:\\Source\\OriginalFile2.txt\"] to \"C:\\Destination\", with the same file names of \"OriginalFile1.txt\" and \"OriginalFile2.txt\".\nIn this example assume \"C:\\Destination\" does not already contain a file named \"OriginalFile1.txt\" or a file named \"OriginalFile2.txt\", so overwrite can be set to either true or false and it will still work.\nProperties    Property Value Notes     File Paths ($)FilePaths, with value [@\"C:\\Source\\OriginalFile1.txt\", @\"C:\\Source\\OriginalFile2.txt\"] ($)FilePaths is a variable of type IEnumerable\u003cString\u003e   Destination Path ($)DestinationPath, with value @\"C:\\Destination\" ($)DestinationPath is a variable of type String   Overwrite ($)Overwrite, with value false ($)Overwrite is a variable of type Boolean    Result Moving [\"C:\\Source\\OriginalFile1.txt\", \"C:\\Source\\OriginalFile2.txt\"] to \"C:\\Destination\" that does not already contain files named \"OriginalFile1.txt\" and \"OriginalFile2.txt\" will:\n Move \"C:\\Source\\OriginalFile1.txt\" to \"C:\\Destination\\OriginalFile1.txt\" with:  The content left unchanged. The Date Created left unchanged. The Date Accessed left unchanged. The Date Modified left unchanged. The File attributes left unchanged.   Move \"C:\\Source\\OriginalFile2.txt\" to \"C:\\Destination\\OriginalFile2.txt\" with:  The content left unchanged. The Date Created left unchanged. The Date Accessed left unchanged. The Date Modified left unchanged. The File attributes left unchanged.     Move files to a folder overwriting any files that already exists with the same names This example will move [\"C:\\Source\\FileAlreadyExists1.txt\", \"C:\\Source\\FileAlreadyExists2.txt\"] to \"C:\\Destination\", with the same file names of \"FileAlreadyExists1.txt\" and \"FileAlreadyExists2.txt\".\nIn this example assume \"C:\\Destination\" already contains a file named \"FileAlreadyExists1.txt\" and a file named \"FileAlreadyExists2.txt\", so overwrite must be set to true to ensure the content of the existing files can be overwritten.\nProperties    Property Value Notes     File Paths ($)FilePaths, with value [@\"C:\\Source\\FileAlreadyExists1.txt\", @\"C:\\Source\\FileAlreadyExists2.txt\"] ($)FilePaths is a variable of type IEnumerable\u003cString\u003e   Destination Path ($)DestinationPath, with value @\"C:\\Destination\" ($)DestinationPath is a variable of type String   Overwrite ($)Overwrite, with value true ($)Overwrite is a variable of type Boolean    Result Moving [\"C:\\Source\\FileAlreadyExists1.txt\", \"C:\\Source\\FileAlreadyExists2.txt\"] to \"C:\\Destination\" and overwriting the existing files named \"FileAlreadyExists1.txt\" and \"FileAlreadyExists2.txt\" will:\n Overwrite the existing file at \"C:\\Destination\\FileAlreadyExists1.txt\" with:  The content copied from \"C:\\Source\\FileAlreadyExists1.txt\". The Date Created copied from \"C:\\Source\\FileAlreadyExists1.txt\". The Date Accessed copied from \"C:\\Source\\FileAlreadyExists1.txt\" The Date Modified copied from \"C:\\Source\\FileAlreadyExists1.txt\". The File Attributes copied from \"C:\\Source\\FileAlreadyExists1.txt\".   Overwrite the existing file at \"C:\\Destination\\FileAlreadyExists2.txt\" with:  The content copied from \"C:\\Source\\FileAlreadyExists2.txt\". The Date Created copied from \"C:\\Source\\FileAlreadyExists2.txt\". The Date Accessed copied from \"C:\\Source\\FileAlreadyExists2.txt\". The Date Modified copied from \"C:\\Source\\FileAlreadyExists2.txt\". The File Attributes copied from \"C:\\Source\\FileAlreadyExists2.txt\".     Properties File Paths The File Paths to move the files from.\nEach file path in File Paths is case-insensitive, cannot contain any wildcard characters, and any trailing spaces will be automatically removed.\nFor information about the supported file path formats (i.e. absolute, relative, UNC etc.) and examples of each, please see File \u0026 Folder Paths.\n         Data Type IEnumerable\u003cString\u003e   Property Type Input   Default Value ($)FilePaths with value []    Destination Path The Destination Path to move the files to.\nThe Destination Path is case-insensitive, cannot contain any wildcard characters, and any trailing spaces will be automatically removed.\nThe Destination Path must point to a folder, otherwise an InvalidPathException will be thrown.\nThe moved files will have the names specified in the File Paths.\nAny non-existing folders within the Destination Path will be automatically created.\nFor information about the supported file and folder path formats (i.e. absolute, relative, UNC etc.) and examples of each, including how it is determined if a path points to a folder or a file, please see File \u0026 Folder Paths.\n         Data Type String   Property Type Input   Default Value ($)DestinationPath with value null    Overwrite Option to Overwrite the files in the Destination Path if they already exist.\nIf any file exists, Overwrite must be set to true, otherwise an OperationFailedException will be thrown. By default, this is set to false to avoid implicit and accidental overwriting of existing files.\n         Data Type Boolean   Property Type Input   Default Value ($)Overwrite with value false    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     InvalidPathException The Destination Path does not point to a folder.    The Destination Path contains leading spaces.    The Destination Path contains only whitespace, or the NUL character (i.e. \\0), or contains one or more invalid characters (i.e. \", *, ?, |, \u003c, \u003e, :, \\, /) in any file or folder names.    The Destination Path (if it points to a file), or the Destination Path (if it points to a folder) plus the file name, exceeds the system-defined maximum length (typically 32,767 characters).   OperationFailedException Any file path in File Paths is null or empty (i.e. \"\"). For more information, see Null or Empty File Paths    Any file path in File Paths is duplicated. For more information, see Duplicate File Paths    Any file path in File Paths does not exist.    Any file path in File Paths points to a folder.    Any file path in File Paths contains leading spaces.    Any file path in File Paths contains only whitespace, or the NUL character (i.e. \\0), or contains one or more invalid characters (i.e. \", *, ?, |, \u003c, \u003e, :, \\, /) in any file or folder names.    Any file path in File Paths exceeds the system-defined maximum length (typically 32,767 characters).    Any file path in File Paths or Destination Path is invalid (for example, it is on an unmapped drive).    Any file path in File Paths exists in the specified Destination Path and overwrite is false.    Any file path in File Paths exists in the specified Destination Path with the same name, is read-only and overwrite is true.    The user the flow is executing as does not have the required permissions to move any file (e.g. not having read access to a file path in File Paths or write access to the Destination Path).    An unexpected error occurs when moving a file.   PropertyEmptyException Thrown when File Paths does not contain any items, or Destination Path is empty (i.e. \"\").   PropertyNullException Thrown when File Paths or Destination Path are null.    Remarks File and Folder Paths For information about the supported file and folder path formats (i.e. absolute, relative, UNC etc.) and examples of each, including how it is determined if a path points to a folder or a file, please see File \u0026 Folder Paths.\nFile Paths and Destination Path need escaping Each file path in File Paths and Destination Path require \\ characters to be escaped, otherwise each unescaped \\ will be reported as an Invalid property value message when trying to debug the flow.\nEscaping can be done in two ways:\n Escaping the \\ character with another \\ character (e.g. \"C:\\\\Source\\\\OriginalFile.txt\"), or Prepending an @ character before the start of the file path (e.g. @\"C:\\Source\\OriginalFile.txt\") and Destination Path (e.g. @\"C:\\Destination\").  File Attributes When moving a file in the File Paths to the new Destination Path, all of the file’s attributes will also be moved.\nFor information about the file attributes (i.e. ReadOnly, Hidden, Archive etc.), please see File \u0026 Folder Attributes.\nHandling of Exceptions If an exception occurs when trying to move a file in the File Paths, it will be recorded and the block will continue processing the remaining files. Once all files are processed, recorded exceptions will be thrown within an OperationFailedException.\n","categories":"","description":"Moves files at the specified file paths to the given destination path.","excerpt":"Moves files at the specified file paths to the given destination path.","ref":"/docs/reference/blocks/files-and-folders/move-file/move-files-block/","tags":"","title":"Move Files"},{"body":"\r\rMove Folder (Cortex.Blocks.FilesAndFolders.MoveFolder.MoveFolderBlock)\nDescription Moves a folder at the specified Folder Path to the given Destination Path, with an option to move the folder and its content, or just its Content Only.\nAn option can also be specified to Overwrite anything being moved that already exists in the Destination Path.\nExamples Move a folder and its content This example will move \"C:\\Source\\Folder\" and its content to \"C:\\Destination\".\nIn this example assume:\n \"C:\\Source\\Folder\" contains:  An empty sub-folder named \"SubFolder\". A file named \"File.txt\".   \"C:\\Destination\" does not already contain a folder named \"Folder\", so overwrite can be set to either true or false and it will still work.  Properties    Property Value Notes     Folder Path ($)FolderPath, with value @\"C:\\Source\\Folder\" ($)FolderPath is a variable of type String   Destination Path ($)DestinationPath, with value @\"C:\\Destination\" ($)DestinationPath is a variable of type String   Overwrite ($)Overwrite, with value false ($)Overwrite is a variable of type Boolean   Content Only ($)ContentOnly, with value false ($)ContentOnly is a variable of type Boolean    Result Moving \"C:\\Source\\Folder\" and its content to \"C:\\Destination\" that does not already contain a folder named \"Folder\" will:\n Move \"C:\\Source\\Folder\" to \"C:\\Destination\\Folder\" with:  The Date Created left unchanged. The Date Accessed left unchanged. The Date Modified left unchanged. The Folder attributes left unchanged.   Move \"C:\\Source\\Folder\\SubFolder\" to \"C:\\Destination\\Folder\\SubFolder\" with:  The Date Created left unchanged. The Date Accessed left unchanged. The Date Modified left unchanged. The Folder attributes left unchanged.   Move \"C:\\Source\\Folder\\File.txt\" to \"C:\\Destination\\Folder\\File.txt\" with:  The content left unchanged. The Date Created left unchanged. The Date Accessed left unchanged. The Date Modified left unchanged. The File attributes left unchanged.     Move a folder and its content, overwriting any content that already exists This example will move \"C:\\Source\\Folder\" and its content to \"C:\\Destination\", overwriting any content that already exists.\nIn this example assume:\n \"C:\\Source\\Folder\" contains:  An empty sub-folder named \"SubFolder\". An empty sub-folder named \"SubFolderAlreadyExists\". A file named \"File.txt\". A file named \"FileAlreadyExists.txt\".   \"C:\\Destination\" already contains a folder named \"Folder\", which already contains:  A folder named \"SubFolderAlreadyExists\". A file named \"FileAlreadyExists.txt\".    Therefore, overwrite must be set to true to ensure the existing \"SubFolderAlreadyExists\" and \"FileAlreadyExists.txt\" can be overwritten.\nProperties    Property Value Notes     Folder Path ($)FolderPath, with value @\"C:\\Source\\Folder\" ($)FolderPath is a variable of type String   Destination Path ($)DestinationPath, with value @\"C:\\Destination\" ($)DestinationPath is a variable of type String   Overwrite ($)Overwrite, with value true ($)Overwrite is a variable of type Boolean   Content Only ($)ContentOnly, with value false ($)ContentOnly is a variable of type Boolean    Result Moving \"C:\\Source\\Folder\" and its content to \"C:\\Destination\" with the Overwrite option set to true, and where \"C:\\Destination\\Folder\", \"C:\\Destination\\Folder\\SubFolderAlreadyExists\" and \"C:\\Destination\\Folder\\FileAlreadyExists.txt\" already exist will:\n Overwrite the existing folder at \"C:\\Destination\\Folder\" with:  The Date Created left unchanged. The Date Accessed set to the time the move occurred. The Date Modified set to the time the move occurred. The Folder attributes left unchanged.   Move \"C:\\Source\\Folder\\SubFolder\" to \"C:\\Destination\\Folder\\SubFolder\" with:  The Date Created left unchanged. The Date Accessed left unchanged. The Date Modified left unchanged. The Folder attributes left unchanged.   Overwrite the existing folder at \"C:\\Destination\\Folder\\SubFolderAlreadyExists\" with:  The content left unchanged. The Date Created left unchanged. The Date Accessed left unchanged. The Date Modified left unchanged. The Folder attributes left unchanged.   Move \"C:\\Source\\Folder\\File.txt\" to \"C:\\Destination\\Folder\\File.txt\" with:  The content left unchanged. The Date Created left unchanged. The Date Accessed left unchanged. The Date Modified left unchanged. The File attributes left unchanged.   Overwrite the existing file at \"C:\\Destination\\Folder\\FileAlreadyExists.txt\" with:  The content copied from \"C:\\Source\\Folder\\FileAlreadyExists.txt\". The Date Created copied from \"C:\\Source\\Folder\\FileAlreadyExists.txt\". The Date Accessed copied from \"C:\\Source\\Folder\\FileAlreadyExists.txt\". The Date Modified copied from \"C:\\Source\\Folder\\FileAlreadyExists.txt\". The File attributes copied from \"C:\\Source\\Folder\\FileAlreadyExists.txt\".     Move a folder’s content only This example will move \"C:\\Source\\Folder\" content only to \"C:\\Destination\".\nIn this example assume:\n \"C:\\Source\\Folder\" contains:  An empty sub-folder named \"SubFolder\". A file named \"File.txt\".   \"C:\\Destination\" does not already contain a folder named \"SubFolder\" or a file named \"File.txt\", so overwrite can be set to either true or false and it will still work.  Properties    Property Value Notes     Folder Path ($)FolderPath, with value @\"C:\\Source\\Folder\" ($)FolderPath is a variable of type String   Destination Path ($)DestinationPath, with value @\"C:\\Destination\" ($)DestinationPath is a variable of type String   Overwrite ($)Overwrite, with value false ($)Overwrite is a variable of type Boolean   Content Only ($)ContentOnly, with value true ($)ContentOnly is a variable of type Boolean    Result Moving \"C:\\Source\\Folder\" content only to \"C:\\Destination\" that does not already contain a folder named \"SubFolder\" or a file named \"File.txt\" will:\n Move \"C:\\Source\\Folder\\SubFolder\" to \"C:\\Destination\\SubFolder\" with:  The Date Created left unchanged. The Date Accessed left unchanged. The Date Modified left unchanged. The Folder attributes left unchanged.   Move \"C:\\Source\\Folder\\File.txt\" to \"C:\\Destination\\File.txt\" with:  The content left unchanged. The Date Created left unchanged. The Date Accessed left unchanged. The Date Modified left unchanged. The File attributes left unchanged.     Move a folder’s content only, overwriting any content that already exists This example will move \"C:\\Source\\Folder\" content only to \"C:\\Destination\", overwriting any content that already exists.\nIn this example assume:\n \"C:\\Source\\Folder\" contains:  An empty sub-folder named \"SubFolder\". An empty sub-folder named \"SubFolderAlreadyExists\". A file named \"File.txt\". A file named \"FileAlreadyExists.txt\".   \"C:\\Destination\" already contains:  A folder named \"SubFolderAlreadyExists\". A file named \"FileAlreadyExists.txt\".    Therefore, overwrite must be set to true to ensure the existing \"SubFolderAlreadyExists\" and \"FileAlreadyExists.txt\" can be overwritten.\nProperties    Property Value Notes     Folder Path ($)FolderPath, with value @\"C:\\Source\\Folder\" ($)FolderPath is a variable of type String   Destination Path ($)DestinationPath, with value @\"C:\\Destination\" ($)DestinationPath is a variable of type String   Overwrite ($)Overwrite, with value true ($)Overwrite is a variable of type Boolean   Content Only ($)ContentOnly, with value true ($)ContentOnly is a variable of type Boolean    Result Moving \"C:\\Source\\Folder\" content only to \"C:\\Destination\" with the Overwrite option set to true, and where \"C:\\Destination\\SubFolderAlreadyExists\" and \"C:\\Destination\\FileAlreadyExists.txt\" already exist will:\n Move \"C:\\Source\\Folder\\SubFolder\" to \"C:\\Destination\\SubFolder\" with:  The Date Created left unchanged. The Date Accessed left unchanged. The Date Modified left unchanged. The Folder attributes left unchanged.   Overwrite the existing folder at \"C:\\Destination\\SubFolderAlreadyExists\" with:  The content left unchanged. The Date Created left unchanged. The Date Accessed left unchanged. The Date Modified left unchanged. The Folder attributes left unchanged.   Move \"C:\\Source\\Folder\\File.txt\" to \"C:\\Destination\\File.txt\" with:  The content left unchanged. The Date Created left unchanged. The Date Accessed left unchanged. The Date Modified left unchanged. The File attributes left unchanged.   Overwrite the existing file at \"C:\\Destination\\FileAlreadyExists.txt\" with:  The content copied from \"C:\\Source\\Folder\\FileAlreadyExists.txt\". The Date Created copied from \"C:\\Source\\Folder\\FileAlreadyExists.txt\". The Date Accessed copied from \"C:\\Source\\Folder\\FileAlreadyExists.txt\". The Date Modified copied from \"C:\\Source\\Folder\\FileAlreadyExists.txt\". The File attributes copied from \"C:\\Source\\Folder\\FileAlreadyExists.txt\".     Move a folder and its content to the same location but with a different name If it is required to move a folder and its content into the same folder it is currently located in, but with a different name, then it is not possible to do with this block; the Rename Folder block must be used instead.\n Move a folder and its content to a different location but with a different name If it is required to move a folder and its content into a different folder than the one it is currently located in, but with a different name, it is not possible to do with a single block; you must use a combination of this block and the Rename Folder block.\n Properties Folder Path The Folder Path to move the folder and/or its content from.\nThe Folder Path is case-insensitive, cannot contain any wildcard characters, and any trailing spaces will be automatically removed.\nFor information about the supported folder path formats (i.e. absolute, relative, UNC etc.) and examples of each, please see File \u0026 Folder Paths.\n         Data Type String   Property Type Input   Default Value ($)FolderPath with value null    Destination Path The Destination Path to move the folder and/or its content to.\nThe Destination Path is case-insensitive, cannot contain any wildcard characters, and any trailing spaces will be automatically removed.\nThe Destination Path must point to a folder, otherwise an InvalidPathException will be thrown.\nThe moved folders and files will have the same names as the folders and files moved.\nAny non-existing folders within the Destination Path will be automatically created.\nFor information about the supported file and folder path formats (i.e. absolute, relative, UNC etc.) and examples of each, including how it is determined if a path points to a folder or a file, please see File \u0026 Folder Paths.\n         Data Type String   Property Type Input   Default Value ($)DestinationPath with value null    Overwrite Option to Overwrite the folder and/or contents being moved to in the Destination Path if they already exist.\nIf the folder and/or contents exists, Overwrite must be set to true, otherwise an OperationFailedException will be thrown. By default, this is set to false to avoid implicit and accidental overwriting of existing folders and files.\n         Data Type Boolean   Property Type Input   Default Value ($)Overwrite with value false    Content Only Option to specify whether to move the folder and its content or just the Content Only.\nTo move the folder and its content, Content Only must be set to false; to move just the content, Content Only must be set to true.\n         Data Type Boolean   Property Type Input   Default Value ($)ContentOnly with value false    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     InvalidPathException The Destination Path points to a file.    The Destination Path contains leading spaces.    The Destination Path contains only whitespace, or the NUL character (i.e. \\0), or contains one or more invalid characters (i.e. \", *, ?, |, \u003c, \u003e, :, \\, /) in any folder names.    The Destination Path exceeds the system-defined maximum length (typically 32,767 characters).   OperationFailedException The Folder Path does not exist.    The Folder Path points to a file.    The Folder Path contains leading spaces.    The Folder Path contains only whitespace, or the NUL character (i.e. \\0), or contains one or more invalid characters (i.e. \", *, ?, |, \u003c, \u003e, :, \\, /) in any folder names.    The Folder Path exceeds the system-defined maximum length (typically 32,767 characters).    The Folder Path or Destination Path is a win32 device path (i.e starts with a \"\\\\.\\\").    The Folder Path or Destination Path is invalid (for example, it is on an unmapped drive).    The Folder Path and Destination Path point to the same folder and Content Only is true.    The Folder Path is a child folder in the Destination Path and Content Only is false.    Any file being moved already exists in the specified Destination Path and overwrite is false.    Any file being moved already exists in the specified Destination Path, is read-only and overwrite is true.    The user the flow is executing as does not have the required permissions to move the folder or any of its content (e.g. not having read access to the Folder Path or its content, or write access to the Destination Path).    The operation is cyclic (e.g. moving a folder into one of its sub-folders).    An unexpected error occurs when moving the folder or any of its content.   PropertyEmptyException Thrown when Folder Path or Destination Path are empty (i.e. \"\").   PropertyNullException Thrown when Folder Path or Destination Path are null.    Remarks Folder Paths For information about the supported folder path formats (i.e. absolute, relative, UNC etc.) and examples of each, including how it is determined if a path points to a folder or a file, please see File \u0026 Folder Paths.\nFolder Path and Destination Path need escaping Folder Path and Destination Path require \\ characters to be escaped, otherwise each unescaped \\ will be reported as an Invalid property value message when trying to debug the flow.\nEscaping can be done in two ways:\n Escaping the \\ character with another \\ character (e.g. \"C:\\\\Source\\\\\"), or Prepending an @ character before the start of the Folder Path (e.g. @\"C:\\Source\") and Destination Path (e.g. @\"C:\\Destination\").  Folder Attributes When moving the folder at the specified Folder Path or any folder under it to the new Destination Path, if the folder already exists in the destination its attributes remain unchanged.\nFor information about the folder attributes (i.e. ReadOnly, Hidden, Archive etc.), please see File \u0026 Folder Attributes.\nFile Attributes When moving a file under Folder Path to the new Destination Path, all of the file’s attributes are also moved.\nFor information about the file attributes (i.e. ReadOnly, Hidden, Archive etc.), please see File \u0026 Folder Attributes.\nHandling of Exceptions If an exception occurs when trying to move Folder Path, an OperationFailedException will be thrown.\n","categories":"","description":"Moves a folder at the specified folder path to the given destination path.","excerpt":"Moves a folder at the specified folder path to the given destination path.","ref":"/docs/reference/blocks/files-and-folders/move-folder/move-folder-block/","tags":"","title":"Move Folder"},{"body":"","categories":"","description":"Move a folder or folders.","excerpt":"Move a folder or folders.","ref":"/docs/reference/blocks/files-and-folders/move-folder/","tags":"","title":"Move Folder(s)"},{"body":"\r\rMove Folders (Cortex.Blocks.FilesAndFolders.MoveFolder.MoveFoldersBlock)\nDescription Moves folders at the specified Folder Paths to the given Destination Path, with an option to move the folders and their content, or just their Content Only.\nAn option can also be specified to Overwrite anything being moved that already exists in the Destination Path.\nExamples Move folders and their content This example will move [\"C:\\Source\\Folder1\", \"C:\\Source\\Folder2\"] and their content to \"C:\\Destination\".\nIn this example assume:\n \"C:\\Source\\Folder1\" contains:  An empty sub-folder named \"SubFolder1\". A file named \"File1.txt\".   \"C:\\Source\\Folder2\" contains:  An empty sub-folder named \"SubFolder2\". A file named \"File2.txt\".   \"C:\\Destination\" does not already contain a folder named \"Folder1\" or \"Folder2\", so overwrite can be set to either true or false and it will still work.  Properties    Property Value Notes     Folder Paths ($)FolderPaths, with value [@\"C:\\Source\\Folder1\", @\"C:\\Source\\Folder2\"] ($)FolderPaths is a variable of type IEnumerable\u003cString\u003e   Destination Path ($)DestinationPath, with value @\"C:\\Destination\" ($)DestinationPath is a variable of type String   Overwrite ($)Overwrite, with value false ($)Overwrite is a variable of type Boolean   Content Only ($)ContentOnly, with value false ($)ContentOnly is a variable of type Boolean    Result Moving [\"C:\\Source\\Folder1\", \"C:\\Source\\Folder2\"] and their content to \"C:\\Destination\" that does not already contain folders named \"Folder1\" and \"Folder2\" will:\n Move \"C:\\Source\\Folder1\" to \"C:\\Destination\\Folder1\" with:  The Date Created left unchanged. The Date Accessed left unchanged. The Date Modified left unchanged. The Folder attributes left unchanged.   Move \"C:\\Source\\Folder1\\SubFolder1\" to \"C:\\Destination\\Folder1\\SubFolder1\" with:  The Date Created left unchanged. The Date Accessed left unchanged. The Date Modified left unchanged. The Folder attributes left unchanged.   Move \"C:\\Source\\Folder1\\File1.txt\" to \"C:\\Destination\\Folder1\\File1.txt\" with:  The content left unchanged. The Date Created left unchanged. The Date Accessed left unchanged. The Date Modified left unchanged. The File attributes left unchanged.   Move \"C:\\Source\\Folder2\" to \"C:\\Destination\\Folder2\" with:  The Date Created left unchanged. The Date Accessed left unchanged. The Date Modified left unchanged. The Folder attributes left unchanged.   Move \"C:\\Source\\Folder2\\SubFolder2\" to \"C:\\Destination\\Folder2\\SubFolder2\" with:  The Date Created left unchanged. The Date Accessed left unchanged. The Date Modified left unchanged. The Folder attributes left unchanged.   Move \"C:\\Source\\Folder2\\File2.txt\" to \"C:\\Destination\\Folder2\\File2.txt\" with:  The content left unchanged. The Date Created left unchanged. The Date Accessed left unchanged. The Date Modified left unchanged. The File attributes left unchanged.     Move folders and their content, overwriting any content that already exists This example will move [\"C:\\Source\\Folder1\", \"C:\\Source\\Folder2\"] and their content to \"C:\\Destination\", overwriting any content that already exists.\nIn this example assume:\n \"C:\\Source\\Folder1\" contains:  An empty sub-folder named \"SubFolder1\". An empty sub-folder named \"SubFolderAlreadyExists1\". A file named \"File1.txt\". A file named \"FileAlreadyExists1.txt\".   \"C:\\Source\\Folder2\" contains:  An empty sub-folder named \"SubFolder2\". An empty sub-folder named \"SubFolderAlreadyExists2\". A file named \"File2.txt\". A file named \"FileAlreadyExists2.txt\".   \"C:\\Destination\" already contains:  A folder named \"Folder1\", which already contains:  A folder named \"SubFolderAlreadyExists1\". A file named \"FileAlreadyExists1.txt\".   A folder named \"Folder2\", which already contains:  A folder named \"SubFolderAlreadyExists2\". A file named \"FileAlreadyExists2.txt\".      Therefore, overwrite must be set to true to ensure the existing folders and files can be overwritten.\nProperties    Property Value Notes     Folder Paths ($)FolderPaths, with value [@\"C:\\Source\\Folder1\", @\"C:\\Source\\Folder2\"] ($)FolderPaths is a variable of type IEnumerable\u003cString\u003e   Destination Path ($)DestinationPath, with value @\"C:\\Destination\" ($)DestinationPath is a variable of type String   Overwrite ($)Overwrite, with value true ($)Overwrite is a variable of type Boolean   Content Only ($)ContentOnly, with value false ($)ContentOnly is a variable of type Boolean    Result Moving [\"C:\\Source\\Folder1\", \"C:\\Source\\Folder2\"] and their content to \"C:\\Destination\" with the Overwrite option set to true, and where \"C:\\Destination\\Folder1\", \"C:\\Destination\\Folder1\\SubFolderAlreadyExists1\", \"C:\\Destination\\Folder1\\FileAlreadyExists1.txt\", \"C:\\Destination\\Folder2\", \"C:\\Destination\\Folder2\\SubFolderAlreadyExists2\" and \"C:\\Destination\\Folder2\\FileAlreadyExists2.txt\" already exist will:\n Overwrite the existing folder at \"C:\\Destination\\Folder1\" with:  The Date Created left unchanged. The Date Accessed set to the time the move occurred. The Date Modified set to the time the move occurred. The Folder attributes left unchanged.   Move \"C:\\Source\\Folder1\\SubFolder1\" to \"C:\\Destination\\Folder1\\SubFolder1\" with:  The Date Created left unchanged. The Date Accessed left unchanged. The Date Modified left unchanged. The Folder attributes left unchanged.   Overwrite the existing folder at \"C:\\Destination\\Folder1\\SubFolderAlreadyExists1\" with:  The content left unchanged. The Date Created left unchanged. The Date Accessed left unchanged. The Date Modified left unchanged. The Folder attributes left unchanged.   Move \"C:\\Source\\Folder1\\File1.txt\" to \"C:\\Destination\\Folder1\\File1.txt\" with:  The content left unchanged. The Date Created left unchanged. The Date Accessed left unchanged. The Date Modified left unchanged. The File attributes left unchanged.   Overwrite the existing file at \"C:\\Destination\\Folder1\\FileAlreadyExists1.txt\" with:  The content copied from \"C:\\Source\\Folder1\\FileAlreadyExists1.txt\". The Date Created copied from \"C:\\Source\\Folder1\\FileAlreadyExists1.txt\". The Date Accessed copied from \"C:\\Source\\Folder1\\FileAlreadyExists1.txt\". The Date Modified copied from \"C:\\Source\\Folder1\\FileAlreadyExists1.txt\". The File attributes copied from \"C:\\Source\\Folder1\\FileAlreadyExists1.txt\".   Overwrite the existing folder at \"C:\\Destination\\Folder2\" with:  The Date Created left unchanged. The Date Accessed set to the time the move occurred. The Date Modified set to the time the move occurred. The Folder attributes left unchanged.   Move \"C:\\Source\\Folder2\\SubFolder2\" to \"C:\\Destination\\Folder2\\SubFolder2\" with:  The Date Created left unchanged. The Date Accessed left unchanged. The Date Modified left unchanged. The Folder attributes left unchanged.   Overwrite the existing folder at \"C:\\Destination\\Folder2\\SubFolderAlreadyExists2\" with:  The content left unchanged. The Date Created left unchanged. The Date Accessed left unchanged. The Date Modified left unchanged. The Folder attributes left unchanged.   Move \"C:\\Source\\Folder2\\File2.txt\" to \"C:\\Destination\\Folder2\\File2.txt\" with:  The content left unchanged. The Date Created left unchanged. The Date Accessed left unchanged. The Date Modified left unchanged. The File attributes left unchanged.   Overwrite the existing file at \"C:\\Destination\\Folder2\\FileAlreadyExists2.txt\" with:  The content copied from \"C:\\Source\\Folder2\\FileAlreadyExists2.txt\". The Date Created copied from \"C:\\Source\\Folder2\\FileAlreadyExists2.txt\". The Date Accessed copied from \"C:\\Source\\Folder2\\FileAlreadyExists2.txt\". The Date Modified copied from \"C:\\Source\\Folder2\\FileAlreadyExists2.txt\". The File attributes copied from \"C:\\Source\\Folder2\\FileAlreadyExists2.txt\".     Move the folders' content only This example will move [\"C:\\Source\\Folder1\", \"C:\\Source\\Folder2\"] content only to \"C:\\Destination\".\nIn this example assume:\n \"C:\\Source\\Folder1\" contains:  An empty sub-folder named \"SubFolder1\". A file named \"File1.txt\".   \"C:\\Source\\Folder2\" contains:  An empty sub-folder named \"SubFolder2\". A file named \"File2.txt\".   \"C:\\Destination\" does not already contain a folder named \"SubFolder1\" or \"SubFolder2\" or a file named \"File1.txt\" or \"File2.txt\", so overwrite can be set to either true or false and it will still work.  Properties    Property Value Notes     Folder Paths ($)FolderPaths, with value [@\"C:\\Source\\Folder1\", @\"C:\\Source\\Folder2\"] ($)FolderPaths is a variable of type IEnumerable\u003cString\u003e   Destination Path ($)DestinationPath, with value @\"C:\\Destination\" ($)DestinationPath is a variable of type String   Overwrite ($)Overwrite, with value false ($)Overwrite is a variable of type Boolean   Content Only ($)ContentOnly, with value true ($)ContentOnly is a variable of type Boolean    Result Moving [\"C:\\Source\\Folder1\", \"C:\\Source\\Folder2\"] content only to \"C:\\Destination\" that does not already contain a folder named \"SubFolder1\" or \"SubFolder2\" or a file named \"File1.txt\" or \"File2.txt\" will:\n Move \"C:\\Source\\Folder1\\SubFolder1\" to \"C:\\Destination\\SubFolder1\" with:  The Date Created left unchanged. The Date Accessed left unchanged. The Date Modified left unchanged. The Folder attributes left unchanged.   Move \"C:\\Source\\Folder1\\File1.txt\" to \"C:\\Destination\\File1.txt\" with:  The content left unchanged. The Date Created left unchanged. The Date Accessed left unchanged. The Date Modified left unchanged. The File attributes left unchanged.   Move \"C:\\Source\\Folder2\\SubFolder2\" to \"C:\\Destination\\SubFolder2\" with:  The Date Created left unchanged. The Date Accessed left unchanged. The Date Modified left unchanged. The Folder attributes left unchanged.   Move \"C:\\Source\\Folder2\\File2.txt\" to \"C:\\Destination\\File2.txt\" with:  The content left unchanged. The Date Created left unchanged. The Date Accessed left unchanged. The Date Modified left unchanged. The File attributes left unchanged.     Move folders' content only, overwriting any content that already exists This example will move [\"C:\\Source\\Folder1\", \"C:\\Source\\Folder2\"] content only to \"C:\\Destination\", overwriting any content that already exists.\nIn this example assume:\n \"C:\\Source\\Folder1\" contains:  An empty sub-folder named \"SubFolder1\". An empty sub-folder named \"SubFolderAlreadyExists1\". A file named \"File1.txt\". A file named \"FileAlreadyExists1.txt\".   \"C:\\Source\\Folder2\" contains:  An empty sub-folder named \"SubFolder2\". An empty sub-folder named \"SubFolderAlreadyExists2\". A file named \"File2.txt\". A file named \"FileAlreadyExists2.txt\".   \"C:\\Destination\" already contains:  A folder named \"SubFolderAlreadyExists1\". A folder named \"SubFolderAlreadyExists2\". A file named \"FileAlreadyExists1.txt\". A file named \"FileAlreadyExists2.txt\".    Therefore, overwrite must be set to true to ensure the existing folders and files can be overwritten.\nProperties    Property Value Notes     Folder Paths ($)FolderPaths, with value [@\"C:\\Source\\Folder1\", @\"C:\\Source\\Folder2\"] ($)FolderPaths is a variable of type IEnumerable\u003cString\u003e   Destination Path ($)DestinationPath, with value @\"C:\\Destination\" ($)DestinationPath is a variable of type String   Overwrite ($)Overwrite, with value true ($)Overwrite is a variable of type Boolean   Content Only ($)ContentOnly, with value true ($)ContentOnly is a variable of type Boolean    Result Moving [\"C:\\Source\\Folder1\", \"C:\\Source\\Folder2\"] content only to \"C:\\Destination\" with the Overwrite option set to true, and where \"C:\\Destination\\SubFolderAlreadyExists1\", \"C:\\Destination\\SubFolderAlreadyExists2\", \"C:\\Destination\\FileAlreadyExists1.txt\" and \"C:\\Destination\\FileAlreadyExists2.txt\" already exist will:\n Move \"C:\\Source\\Folder1\\SubFolder1\" to \"C:\\Destination\\SubFolder1\" with:  The Date Created left unchanged. The Date Accessed left unchanged. The Date Modified left unchanged. The Folder attributes left unchanged.   Overwrite the existing folder at \"C:\\Destination\\SubFolderAlreadyExists1\" with:  The content left unchanged. The Date Created left unchanged. The Date Accessed left unchanged. The Date Modified left unchanged. The Folder attributes left unchanged.   Move \"C:\\Source\\Folder1\\File1.txt\" to \"C:\\Destination\\File1.txt\" with:  The content copied left unchanged. The Date Created left unchanged. The Date Accessed left unchanged. The Date Modified left unchanged. The File attributes left unchanged.   Overwrite the existing file at \"C:\\Destination\\FileAlreadyExists1.txt\" with:  The content copied from \"C:\\Source\\Folder1\\FileAlreadyExists1.txt\". The Date Created copied from \"C:\\Source\\Folder1\\FileAlreadyExists1.txt\". The Date Accessed copied from \"C:\\Source\\Folder1\\FileAlreadyExists1.txt\". The Date Modified copied from \"C:\\Source\\Folder1\\FileAlreadyExists1.txt\". The File attributes copied from \"C:\\Source\\Folder1\\FileAlreadyExists1.txt\".   Move \"C:\\Source\\Folder2\\SubFolder2\" to \"C:\\Destination\\SubFolder2\" with:  The Date Created left unchanged. The Date Accessed left unchanged. The Date Modified left unchanged. The Folder attributes left unchanged.   Overwrite the existing folder at \"C:\\Destination\\SubFolderAlreadyExists2\" with:  The content left unchanged. The Date Created left unchanged. The Date Accessed left unchanged. The Date Modified left unchanged. The Folder attributes left unchanged.   Move \"C:\\Source\\Folder2\\File2.txt\" to \"C:\\Destination\\File2.txt\" with:  The content copied left unchanged. The Date Created left unchanged. The Date Accessed left unchanged. The Date Modified left unchanged. The File attributes left unchanged.   Overwrite the existing file at \"C:\\Destination\\FileAlreadyExists2.txt\" with:  The content copied from \"C:\\Source\\Folder2\\FileAlreadyExists2.txt\". The Date Created copied from \"C:\\Source\\Folder2\\FileAlreadyExists2.txt\". The Date Accessed copied from \"C:\\Source\\Folder2\\FileAlreadyExists2.txt\". The Date Modified copied from \"C:\\Source\\Folder2\\FileAlreadyExists2.txt\". The File attributes copied from \"C:\\Source\\Folder2\\FileAlreadyExists2.txt\".     Move folders and their content to the same location but with a different name If it is required to move folders and their content into the same folder they are currently located in, but with a different name, then it is not possible to do with this block; the Rename Folder block must be used instead.\n Move folders and their content to a different location but with a different name If it is required to move folders and their content into a different folder than the one they are currently located in, but with a different name, it is not possible to do with a single block; you must use a combination of this block and the Rename Folder block.\n Properties Folder Paths The Folder Paths to move the folders and/or their content from.\nEach folder path in Folder Paths is case-insensitive, cannot contain any wildcard characters, and any trailing spaces will be automatically removed.\nFor information about the supported folder path formats (i.e. absolute, relative, UNC etc.) and examples of each, please see File \u0026 Folder Paths.\n         Data Type String   Property Type Input   Default Value ($)FolderPaths with value []    Destination Path The Destination Path to move the folders and/or their content to.\nThe Destination Path is case-insensitive, cannot contain any wildcard characters, and any trailing spaces will be automatically removed.\nThe Destination Path must point to a folder, otherwise an InvalidPathException will be thrown.\nThe moved folders and files will have the same names as the folders and files copied.\nAny non-existing folders within the Destination Path will be automatically created.\nFor information about the supported file and folder path formats (i.e. absolute, relative, UNC etc.) and examples of each, including how it is determined if a path points to a folder or a file, please see File \u0026 Folder Paths.\n         Data Type String   Property Type Input   Default Value ($)DestinationPath with value null    Overwrite Option to Overwrite the folders and/or contents being moved to in the Destination Path if they already exist.\nIf any of the folders and/or contents exists, Overwrite must be set to true, otherwise an OperationFailedException will be thrown. By default, this is set to false to avoid implicit and accidental overwriting of existing folders and files.\n         Data Type Boolean   Property Type Input   Default Value ($)Overwrite with value false    Content Only Option to specify whether to move the folders and their content or just the Content Only.\nTo move the folders and their content, Content Only must be set to false; to move just the content, Content Only must be set to true.\n         Data Type Boolean   Property Type Input   Default Value ($)ContentOnly with value false    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     InvalidPathException The Destination Path points to a file.    The Destination Path contains leading spaces.    The Destination Path contains only whitespace, or the NUL character (i.e. \\0), or contains one or more invalid characters (i.e. \", *, ?, |, \u003c, \u003e, :, \\, /) in any folder names.    The Destination Path exceeds the system-defined maximum length (typically 32,767 characters).   OperationFailedException Any folder path in Folder Paths is null or empty (i.e. \"\"). For more information, see Null or Empty Folder Paths    Any folder path in Folder Paths is duplicated. For more information, see Duplicate Folder Paths    Any folder path in Folder Paths does not exist.    Any folder path in Folder Paths points to a file.    Any folder path in Folder Paths contains leading spaces.    Any folder path in Folder Paths contains only whitespace, or the NUL character (i.e. \\0), or contains one or more invalid characters (i.e. \", *, ?, |, \u003c, \u003e, :, \\, /) in any folder names.    Any folder path in Folder Paths exceeds the system-defined maximum length (typically 32,767 characters).    Any folder path in Folder Paths or Destination Path is a win32 device path (i.e starts with a \"\\\\.\\\").    Any folder path in Folder Paths or Destination Path is invalid (for example, it is on an unmapped drive).    Any folder path in Folder Paths and Destination Path point to the same folder and Content Only is true.    Any folder path in Folder Paths is a child folder in the Destination Path and Content Only is false.    Any file being moved already exists in the specified Destination Path and overwrite is false.    Any file being moved already exists in the specified Destination Path, is read-only and overwrite is true.    The user the flow is executing as does not have the required permissions to move the folder or any of its content (e.g. not having read access to any of the folders in Folder Paths or its content, or write access to the Destination Path).    The operation is cyclic (e.g. moving a folder into one of its sub-folders).    An unexpected error occurs when moving a folder or any of its content.   PropertyEmptyException Thrown when Folder Paths does not contain any items, or Destination Path are empty (i.e. \"\").   PropertyNullException Thrown when Folder Paths or Destination Path are null.    Remarks Folder Paths For information about the supported folder path formats (i.e. absolute, relative, UNC etc.) and examples of each, including how it is determined if a path points to a folder or a file, please see File \u0026 Folder Paths.\nFolder Path and Destination Path need escaping Each folder paths in Folder Paths and Destination Path require \\ characters to be escaped, otherwise each unescaped \\ will be reported as an Invalid property value message when trying to debug the flow.\nEscaping can be done in two ways:\n Escaping the \\ character with another \\ character (e.g. \"C:\\\\Source\\\\\"), or Prepending an @ character before the start of the folder path (e.g. @\"C:\\Source\") and Destination Path (e.g. @\"C:\\Destination\").  Folder Attributes When moving the folders at the specified Folder Paths or any folder under them to the new Destination Path, if the folder already exists in the destination its attributes remain unchanged.\nFor information about the folder attributes (i.e. ReadOnly, Hidden, Archive etc.), please see File \u0026 Folder Attributes.\nFile Attributes When moving a file under any of the Folder Paths to the new Destination Path, all of the file’s attributes are also moved.\nFor information about the file attributes (i.e. ReadOnly, Hidden, Archive etc.), please see File \u0026 Folder Attributes.\nConflicting Content If two or more paths in the specified Folder Paths contain content (folders or files) with the same name, and Overwrite and Content Only are true:\n The attributes of the folder/file in the Destination Path will be that of the first one moved. For files, the content of the file in the Destination Path will be that of the last one moved.  Handling of Exceptions If an exception occurs when trying to move a folder in Folder Paths, it will be recorded and the block will continue processing the remaining folders. Once all folders are processed, recorded exceptions will be thrown within an OperationFailedException.\n","categories":"","description":"Moves folders at the specified folder paths to the given destination path.","excerpt":"Moves folders at the specified folder paths to the given destination path.","ref":"/docs/reference/blocks/files-and-folders/move-folder/move-folders-block/","tags":"","title":"Move Folders"},{"body":"Multiple server - with HA (recommended) Information on installing Cortex Innovation across multiple on-premise servers with high availability (HA), including: information about components, supported architectures, pre-requisites and installation instructions. Multiple server installations with HA are recommended for the following scenarios:\n Production installations that are required to scale and support HA  \rArchitecture Components    Component Purpose Required/Optional Server Role     Cortex Gateway Web portal that hosts applications for creating automation solutions and managing their full life-cycle, including design, development, testing, deployment, monitoring, maintenance and ultimately end-of-life. Required Web Application Server   Cortex Studio Application hosted in Cortex Gateway that provides the graphical, low-code environment for developing, testing, versioning, publishing and managing the full life-cycle of automation solutions. Required Web Application Server   Cortex Flow Debugger Service Web application that allows flows to be debugged and executed. Used by Cortex Studio to debug flows and provide block information. Required Web Application Server   Cortex API Gateway Service HA Service that routes client requests to the correct distributed Cortex services. Required Application Server   Cortex Flow Execution Service HA Service that executes automation flows. Required Application Server   Cortex Block Packages A set of files which contain the blocks that users can use to build flows. Used by the Cortex Flow Debugger Service and the Cortex Flow Execution Service. Required Web Application Server, Application Server   SQL Server Express Free edition of SQL Server, required by Cortex Gateway for storing data related to user roles, flows, etc. Hopefully, we can remove the need for SQL Server Express in the next release. Required\n(End of life) Web Application Server   Microsoft Service Fabric Distributed systems platform that hosts the Cortex services where automation solutions are deployed to; provides scalable, reliable and manageable enterprise-grade High Availability (HA) using clustering. Required Application Server   Microsoft Service Fabric Explorer Web portal for monitoring and managing the HA clusters that automation solutions are deployed to. Required Application Server   Particular NServiceBus Messaging platform enabling scalable, reliable and flexible asynchronous messaging between distributed Cortex services. Required Application Server   Pivotal RabbitMQ Message broker used by the NServiceBus messaging platform to transport messages asynchronously between distributed Cortex services using publish/subscribe mechanism. Required Application Server   Erlang OTP Erlang run-time required by the RabbitMQ message broker. Required Application Server   gobetween L4 load balancer and reverse proxy used to load balance requests between clustered instances of Cortex services. Required Load Balancer   NSSM Windows Service Manager that hosts the gobetween load balancer application as a Windows Service. Required Load Balancer    Recommended Architecture The following architecture requires 5 servers:\n 1x Web Application Server which contains Gateway, Flow Debugger Service and Databases 1x Load Balancer Server 3x Application Servers  \r5 Server Architecture Diagram\r\r\rThis will be suitable for most HA installations, however, it is possible to reduce the required servers by one; for more information, see Alternative Architectures.\nPrerequisites Hardware Requirements Note\rThe recommended number of servers is 5, and allows each server role instance to be installed on its own server.\nThe minimum number of servers required to run Cortex with HA is 4. This setup requires multiple server roles to be installed on the same server; for more information, see Alternative Architectures.\n\r   Server Role Servers Required CPU Cores (\u003e 2GHz) RAM (GB) Disk (GB)     Web Application Server 11 4+ Recommended\n2 Minimum 8+ Recommended\n4 Minimum 75+ Recommended\n50 Minimum\n30+ free on installation drive   Application Server 3 Bronze availability2\n5 Silver availability\n7 Gold availability\n9 Platinum availability 4+ Recommended\n2 Minimum 16+ Recommended\n8 Minimum 75+ Recommended\n60 Minimum\n40+ free on %ProgramData% drive   Load Balancer 13 4+ Recommended\n2 Minimum 4+ Recommended\n2 Minimum 50+ Recommended\n30 Minimum\n5+ free on installation drive    Alternative Load Balancer Requirements Must support a round robin (or similar) method of load balancing to specified ports on 3 nodes.\n Must be able to health check each node by running a batch script (that runs a PowerShell script which makes an HTTP request) that returns 1 for healthy and 0 for unhealthy. Must be able to access each of the Application Servers. Ideally it should be highly available to avoid a single point of failure in the system.  Software Requirements    Server Role Windows Server4 SQL Server5 .Net PowerShell6 IIS7     Web Application Server 2019 (x64) Recommended\n2016 (x64) 2019\n2016\n2016 Express Framework 4.7.1 5.1 10.0.177638\n10.0.143939\nURL Rewrite Module 2.1   Application Server 2019 (x64) Recommended\n2016 (x64)  Framework 4.7.1 5.1    Load Balancer 2019 (x64) Recommended\n2016 (x64)  Framework 4.7.1 5.1     Service Requirements The following Windows Services must be running on all Application Servers:\n Remote Registry Windows Event Log Performance Logs \u0026 Alerts  Filesystem Requirements All Application Servers must use an NTFS filesystem.\nSecurity Requirements Installation User A domain user which is a member of the local Administrators group on all servers must be available to run the installation scripts. This is a pre-requisite of Microsoft Service Fabric, which is the HA platform that Cortex Innovation is built upon.\nAntivirus Exclusions It is advised (by Microsoft Service Fabric) that the following antivirus exclusions are created on each Application Server to reduce antivirus processing on Service Fabric artefacts:\nFolder Exclusions:\n %ProgramFiles%\\Microsoft Service Fabric %ProgramData%\\SF %ProgramData%\\SF\\Logs  Process Exclusions:\n Fabric.exe FabricHost.exe FabricInstallerService.exe FabricSetup.exe FabricDeployer.exe ImageBuilder.exe FabricGateway.exe FabricDCA.exe FabricFAS.exe FabricUOS.exe FabricRM.exe FileStoreService.exe  A script is provided during installation to add these exclusions for Windows Defender. If any other antivirus software is running, these will need to be added manually.\nIf adding the exclusions manually, the Process Exclusions should be done before installation occurs, as the processes will be used during installation of the application and antivirus software can cause the installation to fail or timeout. Folder Exclusions may need to be added after installation has occurred as some antivirus software needs the folders to exist.\nDomain Requirements Only Windows domains with an Active Directory domain controller running Active Directory Domain Services are supported.\nSupported versions of Active Directory are listed below:\n   Version Verified? Supported From Supported Until     Windows Server 2003 ✓ Cortex v2022.5 To be evaluated   Windows Server 2003 R2  Cortex v2022.5 To be evaluated   Windows Server 2008  Cortex v2022.5 To be evaluated   Windows Server 2008 R2 ✓ Cortex v2022.5 To be evaluated   Windows Server 2012  Cortex v2022.5 To be evaluated   Windows Server 2012 R2 ✓ Cortex v2022.5 To be evaluated   Windows Server 2016 ✓ Cortex v2022.5 To be evaluated   Windows Server 2019  Cortex v2022.5 To be evaluated   Windows Server 2022  Cortex v2022.5 To be evaluated    All servers must be on the same domain and cannot be domain controllers.\nPort Requirements Cortex Innovation and Microsoft Service Fabric require a range of firewall ports to be opened between the servers and specific services.\nIf you are using Windows Firewall, some ports are opened during installation and others are opened dynamically as needed. If any other firewall is used, it will be necessary to add the rules described in Port Requirements to open the correct ports.\nThe Cortex.Innovation.Test.PortUsage.ps1 script is provided during installation to test the ports on each Application Server and make sure they do not overlap with any other programs; most ports may be altered if this is the case, the description will say if this is not possible.\nTLS Requirements  TLS 1.2 must be enabled.  TODO include protocols, ciphers, hashes etc.\nCertificate Requirements Note\rFor production systems it is recommended that X.509 SSL wildcard certificates are obtained from a Certificate Authority and used for installation. For non-production systems, certificates can be omitted from installation and it will create and use self-signed certificates. This may prevent 3rd parties that require valid certificate verification to access the API Gateway Service.\r\rAn X.509 SSL wildcard certificate should be used to:\n Secure communication between the load balancer and the HA nodes on the Application Servers. Secure communication between the HA nodes. Allow HA Services to identify themselves to clients such as Gateway. Prevent unauthorised HA nodes from joining the HA cluster. Connect to Service Fabric Explorer from each of the Application Servers.  The certificate can be obtained from a Certificate Authority, such as Let’s Encrypt (https://letsencrypt.org/), and must meet the following requirements:\n Subject field must be in a wildcard format, pertaining to the domain of the Application Servers (e.g. CN=*.domain.com). Subject alternative names must include any additional host names that should be able to be used to access the API Gateway Service. Certificate file must be in a .PFX file format, with a known password. Certificate file must contain the full chain of certificates. Certificate file must include the private key.  This file should be placed in a known location on the Application Server where the installation scripts will be run. This location will be required when running the installation script.\nIf required, a separate X.509 SSL certificate can be obtained to be used by the load balancer to communicate with the HA nodes. It must meet all of the other requirements laid out above, except the subject field can also be the FQDN of the load balancer (e.g. CN=machine-name.domain.com).\nKerberos Requirements TODO - Kerberos and winrm\nClient Requirements We support the latest versions of the following browsers:\n Chrome Edge Firefox  Install Application Servers and Load Balancer Server Extract Installation Artefacts   Choose one of the Application Servers to be used for installation, and copy the following artefacts to a folder on it (the version numbers may differ):\n Cortex Evolution - Innovation 2022.5 - Block Packages.zip Cortex Evolution - Innovation 2022.5 - HA Services.zip Cortex Evolution - Innovation 2022.5 - Installation Scripts.zip    Extract the Cortex Evolution - Innovation 2022.5 - Installation Scripts.zip file to a folder with the same name.\n  Add Antivirus Exclusions  If Windows Defender is not running on the Application Servers, ensure that the Antivirus Exclusions have been added to the running antivirus software on each of the Application Servers and continue to the next step, otherwise follow these steps:   Open a Windows PowerShell (x64) window as administrator.\n  Navigate PowerShell to inside the Cortex Evolution - Innovation 2022.5 - Installation Scripts folder using the following command, modifying the path as necessary:\ncd \"C:\\Install\\Cortex Evolution - Innovation 2022.5 - Installation Scripts\"   Run the Cortex.Innovation.Add.WindowsDefenderExclusions.ps1 script using the following command, modifying the ApplicationServers value to contain the NETBIOS names or fully qualified domain names of the Application Servers:\n.\\Cortex.Innovation.Add.WindowsDefenderExclusions.ps1 -ApplicationServers @(\"ha-server1\", \"ha-server2\", \"ha-server3\")     Check Port Usage  To check all necessary ports are free, follow these steps.   Open a Windows PowerShell (x64) window as administrator.\n  Navigate PowerShell to inside the Cortex Evolution - Innovation 2022.5 - Installation Scripts folder using the following command, modifying the path as necessary:\ncd \"C:\\Install\\Cortex Evolution - Innovation 2022.5 - Installation Scripts\"   Run the Cortex.Innovation.Test.PortUsage.ps1 script using the following command, modifying the ApplicationServers value to contain the NETBIOS names or fully qualified domain names of the Application Servers:\n.\\Cortex.Innovation.Test.PortUsage.ps1 -ApplicationServers @(\"ha-server1\", \"ha-server2\", \"ha-server3\")   If all ports are free, the script will report the following for each Application Server:\nAll ports required by Cortex Innovation are free\nIf this is the case, continue to the next step. Otherwise, consult the messages returned by the script, which will give details about how to modify the Cortex.Innovation.Install.Config.json configuration file, in the Cortex Evolution - Innovation 2022.5 - Installation Scripts folder, to use different ports. This will be used later during installation.\nThe Cortex.Innovation.Test.PortUsage.ps1 script cannot currently re-check modified ports in the configuration file so these need to be manually checked to see that they are free.\n    Configure Installation Script   In the Cortex Evolution - Innovation 2022.5 - Installation Scripts folder, locate the Cortex.Innovation.Install.ps1 script and open it with a text editor.\n  Choose the tab below that matches the configuration for this installation, then update the script to match, changing the parameters according to the details given below:\nCA Certs, Built-in Load Balancer\r\rSelf-Signed Certs, Built-in Load Balancer\r\rCA Certs, Alternative Load Balancer\r\rSelf-Signed Certs, Alternative Load Balancer\r\r\r.\\Cortex.Install.ps1 -ConfigFileName Cortex.Innovation.Install.Config.json ` -HaServicesPath \"C:\\Install\\Cortex Evolution - Innovation 2022.5 - HA Services.zip\" ` -BlockPackagesPath \"C:\\Install\\Cortex Evolution - Innovation 2022.5 - Block Packages.zip\" ` -ApiGatewayBasicAuthUserName \"BasicAuthUser\" ` -ApiGatewayBasicAuthPwd \"ADA9883B11BD4CDC908B8131B57944A4\" ` -CustomerName \"Customer1\" ` -ApplicationServerIPv4Addresses @(\"192.168.1.1\", \"192.168.1.2\", \"192.168.1.3\") ` -LoadBalancerServerIPv4Address \"192.168.1.4\" ` -ServerCertificatePath \"C:\\Install\\Certificates\\cert.pfx\" ` -ServerCertificatePwd \"myPassword\" ` -ClientCertificatePath \"C:\\Install\\Certificates\\cert.pfx\" ` -ClientCertificatePwd \"myPassword\" ` -Credential $Credential \r.\\Cortex.Install.ps1 -ConfigFileName Cortex.Innovation.Install.Config.json ` -HaServicesPath \"C:\\Install\\Cortex Evolution - Innovation 2022.5 - HA Services.zip\" ` -BlockPackagesPath \"C:\\Install\\Cortex Evolution - Innovation 2022.5 - Block Packages.zip\" ` -ApiGatewayBasicAuthUserName \"BasicAuthUser\" ` -ApiGatewayBasicAuthPwd \"ADA9883B11BD4CDC908B8131B57944A4\" ` -CustomerName \"Customer1\" ` -ApplicationServerIPv4Addresses @(\"192.168.1.1\", \"192.168.1.2\", \"192.168.1.3\") ` -LoadBalancerServerIPv4Address \"192.168.1.4\" ` -UseSelfSignedCertificates ` -Credential $Credential \r.\\Cortex.Install.ps1 -ConfigFileName Cortex.Innovation.Install.Config.json ` -HaServicesPath \"C:\\Install\\Cortex Evolution - Innovation 2022.5 - HA Services.zip\" ` -BlockPackagesPath \"C:\\Install\\Cortex Evolution - Innovation 2022.5 - Block Packages.zip\" ` -ApiGatewayBasicAuthUserName \"BasicAuthUser\" ` -ApiGatewayBasicAuthPwd \"ADA9883B11BD4CDC908B8131B57944A4\" ` -CustomerName \"Customer1\" ` -ApplicationServerIPv4Addresses @(\"192.168.1.1\", \"192.168.1.2\", \"192.168.1.3\") ` -ServerCertificatePath \"C:\\Install\\Certificates\\cert.pfx\" ` -ServerCertificatePwd \"myPassword\" ` -ClientCertificatePath \"C:\\Install\\Certificates\\cert.pfx\" ` -ClientCertificatePwd \"myPassword\" ` -SkipLoadBalancer ` -Credential $Credential \r.\\Cortex.Install.ps1 -ConfigFileName Cortex.Innovation.Install.Config.json ` -HaServicesPath \"C:\\Install\\Cortex Evolution - Innovation 2022.5 - HA Services.zip\" ` -BlockPackagesPath \"C:\\Install\\Cortex Evolution - Innovation 2022.5 - Block Packages.zip\" ` -ApiGatewayBasicAuthUserName \"BasicAuthUser\" ` -ApiGatewayBasicAuthPwd \"ADA9883B11BD4CDC908B8131B57944A4\" ` -CustomerName \"Customer1\" ` -ApplicationServerIPv4Addresses @(\"192.168.1.1\", \"192.168.1.2\", \"192.168.1.3\") ` -UseSelfSignedCertificates ` -SkipLoadBalancer ` -Credential $Credential \r    Name Description     HaServicesPath Configure this value with the location of the HA Services zip file on the Application Server used for installation.   BlockPackagesPath Configure this value with the location of the Block Packages zip file on the Application Server used for installation.   ApiGatewayBasicAuthUserName Configure this value with the username that will be used for Basic Authentication when making HTTPS requests to the API Gateway Service (e.g. starting production flows). Currently only Basic Authentication using a single user is supported, OAuth2 will be supported in a future release.\nThis value will be needed later, when installing Gateway.   ApiGatewayBasicAuthPwd Configure this value with the password that will be used for Basic Authentication when making HTTPS requests to the API Gateway Service (e.g. starting production flows). This should be Cortex Encrypted. This value will be needed later, when installing Gateway.   CustomerName A name identifying the platform being installed. This must have no spaces or symbols. It will be appended to the node names that are displayed in Service Fabric Explorer.   ApplicationServerIPv4Addresses The IPv4 addresses of the Application Servers. The first of these must be the Application Server used for installation.   LoadBalancerServerIPv4Address The IPv4 address of the Load Balancer Server. This is only needed if using the built-in load balancer.   ServerCertificatePath The local path of a .PFX certificate file on the first Application Server in the ApplicationServerIPv4Addresses list. Environment variables cannot be used. This is only needed if installing with CA Certificates (Recommended). The certificate should meet the Certificate Requirements.   ServerCertificatePwd The password for the .PFX certificate file specified in ServerCertificatePath. This is only needed if installing with CA Certificates (Recommended).   ClientCertificatePath The local path of a .PFX certificate file on the first Application Server in the ApplicationServerIPv4Addresses list. This can be the same certificate as the ServerCertificatePath. Environment variables cannot be used. This is only needed if installing with CA Certificates (Recommended) and using the Built-In Load Balancer. The certificate should meet the Certificate Requirements.   ClientCertificatePwd The password for the .PFX certificate file specified in ClientCertificatePath. This is only needed if installing with CA Certificates (Recommended) and using the Built-In Load Balancer.   UseSelfSignedCertificates Installs HA Services and required infrastructure using generated Self-Signed Certificates rather than CA Certificates. Not recommended for production use.   SkipLoadBalancer Installs HA Services and required infrastructure without installing a load balancer. Use when using an alternative load balancer or no load balancer.   Credential The credentials of the user which will be used to perform remote operations on the Application Servers. It must be a domain user that is a member of the local Administrators group on all servers. This does not need to be changed, a prompt will appear to enter this information when the script is run.    The ApiGatewayBasicAuthUserName and ApiGatewayBasicAuthPwd will be needed later, when installing Gateway.\nNote\rMore advanced configuration (such as changing ports) can be undertaken by modifying the Cortex.Innovation.Install.Config.json file but this shouldn’t be required for most installations. More information about this can be found at Advanced Configuration.\r\r  Save and close Cortex.Innovation.Install.ps1.\n  Test Installation Script   Open a Windows PowerShell (x64) window as administrator.\n  Navigate PowerShell to inside the Cortex Evolution - Innovation 2022.5 - Installation Scripts folder using the following command, modifying the path as necessary:\ncd \"C:\\Install\\Cortex Evolution - Innovation 2022.5 - Installation Scripts\"   Test Cortex.Innovation.Install.ps1 by running the following command:\n.\\Cortex.Innovation.Install.ps1 -WhatIf   A credentials prompt will appear. Enter credentials of a domain user that is a member of the local Administrators group on all servers (Application and Load Balancer) and press OK.\n  A password prompt will appear. Enter a password which will be used to create a user in RabbitMQ.\n  Wait for the command to finish. It will display the output of the installation command without making any changes to the system, to ensure things like communication between the servers are working.\n  Check that there have been no errors in the script; these would appear in red in the console.\nIf there are no errors, continue to the next step; otherwise, check if the errors have any instructions for rectifying the issue and follow them.\nIf there are no useful instructions, check that all previous steps have been followed correctly and, if not, rectify it and run the command again. If this does not work, please contact Cortex Service Desk for further assistance. The WhatIf script will have created a temporary version of the config file showing what changes would be made to it when the script runs. The name is appended with -WhatIf (e.g. Cortex.Innovation.Install.Config-WhatIf.json). This file can be provided when obtaining support.\n  Run Installation Script   Install HA Services and the required infrastructure by running the following command (Tee-Object will write output to both the PowerShell console and a log file, the FilePath value can be changed if required):\n.\\Cortex.Innovation.Install.ps1 | Tee-Object -FilePath \"cortex-ha-install-log.txt\"   A credentials prompt will appear. Enter credentials of a domain user that is a member of the local Administrators group on all servers (Application and Load Balancer) and press OK.\n  A password prompt will appear. Enter a password which will be used to create a user in RabbitMQ. This should be entered carefully and recorded as it may be needed if seeking support from Cortex Service Desk. Press OK.\n  Wait for the script to finish running. This should take approximately 10 minutes.\n  Check that there have been no errors in the script; these would appear in red in the console.\nIf there are any errors, then please follow any instructions given within them to rectify the situation, check your configuration files, and retry the installation.\nIn some circumstances, retrying may error due to components being installed already. In this case please run the following command, followed by the original installation command:\n.\\Cortex.Innovation.Uninstall.ps1 If the errors do not give any instructions on how to rectify, see Troubleshooting During Installation for further information; if this does not help then please contact Cortex Service Desk for assistance.\n  Check HA Services   Log on to one of the Application Servers.\n  Import the client certificate, used in the ClientCertificatePath parameter of the Configure Installation Script section, to your Current User certificate store. This can be achieved by double clicking on the client certificate .PFX file and following the wizard.\nIf using self-signed certificates, the certificate can be retrieved by using the Manage Computer Certificates tool in Windows to export the CortexServerCertificate from the Personal store and then importing it to the Current User store by double-clicking on it and following the wizard.\n  Open a web browser.\n  Navigate to https://ha-server.domain.com:9080/Explorer, where ha-server.domain.com is the fully qualified domain name of any Application Server. Replace 9080 with new httpGatewayEndpointPort value if it was changed during configuration.\nThe screen should resemble that in the following figure: \rHealthy Service Fabric Explorer Cluster\r\r\rThe status circles should be entirely green - this indicates that all nodes, services and instances are healthy. Other status pages can be accessed by expanding items in the leftmost pane. Issues can be tracked down to the failing component by expanding items with warning triangles or error icons on. The next few digrams show the status pages for a healthy system.\nAfter expanding the application, clicking on any of the services should display a green circle and Status = Active:\n\rHealthy Service Fabric Explorer Service\r\r\rAfter expanding either of the services, clicking on any of the instances/partitions should display a green circle and Status = Ready:\n\rHealthy Service Fabric Explorer Instance\r\r\rClicking on any of the nodes at the bottom of the leftmost pane should display a green circle and Status = Up:\n\rHealthy Service Fabric Explorer Node\r\r\rIf any warning triangles appear, wait for 5 minutes or so as the cluster may still be starting up. If the cluster looks OK, go to the next section.\nIf the warnings persist or anything on the screen goes red, expand the items to find the individual services and instances which have errors or warnings. Warnings should not be ignored as they can indicate that the service can’t start but is still in the retry phase. Error and warning messages should be displayed on the status screens and should indicate what is wrong.\nIf no useful message can be seen here, the service log files may contain more information. These can be found on each Application Server at:\n %ProgramData%/Cortex/Cortex API Gateway Service %ProgramData%/Cortex/Cortex Flow Service  If no solution can be found, please contact Cortex Service Desk for further assistance.\n  Install Web Application Server Install Gateway   Use one of the following installation guides to install SQL Server or SQL Server Express:\n SQL Server 2019 Installation Guide for Cortex SQL Server 2016 Installation Guide for Cortex SQL Server 2016 Express Installation Guide for Cortex    Copy the following artefact (the version number may differ) to the machine that you will be installing Cortex Gateway on:\n Cortex Evolution - Innovation 2022.5 - Gateway.zip    Use the Cortex Installation Guide to install Cortex Gateway. The following sections will need to be followed as prerequisites to following the Cortex Gateway Installation section:\n 3.1 - System Requirements 3.2 - Additional Components Required for Cortex Gateway Installation 3.3 - Additional pre-requisites 4.3.1 - Install Internet Information Services (IIS) 4.3.2 - Register and Allow .NET CLR v4.0.30319 with IIS Appendix 6 - Actions to Install URL Rewrite Module    Follow section 9 - Cortex Gateway Installation in the same guide. Use the following points as they will differ from a Cortex Integrity installation:\n Ignore section 9.1 - Required Components; no other Cortex Components are required for Cortex Innovation, only those referred to in this guide. In section 9.2.7 - Configure Cortex Gateway installation, whenever Cortex Gateway.zip is mentioned, use the Cortex Evolution - Innovation * - Gateway.zip file that was copied in the previous step. When configuring the parameters.xml file in section 9.2.7 - Configure Cortex Gateway installation, some additional values need to be updated:  \u003csetParameter name=\"Feature Flags\" value=\"\u0026lt;value\u0026gt;InnovationId\u0026lt;/value\u0026gt;\" /\u003e \u003csetParameter name=\"Service Fabric Api Gateway Endpoint\" value=\"\u0026lt;value\u0026gt;https://ha-server1.domain.com:8722/\u0026lt;/value\u0026gt;\" /\u003e \u003csetParameter name=\"Service Fabric Using Self Signed Certificates\" value=\"\u0026lt;value\u0026gt;False\u0026lt;/value\u0026gt;\" /\u003e \u003csetParameter name=\"Service Fabric ApiGateway Basic Auth Username\" value=\"\u0026lt;value\u0026gt;BasicAuthUser\u0026lt;/value\u0026gt;\" /\u003e \u003csetParameter name=\"Service Fabric ApiGateway Basic Auth Password\" value=\"\u0026lt;value\u0026gt;ADA9883B11BD4CDC908B8131B57944A4\u0026lt;/value\u0026gt;\" /\u003e \u003csetParameter name=\"Dot NET flow debugger Endpoint\" value=\"\u0026lt;value\u0026gt;https://app-server.domain.com/debugger/api/\u0026lt;/value\u0026gt;\" /\u003e    Name Description     Feature Flags Configure as above, replacing “InnovationId” with the Cortex Innovation feature identifier. This should be retrieved from Cortex.   Service Fabric Api Gateway Endpoint Configure as above, replacing “ha-server1.domain.com” with the fully qualified domain name of one of the HA nodes. The port should be 8722.   Service Fabric Using Self Signed Certificates Configure the value as “False” if you are using valid CA certificates, “True” if using self-signed certificates   Service Fabric Self Signed Certificate Subject This should not be changed.   Service Fabric ApiGateway Basic Auth Username This only needs to be changed if you provided a non-default ApiGatewayBasicAuthUserName when installing the Cortex HA Infrastructure and Services; if so, this value should be configured to the one provided.   Service Fabric ApiGateway Basic Auth Password This only needs to be changed if you provided a non-default ApiGatewayBasicAuthPassword when installing the Cortex HA Infrastructure and Services; if so, this value should be configured to the one provided. It can be Cortex Encrypted.   Dot NET flow debugger Endpoint Configure as above, replacing “app-server.domain.com” with the fully qualified domain name of the server that the Cortex Flow Debugger Service will be installed on (usually the same one as Gateway).     Ignore the Configuring prerequisites for capability discovery section - this is not yet supported in Cortex Innovation. Ignore the Configuring Connectivity to Cortex Server section - this is only necessary for Cortex Integrity. Ignore the Testing a clean system section - this will be covered later in this guide. Ignore the Verify LiveView Dashboards on Cortex Gateway section - this is not supported in Cortex Innovation.    Install Flow Debugger Service Extract Installation Artefacts   We recommend that the Flow Debugger Service is installed on the Web Application Server, with Gateway. Copy the following artefacts to a folder on the machine (the version numbers may differ):\n Cortex Evolution - Innovation 2022.5 - Block Packages.zip Cortex Evolution - Innovation 2022.5 - Flow Debugger Service.zip Cortex Evolution - Innovation 2022.5 - Installation Scripts.zip    Extract the Cortex Evolution - Innovation 2022.5 - Installation Scripts.zip zip file to a folder with the same name.\n  Configure Installation Script   In the Cortex Evolution - Innovation 2022.5 - Installation Scripts folder, locate the Cortex.Innovation.Install.FlowDebuggerService.ps1 script and open it with a text editor.\n  Configure the script according to the details given below:\n.\\Cortex.Install.FlowDebuggerService.ps1 ` -FlowDebuggerServicePath \"C:\\Install\\Cortex Evolution - Innovation 2022.5 - Flow Debugger Service.zip\" ` -BlockPackagesPath \"C:\\Install\\Cortex Evolution - Innovation 2022.5 - Block Packages.zip\" ` -Credential $AppPoolIdentity    Name Description     FlowDebuggerServicePath Configure this value with the location of the Flow Debugger Service zip file on the Web Application Server.   BlockPackagesPath Configure this value with the location of the Block Packages zip file on the Web Application Server.   Credential The credentials of the user that will be used to run the Debugger application pool in IIS. This does not need to be changed, a prompt will appear to enter this information when the script is run.      Save and close Cortex.Innovation.Install.FlowDebuggerService.ps1.\n  Run Installation Script   Open a Windows PowerShell (x64) window as administrator.\n  Navigate PowerShell to inside the Cortex Evolution - Innovation 2022.5 - Installation Scripts folder using the following command, modifying the path as necessary:\ncd \"C:\\Install\\Cortex Evolution - Innovation 2022.5 - Installation Scripts\"   Install the Flow Debugger Service by running the following command (Tee-Object will write output to both the PowerShell console and a log file, FilePath can be changed if required):\n.\\Cortex.Innovation.Install.FlowDebuggerService.ps1 | Tee-Object -FilePath \"cortex-flow-debugger-service-install-log.txt\"   A credentials prompt will appear. Enter the credentials of the user that should run the Debugger application pool in IIS (this can be the same user as the one used to run the Cortex Gateway application pool).\n  Wait for the script to finish running. This should take approximately 2 minutes.\n  An error may have appeared saying:\nThe Windows Process Activation Service service is not started.\rThis can be ignored.\n  Check that there have been no other errors in the script; these would appear in red in the console.\nIf there are any errors, then please follow any instructions given within them to rectify the situation, and retry the installation.\nIf the errors do not give any instructions on how to rectify, please contact Cortex Service Desk for further assistance.\n  Finish Gateway configuration  Log in to Cortex Gateway as your “administrator” user. In the Cortex Gateway UI go to Settings → LDAP Authorisation and configure security roles for LDAP groups to your requirements. You can refer to Section 2.2 Configuring Authorisation Rights of the Cortex Studio Admin Guide for more details on this. Log out and Login as a user with Studio permissions.  Next Steps?  Setup the platform Try it out  Try it out Test Debugging  Use the following steps to test the system be creating a new flow (alternatively, if you already have Cortex Innovation flows which are compatible with this version, feel free to import them, configure Studio Authorisation for them and check that they can be debugged, published and executed). Click on the Flows charm, then the + button and click Group to open a dialog. Enter a name for the group, configure the Permission Groups and click OK to create the group. Click on the group to open it (refresh the page if it does not appear). Inside the group, click the + button again and click on Flow (Innovation) to open a dialog. If the menu item is not present, it means that the FeatureFlags in the “parameters.xml” file was not set properly when installing Gateway. See Troubleshooting for more information. Enter a name for the flow, configure the Permission Groups and click OK to create the flow. The flow should be displayed with a start flow block and end flow block. A list of block palettes should be displayed down the left hand side: \rNew Flow - Number of palettes may differ\r\r\rIf the blocks in the flow do not display or the palettes are not visible, see Troubleshooting for more information. Add a Set Variable block and connect it between the start and end blocks. Click the Set Variable block to open the Property Editor. Set the Value property to DateTime.Now. Type Output into the Variable property and click Create Variable. In the Variable Editor, set Is Output Variable? to true for the new “Output” variable. Set a breakpoint on the end block and start the flow. An execution token should appear, the Output variable should show the current time. If the token does not appear, try refreshing the page. Continue or stop the execution. Commit the flow.  Test Publishing and Executing production flows   Log into Cortex Gateway with a user that has the Administrator role.\n  Click on the Settings charm, then Packages.\n  Click Add Package Definition. Enter a package name and select the new flow to add to the package. Click Save to add the new package.\n  Click “Publish”. A success message should appear. If it doesn’t it means that either one or more of the Service Fabric x values in the parameters.xml file was not set properly when installing Cortex Gateway, or the HA Services aren’t healthy. See Troubleshooting for more information.\n  Open an HTTP client, such as Postman. Make a request with the following format:\n   Property Value     Action POST   URL https://{FQDN of Application Server}:8722/api/default/default/flows/{Flow Name}/executions?packageName={Package Name}\ne.g. https://ha-server1.domain.com:8722/api/default/default/flows/NewFlow/executions?packageName=NewPackage   Content Type application/json   Body {}   Authentication Basic   Username The value used for ApiGatewayBasicAuthUserName when installing HA Services   Password The value used for ApiGatewayBasicAuthPwd when installing HA Services (Unencrypted)    Note\rIf you used self-signed certificates when installing HA Services and infrastructure you will need to disable SSL certificate validation in your HTTP client.\r\r  The request should return a json object with the output variables of the flow e.g. { \"Output\": \"2022-03-09T07:35:16+0000\" }.\n  Cortex Innovation has now been verified and is ready to use.\n    It is possible to install the Web Application Server components on one of the Application Servers or the Load Balancer Server. Neither Gateway, Databases, nor the Flow Debugger Service currently offer HA support. ↩︎\n Application Servers support HA via clustering. A cluster must consist of a minimum of 3 nodes, and the number of nodes must be an odd number to ensure a quorum. Currently only the Bronze availability (3 nodes) is supported. Silver, Gold and Platinum support will be added in future. ↩︎\n A software-based load balancer called gobetween is provided with the platform. This must be installed on its own server as it doesn’t support routing traffic to itself. It also doesn’t currently support HA, but it may be possible to use multiple gobetween load balancers with Anycast network addressing and routing to provide high availability, as described in https://en.wikipedia.org/wiki/Anycast; however, this has not been verified yet. It is possible to use an alternative load balancer to the one provided. ↩︎\n Windows Server Standard and Datacenter editions are supported. Filesystem must be NTFS and networking must use IPv4. Linux is not supported, but may be in the future. ↩︎\n SQL Server Express, Standard and Enterprise are supported. Other databases are not supported. ↩︎\n PowerShell 5.1 ships with Windows Server 2016 and 2019. ↩︎\n IIS is supported; other web servers, including IIS Express are not supported. ↩︎\n Ships as a windows role within Windows Server 2019. ↩︎\n Ships as a windows role within Windows Server 2016. ↩︎\n   ","categories":"","description":"Information on installing Cortex Innovation across multiple on-premise servers with high availability (HA), including: information about components, supported architectures, pre-requisites and installation instructions.\n","excerpt":"Information on installing Cortex Innovation across multiple on-premise servers with high availability (HA), including: information about components, supported architectures, pre-requisites and …","ref":"/docs/getting-started/on-premise/multiple-server-with-ha/","tags":"","title":"Multiple server - with HA (recommended)"},{"body":"","categories":"","description":"More information on installing Cortex Evolution to virtual machines or physical servers on-premise.","excerpt":"More information on installing Cortex Evolution to virtual machines or physical servers on-premise.","ref":"/docs/getting-started/on-premise/advanced/","tags":"","title":"Multiple server - with HA - Further Information"},{"body":"NonQueryCommand (Cortex.DataTypes.Data.NonQueryCommand)\nSummary Properties Command Text Parameters Known limitations None\nSee also TODO:\n ICommand AnyCommand AnyCommands QueryCommand  ","categories":"","description":"Holds the information for running a Non Query command on a data source.","excerpt":"Holds the information for running a Non Query command on a data source.","ref":"/docs/reference/data-types/data/nonquerycommand/","tags":"","title":"NonQueryCommand"},{"body":"Null and Nullable Types Overview TODO: Overview/summary\nNull Nullable Types Blocks that use Nullable Types ","categories":"","description":"This page describes the concept of Null and Nullable Types.","excerpt":"This page describes the concept of Null and Nullable Types.","ref":"/docs/reference/concepts/null-and-nullable-types/","tags":"","title":"Null and Nullable Types"},{"body":"","categories":"","description":"Data types used for working with numbers.","excerpt":"Data types used for working with numbers.","ref":"/docs/reference/data-types/numbers/","tags":"","title":"Numbers"},{"body":"Object (System.Object)\nSummary Any data type can be used where an Object data type is required, as all data types derive from Object.\nObject data type is identical to the dynamic data type, except for one difference; dynamic data types do not need to be explicitly cast to other data types to be used, whereas Object data types do.\n         Category: All   Name: Object   Full Name: System.Object   Alias: object   Description: Any data type can be used where an Object data type is required, as all data types derive from Object. Object data type is identical to the dynamic data type, except for one difference; dynamic data types do not need to be explicitly cast to other data types to be used, whereas Object data types do.   Size: Varies   Default Value: null   Can be used as: Object, dynamic   Can be cast to: N/A    Remarks When is the Object Data Type Used? The Object data type is only likely to be encountered in the following circumstances:\n An Input or InputOutput property of a Block can accept any data type An Output property of a Block can return any data type A Collection that contains different data types (e.g. [1, \"Text\", true]) is saved to a Variable  Also note, in these circumstances it is more likely to encounter the dynamic data type, rather than Object. See Object vs dynamic for more information.\nIt is also highly unlikely that you will need to create an Object; typically you will create and work with other data types such as String or Int32 that derive from Object. However, if ever required you can create a new object using the following expression:\nnew Object() Object vs dynamic Object and dynamic data types are identical, except for one difference:\n Once a variable contains an Object data type, if it needs to be used as its original data type it must be cast back to that data type (e.g. (Int32)($)ObjectVariableContainingAnInteger); a dynamic data type does not.  Property Editor Support  The Expression Editor is available for Input properties where the data type is Object. The Literal Editor is not available for Input properties where the data type is Object. The Variable Editor is available for InputOutput and Output properties where the data type is Object.  Known Limitations None\nSee Also Related Types  dynamic  Related Concepts None\nExternal Documentation  System.Object Using dynamic  ","categories":"","description":"Any data type can be used where an `Object` data type is required, as all data types derive from `Object`.","excerpt":"Any data type can be used where an `Object` data type is required, as all data types derive from `Object`.","ref":"/docs/reference/data-types/all/object/","tags":"","title":"Object"},{"body":"Object Casting Overview TODO: Overview/summary\nImplicit Cast Explicit Cast Object vs dynamic ","categories":"","description":"This page describes the concept of Object Casting.","excerpt":"This page describes the concept of Object Casting.","ref":"/docs/reference/concepts/object-casting/","tags":"","title":"Object Casting"},{"body":"Object Equality Overview TODO: Overview/summary\nValue Type vs Reference Type Equality TODO:\nValue Type Equality TODO: notes about value equality and a worked through example\nReference Type Equality TODO: notes about reference equality and a worked through example\nHow Cortex compares objects for equality TODO: notes about how cortex compares and a worked through example\nNotes:List and Dictionary equality is slightly different to normal equality as it will compare first based on reference and then fall back to value - compared to == .Equals .ReferenceEquals - blocks affected\n","categories":"","description":"This page describes the concept of Object Equality.","excerpt":"This page describes the concept of Object Equality.","ref":"/docs/reference/concepts/object-equality/","tags":"","title":"Object Equality"},{"body":"","categories":"","description":"Blocks common to all object data types.","excerpt":"Blocks common to all object data types.","ref":"/docs/reference/blocks/objects/","tags":"","title":"Objects"},{"body":"OccurrenceNotPresentException (Cortex.Exceptions.Dictionaries.OccurrenceNotPresentException)\nThe exception thrown when trying to get a specified occurrence of an item from a dictionary, or set a specified occurrence of an item in a dictionary.\nThe format of the exception message is as follows:\n\"TODO. Please click the HelpLink for more information on how to fix this.\" How to fix TODO:\n","categories":"","description":"The exception thrown when trying to get a specified occurrence of an item from a dictionary, or set a specified occurrence of an item in a dictionary.","excerpt":"The exception thrown when trying to get a specified occurrence of an item from a dictionary, or set a specified occurrence of an item in a dictionary.","ref":"/docs/reference/exceptions/dictionaries/occurrencenotpresentexception/","tags":"","title":"OccurrenceNotPresentException"},{"body":"Occurrences Overview TODO: Overview/summary\nPositive Occurrences TODO:\nNegative Occurrences TODO:\nBlocks that use Occurrences TODO:\n","categories":"","description":"This page describes the concept of Occurrences.","excerpt":"This page describes the concept of Occurrences.","ref":"/docs/reference/concepts/occurrences/","tags":"","title":"Occurrences"},{"body":"OperationFailedException (Cortex.Exceptions.FilesAndFolders.OperationFailedException)\nThe exception thrown when a file or folder operation failed for one or more paths.\nPath Exceptions PathDoesNotExist The format of the exception message is as follows:\n\"TODO. Please click the HelpLink for more information on how to fix this.\" How to fix TODO:\nBlocks that can throw this exception TODO:\nPathTooLong The format of the exception message is as follows:\n\"TODO. Please click the HelpLink for more information on how to fix this.\" How to fix TODO:\nBlocks that can throw this exception TODO:\nIndexes Of Duplicate Paths /// If any path in the specified filePaths is duplicated and no exception is thrown for that path, the block will only process the first occurrence of the path, skipping any other occurrences.\n /// If any path in the specified filePaths is duplicated and an exception occurs for that path an \u003csee cref=\"OperationFailedException\"\u003eOperationFailedException\u003c/see\u003e will be thrown, and the path added to the \"IndexesOfDuplicatePaths\" dictionary in \u003csee cref=\"OperationFailedException\"\u003eOperationFailedException\u003c/see\u003e.\r Indexes Of Null Or Empty Paths /// If any path in the specified filePaths is null or empty, an OperationFailedException will be thrown, and the path added to the “IndexesOfNullOrEmptyPaths” list in OperationFailedException.\nHow to fix TODO:\n","categories":"","description":"The exception thrown when a file or folder operation failed for one or more paths.","excerpt":"The exception thrown when a file or folder operation failed for one or more paths.","ref":"/docs/reference/exceptions/files-and-folders/operationfailedexception/","tags":"","title":"OperationFailedException"},{"body":"Pattern Matching Syntax Overview TODO: Overview/summary\n* is 0 or more ? is 0 or 1 to use these as literals use \\\\* \\\\?\nBlocks that use Pattern Matching TODO:\n","categories":"","description":"This page describes Pattern Matching Syntax.","excerpt":"This page describes Pattern Matching Syntax.","ref":"/docs/reference/concepts/pattern-matching-syntax/","tags":"","title":"Pattern Matching Syntax"},{"body":"Port Requirements Cortex Innovation and Microsoft Service Fabric open a range of firewall ports between the servers and specific services. Some of them are opened during installation, others are opened dynamically as needed. These are opened on Windows Firewall. If any other firewall exists between the servers, it will be necessary to configure this selection of rules on it. Most ports may be altered if another program overlaps with them, the description will say if this is not possible.\nCortex Innovation Ports    Name Description Default Port(s) Protocol Direction     Cortex.RabbitMqAmqpPorts The port used by AMQP 0-9-1 and 1.0 clients with TLS. This cannot currently be changed. 5671 TCP Inbound   Cortex.RabbitMqEpmdPorts The port used by epmd, a peer discovery service used by RabbitMQ nodes and CLI tools. This cannot currently be changed. 4369 TCP Inbound   Cortex.RabbitMqErlangDistribut ionClientPorts The ports used by CLI tools (Erlang distribution client ports) for communication with nodes and is allocated from a dynamic range (computed as Erlang dist port + 10000 through dist port + 10010). This cannot currently be changed. 35672-35682 TCP Inbound   Cortex.RabbitMqErlangDistribut ionServerPort The port used for RabbitMQ inter-node and CLI tools communication (Erlang distribution server port) and is allocated from a dynamic range (limited to a single port by default, computed as AMQP port + 20000). This cannot currently be changed. 25672 TCP Inbound   Cortex.RabbitMqManagement ApiPort The port used by the RabbitMQ management plugin. This cannot currently be changed. 15671 TCP Inbound   Cortex.WindowsSmbRemote Registry The ports used by Windows SMB and Remote Registry service. 135, 137, 138, 139, 445 TCP Inbound   Cortex.ServiceFabric.Customer1. ClusterConnectionEndpointPort The port used by the client to connect to the cluster when client APIs are used. 8001 TCP Inbound   Cortex.ServiceFabric.Customer1. ClientConnectionEndpointPort The port where the nodes communicate with each other. 8002 TCP Inbound   Cortex.ServiceFabric.Customer1. ServiceConnectionEndpointPort The port used by the applications and services deployed on a node to communicate with the Service Fabric client on that particular node. 8004 TCP Inbound    Microsoft Service Fabric Firewall Rules (present on all Application Servers, with Domain, Public and Private Profiles) These rules will all appear in Windows Firewall with names starting with ‘{CustomerName}.{NodeName} WindowsFabric’.\n   Name in Rule Name in Config Description Default Port(s) Protocol(s) Direction     Application Processes application Ports The ports that are used by the Service Fabric applications. Service Fabric uses these ports whenever new dynamic ports are required. The application port range should be large enough to cater for the dynamic port allocation of the application. Currently at least 400 is recommended. This may change if new services are added. This range should not overlap the Dynamic Ports (ephemeralPorts) range as set in the configuration. Program: Any 10010-10500 TCP, UDP Inbound, Outbound   BackupRestore Service Process N/A The port used by the Service Fabric process which manages the backup and restore of HA nodes. Program: %ProgramData%\\SF\\.\\Fabric\\work\\Applications\\ __FabricSystem_\\BRS.Code.Current\\FabricBRS.exe Any TCP Inbound, Outbound   CentralSecret Service Process N/A The port used by the Service Fabric process which manages secrets. Program: %ProgramData%\\SF\\.\\Fabric\\work\\Applications\\ __FabricSystem_\\BRS.Code.Current\\FabricCSS.exe Any TCP Inbound, Outbound   DCA Process N/A The port used by the Service Fabric Diagnostics Collection Agent, which manages Diagnostic data. Program: %ProgramFiles%\\Microsoft Service Fabric\\bin\\ Fabric\\DCA.Code\\FabricDCA.exe Any TCP Outbound   Dynamic Ports ephemeral Ports Override the dynamic ports used by the OS. Service Fabric uses a part of these ports as application ports, and the remaining are available for the OS. It also maps this range to the existing range present in the OS, so for all purposes, you can use the ranges given in the sample JSON files. Make sure that the difference between the start and the end ports is at least 255. You might run into conflicts if this difference is too low, because this range is shared with the OS. To see the configured dynamic port range, run netsh int ipv4 show dynamicport tcp. Program: Any 10501-20000 TCP, UDP Inbound, Outbound   EventStore Service Process N/A The port used by the Service Fabric EventStore, which maintains events about the state of the HA nodes. Program: %ProgramData%\\SF\\.\\Fabric\\work\\Applications\\ __FabricSystem_App*\\ES.Code.Current\\ EventStore.Service.exe Any TCP Inbound, Outbound   Fabric Gateway Process N/A The port used by the Service Fabric Gateway, which allows REST and management functions to access the HA nodes. Program: %ProgramFiles%\\Microsoft Service Fabric\\bin\\Fabric\\ Fabric.Code\\FabricGateway.exe Any TCP Inbound, Outbound   Fabric Process N/A The port used by the main Service Fabric service. Program: %ProgramFiles%\\Microsoft Service Fabric\\bin\\Fabric\\ Fabric.Code\\Fabric.exe Any TCP Inbound, Outbound   FabricUpgrade Service Process N/A The port used by the Service Fabric Upgrade service. Program: %ProgramData%\\SF\\.\\Fabric\\work\\Applications\\ __FabricSystem_App*\\US.Code.Current\\FabricUS.exe Any TCP Inbound, Outbound   FaultAnalysis Service Process N/A The port used by the Service Fabric Fault Analysis service. Program: %ProgramData%\\SF\\.\\Fabric\\work\\Applications\\ __FabricSystem_App*\\FAS.Code.Current\\FabricFAS.exe Any TCP Inbound, Outbound   FileStore Service Process N/A The port used by the Service Fabric File Store service, which manages the application file store and image store. Program: %ProgramData%\\SF\\.\\Fabric\\work\\Applications\\ __FabricSystem_App*\\FileStoreService.Code.Current\\ FileStoreService.exe Any TCP Inbound, Outbound   GatewayResource Manager Process N/A The port used by the Service Fabric Gateway Resource Manager, which provides APIs to manage the HA nodes and other resources. Program: %ProgramData%\\SF\\.\\Fabric\\work\\Applications\\ __FabricSystem_App*\\GRM.Code.Current\\FabricGRM.exe Any TCP Inbound, Outbound   HTTP App Gateway reverse Proxy Endpoint Port This port cannot be changed at the current time. If it is already in use, please contact Cortex for assistance. The reverse proxy endpoint. For more information, see Service Fabric reverse proxy. Program: Any 9081 TCP Inbound, Outbound   Http Gateway http Gateway Endpoint Port The port used by Service Fabric Explorer to connect to the cluster. This changes the port used to connect to the Service Fabric management portal as part of the post-install checks. Program: Any 9080 TCP Inbound, Outbound   Infrastructure Service Process N/A The port used by the Service Fabric Infrastructure Service. Program: %ProgramData%\\SF\\.\\Fabric\\work\\Applications\\ __FabricSystem_App*\\IS.Code.Current\\FabricIS.exe Any TCP Inbound, Outbound   Lease Driver lease Driver Endpoint Port The port used by the cluster lease driver to find out if the nodes are still active. Program: Any 9002 TCP Inbound, Outbound   ManagedIdentity TokenService Process N/A The port used by the Service Fabric Managed Identity Token Service. Program: %ProgramData%\\SF\\.\\Fabric\\work\\Applications\\ __FabricSystem_App*\\MITS.Code.Current\\ ManagedIdentityTokenService.exe Any TCP Inbound, Outbound   RepairManager Service Process N/A The port used by the Service Fabric Repair Manager Service. Program: %ProgramData%\\SF\\.\\Fabric\\work\\Applications\\ __FabricSystem_App*\\RM.Code.Current\\FabricRM.exe Any TCP Inbound, Outbound   Upgrade Orchestration Service Process N/A The port used by the Service Fabric Upgrade Orchestration service. Program: %ProgramData%\\SF\\.\\Fabric\\work\\Applications\\ __FabricSystem_App*\\UOS.Code.Current\\FabricUOS.exe Any TCP Inbound, Outbound    Cortex HA Service Rules Each service has an endpoint which is used to communicate with Service Fabric and the RabbitMQ message broker. These are configured in the ServiceManifest.xml file within each package in the ApplicationPackages\\Cortex directory of the installation media. These ports cannot be used by any other program. If they do clash with another program, they may be changed but additional configuration changes may be necessary, as described in the description of each port. The Application ports must not lie in the ephemeralPorts range.\n   Name of Service Description Default Port(s) Protocol(s) Direction Program     API Gateway The port providing an entry into the API Gateway service. This is used by Cortex Gateway to communicate with the Cortex HA infrastructure. If this is changed then it will be necessary to use the updated value in the \"Service Fabric Api Gateway Endpoint\" parameter of SetParameters.xml when configuring Cortex Gateway later in this document. 8722 TCP, UDP Inbound, Outbound Any   Flow Execution The ports providing communication between other services and the stateful Cortex Flow Execution service. These are dynamic ports managed by Service Fabric. Dynamic – Uses the application ports N/A N/A N/A    ","categories":"","description":"Information on the ports opened when installing Cortex Innovation.\n","excerpt":"Information on the ports opened when installing Cortex Innovation.\n","ref":"/docs/getting-started/on-premise/advanced/ports/","tags":"","title":"Port Requirements"},{"body":"","categories":"","description":"Blocks related to working with Windows PowerShell and PowerShell Core.","excerpt":"Blocks related to working with Windows PowerShell and PowerShell Core.","ref":"/docs/reference/blocks/powershell/","tags":"","title":"PowerShell"},{"body":"Primitive Types ","categories":"","description":"This page describes the concept of Primitive Types.","excerpt":"This page describes the concept of Primitive Types.","ref":"/docs/reference/concepts/fundamentals/primitive-types/","tags":"","title":"Primitive Types"},{"body":"","categories":"","description":"Exceptions related to issues with Block Properties","excerpt":"Exceptions related to issues with Block Properties","ref":"/docs/reference/exceptions/common/property/","tags":"","title":"Property"},{"body":"Property Type TODO: Verify all of this as was written by Louis ages ago.\nThis page describes the concept of Input, Output and InputOutput properties.\nInput The input property is used to supply the value which will be used by the block. It can be a variable reference or a literal\n Existing value of the input property will not get modified during block execution\n Output The Output property is used to save the result of block execution. It can be only a variable reference\n Existing value of the supplied variable will get modified\n Discarding Output TODO:\nInputOutput TODO: used during block? What did Louis mean.\nThe InputOutput property is used to supply the value which will be used during block. It is also used to save the result of block execution. It can be only a variable reference\n Existing value of the supplied variable will get modified\n ","categories":"","description":"This page describes the concepts of Input, Output and InputOutput properties.","excerpt":"This page describes the concepts of Input, Output and InputOutput properties.","ref":"/docs/reference/concepts/property-type/","tags":"","title":"Property Type"},{"body":"PropertyContainsNullOrEmptyItemException (Cortex.Exceptions.Common.Property.PropertyEmptyException)\nThe exception thrown when a property is provided that contains at least one item that is either null or empty, but the item is required to have a value.\nThe format of the exception message is as follows:\nTODO: How to fix TODO\n","categories":"","description":"The exception thrown when a property is provided with an empty value, but a value is required.","excerpt":"The exception thrown when a property is provided with an empty value, but a value is required.","ref":"/docs/reference/exceptions/common/property/propertycontainsnulloremptyitemexception/","tags":"","title":"PropertyContainsNullOrEmptyItemException"},{"body":"PropertyEmptyException (Cortex.Exceptions.Common.Property.PropertyEmptyException)\nThe exception thrown when a property is provided with an empty value, but a value is required.\nThe format of the exception message is as follows:\nTODO: \"\u003cproperty-display-name\u003e is null; it must be provided with a non-null value\" How to fix Provide a value for the property which is not empty.\n","categories":"","description":"The exception thrown when a property is provided with an empty value, but a value is required.","excerpt":"The exception thrown when a property is provided with an empty value, but a value is required.","ref":"/docs/reference/exceptions/common/property/propertyemptyexception/","tags":"","title":"PropertyEmptyException"},{"body":"PropertyItemCountException (Cortex.Exceptions.Common.Property.PropertyItemCountException)\nThe exception thrown when two properties are expected to contain the same number of items, but don’t.\nThe format of the exception message is as follows:\nTODO: How to fix Ensure that the value (literal, expression or variable) used for each of the two properties contains the same number of items.\n","categories":"","description":"The exception thrown when two properties are expected to contain the same number of items, but don't.","excerpt":"The exception thrown when two properties are expected to contain the same number of items, but don't.","ref":"/docs/reference/exceptions/common/property/propertyitemcountexception/","tags":"","title":"PropertyItemCountException"},{"body":"PropertyNotNullableException (Cortex.Exceptions.Dictionaries.KeyNotPresentException)\nThe exception thrown when a property cannot accept a non-nullable value type.\nThe format of the exception message is as follows:\n\"TODO. Please click the HelpLink for more information on how to fix this.\" TODO: This is an example of how we can do exceptions with categories and error codes\n   Category Error Code Notes     BasicCredentials 300 Some notes    301 Some notes    302 Some notes   BasicCredentials 300 Some notes    301 Some notes    302 Some notes   BasicCredentials 300 Some notes    301 Some notes    302 Some notes   BasicCredentials 300 Some notes    301 Some notes    302 Some notes   BasicCredentials 300 Some notes    301 Some notes    302 Some notes   BasicCredentials 300 Some notes    301 Some notes    302 Some notes   BasicCredentials 300 Some notes    301 Some notes    302 Some notes   BasicCredentials 300 Some notes    301 Some notes    302 Some notes   BasicCredentials 300 Some notes    301 Some notes    302 Some notes    BasicCredentials.AccessTokenUri 300 How to fix TODO:\n301 How to fix TODO:\n302 How to fix TODO:\n","categories":"","description":"The exception thrown when a property cannot accept a non-nullable value type.","excerpt":"The exception thrown when a property cannot accept a non-nullable value type.","ref":"/docs/reference/exceptions/decisions/propertynotnullableexception/","tags":"","title":"PropertyNotNullableException"},{"body":"PropertyNullException (Cortex.Exceptions.Common.Property.PropertyNullException)\nThe exception thrown when a property is provided with a null value, but a value is required.\nThe format of the exception message is as follows:\n\"\u003cproperty-display-name\u003e is null; it must be provided with a non-null value\" How to fix Provide a value for the property which is not null.\n","categories":"","description":"The exception thrown when a property is provided with a `null` value, but a value is required.","excerpt":"The exception thrown when a property is provided with a `null` value, but a value is required.","ref":"/docs/reference/exceptions/common/property/propertynullexception/","tags":"","title":"PropertyNullException"},{"body":"PropertyValueOutOfRangeException (Cortex.Exceptions.Common.Property.PropertyValueOutOfRangeException)\nThe exception thrown when a property is provided with a value that falls outside its accepted range.\nTODO - I AM UPTO HERE - NEED TO TALK WITH TYLER ABOUT ALL THE VARIOUS FORMATS - The format of the exception message is as follows:\n\"\u003cproperty-display-name\u003e is null; it must be provided with a non-null value\" How to fix Provide a value for the property which falls within the accepted range.\n","categories":"","description":"The exception thrown when a property is provided with a value that falls outside its accepted range.","excerpt":"The exception thrown when a property is provided with a value that falls outside its accepted range.","ref":"/docs/reference/exceptions/common/property/propertyvalueoutofrangeexception/","tags":"","title":"PropertyValueOutOfRangeException"},{"body":"QueryCommand (Cortex.DataTypes.Data.QueryCommand)\nSummary Properties Command Text Parameters Known limitations None\nSee also TODO:\n ICommand AnyCommand AnyCommands NonQueryCommand  ","categories":"","description":"Holds the information for running a Query command on a data source.","excerpt":"Holds the information for running a Query command on a data source.","ref":"/docs/reference/data-types/data/querycommand/","tags":"","title":"QueryCommand"},{"body":"\r\rRead All Lines (Cortex.Blocks.FilesAndFolders.ReadFile.ReadAllLinesBlock)\nDescription Reads all Lines from a file at the specified File Path, with an option to explicitly specify the Encoding of the file if needed.\nExamples Read all lines This example will read all lines from \"C:\\Source\\File.txt\", automatically detecting the encoding.\nIn this example assume \"C:\\Source\\File.txt\" is a UTF-8 encoded file containing 10 lines:\nThis is Line 1 This is Line 2 This is Line 3 This is Line 4 This is Line 5 This is Line 6 This is Line 7 This is Line 8 This is Line 9 This is Line 10 Properties    Property Value Notes     File Path ($)FilePath, with value @\"C:\\Source\\File.txt\" ($)FilePath is a variable of type String   Encoding ($)Encoding, with value null ($)Encoding is a variable of type Encoding   Lines ($)Lines, with no value ($)Lines is a variable that will be set to an IList\u003cString\u003e    Result Reading all lines from \"C:\\Source\\File.txt\" results in the variable ($)Lines being updated to the following:\n[ \"This is Line 1\", \"This is Line 2\", \"This is Line 3\", \"This is Line 4\", \"This is Line 5\", \"This is Line 6\", \"This is Line 7\", \"This is Line 8\", \"This is Line 9\", \"This is Line 10\" ]  Properties File Path The File Path to read all lines of the file from.\nThe File Path is case-insensitive, cannot contain any wildcard characters, and any trailing spaces will be automatically removed.\nFor information about the supported file path formats (i.e. absolute, relative, UNC etc.) and examples of each, please see File \u0026 Folder Paths.\n         Data Type String   Property Type Input   Default Value ($)FilePath with value null    Encoding Option to specify the Encoding that should be used to read the file.\nMost of the time Encoding can be left as null; allowing the block to automatically attempt to detect the encoding of the file based on the presence of byte order marks. However, if it is found that the returned Lines are not in the correct format because the block was unable to detect the encoding of the file, it is possible to specify the Encoding explicitly using this property.\nFor information about encoding, examples of available encodings and using them, please see Text Encoding.\n         Data Type String   Property Type Input   Default Value ($)Encoding with value null    Lines All Lines that were read from the file.\nA line is defined as a sequence of characters followed by a carriage return (i.e. \\r), a line feed (i.e. \\n), or a carriage return immediately followed by a line feed. The resulting Lines do not contain the terminating carriage returns and/or line feeds.\n         Data Type IList\u003cString\u003e   Property Type Output   Default Value ($)Lines with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     InvalidPropertyValueException Thrown when Encoding is invalid (e.g. Encoding.GetEncoding(-1)).   OperationFailedException The File Path does not exist.    The File Path points to a folder.    The File Path contains leading spaces.    The File Path contains only whitespace, or the NUL character (i.e. \\0), or contains one or more invalid characters (i.e. \", *, ?, |, \u003c, \u003e, :, \\, /) in any file or folder names.    The File Path exceeds the system-defined maximum length (typically 32,767 characters).    The File Path is invalid (for example, it is on an unmapped drive).    The user the flow is executing as does not have the required permissions to read the file.    An unexpected error occurs when reading the file.   PropertyEmptyException Thrown when File Path is empty (i.e. \"\").   PropertyNullException Thrown when File Path is null.    Remarks File Paths For information about the supported file path formats (i.e. absolute, relative, UNC etc.) and examples of each, including how it is determined if a path points to a folder or a file, please see File \u0026 Folder Paths.\nFile Path needs escaping File Path requires \\ characters to be escaped, otherwise each unescaped \\ will be reported as an Invalid property value message when trying to debug the flow.\nEscaping can be done in two ways:\n Escaping the \\ character with another \\ character (e.g. \"C:\\\\Source\\\\File.txt\"), or Prepending an @ character before the start of the File Path (e.g. @\"C:\\Source\\File.txt\").  Encoding of text For information about encoding of text, examples of available encodings and using them, please see Text Encoding.\n","categories":"","description":"Reads all lines from a file at the specified file path.","excerpt":"Reads all lines from a file at the specified file path.","ref":"/docs/reference/blocks/files-and-folders/read-file/read-all-lines-block/","tags":"","title":"Read All Lines"},{"body":"\r\rRead All Text (Cortex.Blocks.FilesAndFolders.ReadFile.ReadAllTextBlock)\nDescription Reads all Text from a file at the specified File Path, with an option to explicitly specify the Encoding of the file if needed.\nExamples Read all text This example will read all text from \"C:\\Source\\File.txt\", automatically detecting the encoding.\nIn this example assume \"C:\\Source\\File.txt\" is a UTF-8 encoded file containing the following text:\nThis is Line 1 This is Line 2 This is Line 3 This is Line 4 This is Line 5 This is Line 6 This is Line 7 This is Line 8 This is Line 9 This is Line 10 Properties    Property Value Notes     File Path ($)FilePath, with value @\"C:\\Source\\File.txt\" ($)FilePath is a variable of type String   Encoding ($)Encoding, with value null ($)Encoding is a variable of type Encoding   Text ($)Text, with no value ($)Text is a variable that will be set to a String    Result Reading all text from \"C:\\Source\\File.txt\" results in the variable ($)Text being updated to the following:\n\"This is Line 1 This is Line 2 This is Line 3 This is Line 4 This is Line 5 This is Line 6 This is Line 7 This is Line 8 This is Line 9 This is Line 10\"  Properties File Path The File Path to read all text of the file from.\nThe File Path is case-insensitive, cannot contain any wildcard characters, and any trailing spaces will be automatically removed.\nFor information about the supported file path formats (i.e. absolute, relative, UNC etc.) and examples of each, please see File \u0026 Folder Paths.\n         Data Type String   Property Type Input   Default Value ($)FilePath with value null    Encoding Option to specify the Encoding that should be used to read the file.\nMost of the time Encoding can be left as null; allowing the block to automatically attempt to detect the encoding of the file based on the presence of byte order marks. However, if it is found that the returned Text are not in the correct format because the block was unable to detect the encoding of the file, it is possible to specify the Encoding explicitly using this property.\nFor information about encoding, examples of available encodings and using them, please see Text Encoding.\n         Data Type String   Property Type Input   Default Value ($)Encoding with value null    Text All Text that was read from the file.\n         Data Type String   Property Type Output   Default Value ($)Text with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     InvalidPropertyValueException Thrown when Encoding is invalid (e.g. Encoding.GetEncoding(-1)).   OperationFailedException The File Path does not exist.    The File Path points to a folder.    The File Path contains leading spaces.    The File Path contains only whitespace, or the NUL character (i.e. \\0), or contains one or more invalid characters (i.e. \", *, ?, |, \u003c, \u003e, :, \\, /) in any file or folder names.    The File Path exceeds the system-defined maximum length (typically 32,767 characters).    The File Path is invalid (for example, it is on an unmapped drive).    The user the flow is executing as does not have the required permissions to read the file.    An unexpected error occurs when reading the file.   PropertyEmptyException Thrown when File Path is empty (i.e. \"\").   PropertyNullException Thrown when File Path is null.    Remarks File Paths For information about the supported file path formats (i.e. absolute, relative, UNC etc.) and examples of each, including how it is determined if a path points to a folder or a file, please see File \u0026 Folder Paths.\nFile Path needs escaping File Path requires \\ characters to be escaped, otherwise each unescaped \\ will be reported as an Invalid property value message when trying to debug the flow.\nEscaping can be done in two ways:\n Escaping the \\ character with another \\ character (e.g. \"C:\\\\Source\\\\File.txt\"), or Prepending an @ character before the start of the File Path (e.g. @\"C:\\Source\\File.txt\").  Encoding of text For information about encoding of text, examples of available encodings and using them, please see Text Encoding.\n","categories":"","description":"Reads all text from a file at the specified file path.","excerpt":"Reads all text from a file at the specified file path.","ref":"/docs/reference/blocks/files-and-folders/read-file/read-all-text-block/","tags":"","title":"Read All Text"},{"body":"","categories":"","description":"Read the content of a file.","excerpt":"Read the content of a file.","ref":"/docs/reference/blocks/files-and-folders/read-file/","tags":"","title":"Read File"},{"body":"","categories":"","description":"Guides on Referencing Variables.","excerpt":"Guides on Referencing Variables.","ref":"/docs/reference/concepts/fundamentals/variables/referencing-variables/","tags":"","title":"Referencing Variables"},{"body":"","categories":"","description":"Exceptions related to issues with Regex","excerpt":"Exceptions related to issues with Regex","ref":"/docs/reference/exceptions/text/regex/","tags":"","title":"Regex"},{"body":"RegexParsingFailedException (Cortex.Exceptions.Text.Regex.RegexParsingFailedException)\nThe exception thrown when a property is provided with an invalid regex value.\nThe format of the exception message is as follows:\nTODO How to fix Provide a valid regex value for the property.\n","categories":"","description":"The exception thrown when a property is provided with an invalid regex value.","excerpt":"The exception thrown when a property is provided with an invalid regex value.","ref":"/docs/reference/exceptions/text/regex/regexparsingfailedexception/","tags":"","title":"RegexParsingFailedException"},{"body":"\r\rRemove All Items (Cortex.Blocks.Dictionaries.RemoveItem.RemoveAllItemsBlock`3)\nDescription Removes all items from a Dictionary.\nExamples Remove all items from an empty Dictionary This example will attempt to remove all items from {}.\nProperties    Property Value Notes     Dictionary ($)Dictionary, with value {} ($)Dictionary is a variable of type IDictionary\u003cdynamic, dynamic\u003e    Result Attempting to remove all items from {} results in no operation, as there is nothing to remove. Therefore, the variable ($)Dictionary remains:\n{}  Remove all items from a Dictionary This example will remove all items from {\"Key1\" : 1, \"Key2\" : 2}.\nProperties    Property Value Notes     Dictionary ($)Dictionary, with value {\"Key1\" : 1, \"Key2\" : 2} ($)Dictionary is a variable of type IDictionary\u003cString, Int32\u003e    Result Removing all items from {\"Key1\" : 1, \"Key2\" : 2} results in the variable ($)Dictionary being updated to the following:\n{}  Properties Dictionary The Dictionary where all items are removed from.\nDictionary can be any IDictionary\u003cTKey, TItem\u003e, where TKey represents the type of keys used to lookup items in the Dictionary, and TItem represents the type of items in the Dictionary.\n         Data Type IDictionary\u003cTKey, TItem\u003e   Property Type InputOutput   Default Value ($)Dictionary with value {}    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     CannotModifyReadOnlyDictionaryException Thrown when Dictionary is read-only.   PropertyNullException Thrown when Dictionary is null.    Remarks Empty Dictionary If Dictionary is empty (i.e. {}) there is nothing to remove, so no operation is performed.\nDefining dictionaries using literal syntax For information about how to define dictionaries using literal syntax, see Dictionary Literals.\nDefining dictionaries using expression syntax For information about how to define dictionaries using expression syntax, see Dictionary Expressions.\nDictionaries containing items with same data types vs different data types For information about the different types of dictionaries, including those that can contain only the same type of item, and those that can contain different types of item, see Dictionaries.\n","categories":"","description":"Removes all items from a Dictionary.","excerpt":"Removes all items from a Dictionary.","ref":"/docs/reference/blocks/dictionaries/remove-item/remove-all-items-block-3/","tags":"","title":"Remove All Items"},{"body":"\r\rRemove All Items (Cortex.Blocks.Lists.RemoveItem.RemoveAllItemsBlock`2)\nDescription Removes all items from a List.\nExamples Remove all items from an empty List This example will attempt to remove all items from [].\nProperties    Property Value Notes     List ($)List, with value [] ($)List is a variable of type IList\u003cdynamic\u003e    Result Attempting to remove all items from [] results in no operation, as there is nothing to remove. Therefore, the variable ($)List remains:\n[]  Remove all items from a List This example will remove all items from [\"Some Text\", 1].\nProperties    Property Value Notes     List ($)List, with value [\"Some Text\", 1] ($)List is a variable of type IList\u003cdynamic\u003e    Result Removing all items from [\"Some Text\", 1] results in the variable ($)List being updated to the following:\n[]  Properties List The List where all items are removed from.\nList can be any IList\u003cTItem\u003e, where TItem represents the type of items that can be removed from the List.\n         Data Type IList\u003cTItem\u003e   Property Type InputOutput   Default Value ($)List with value []    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     CannotModifyReadOnlyListException Thrown when List is read-only.   PropertyNullException Thrown when List is null.    Remarks Empty List If List is empty (i.e. []) there is nothing to remove, so no operation is performed.\nDefining lists using literal syntax For information about how to define lists using literal syntax, see List Literals.\nDefining lists using expression syntax For information about how to define lists using expression syntax, see List Expressions.\nLists containing items of a single data type vs multiple data types For information about the different types of lists, including those that can contain only a single type of item, and those that can contain multiple types of item, see Lists.\n","categories":"","description":"Removes all items from a List.","excerpt":"Removes all items from a List.","ref":"/docs/reference/blocks/lists/remove-item/remove-all-items-block-2/","tags":"","title":"Remove All Items"},{"body":"\r\rRemove Duplicate Items (Cortex.Blocks.Lists.RemoveItem.RemoveDuplicateItemsBlock`2)\nDescription Removes duplicate items from a List.\nExamples Remove duplicate items from an empty List This example will attempt to remove duplicate items from [].\nProperties    Property Value Notes     List ($)List, with value [] ($)List is a variable of type IList\u003cdynamic\u003e    Result Attempting to remove duplicate items from [] results in no operation, as there is nothing to remove. Therefore, the variable ($)List remains:\n[]  Remove duplicate items from a List without duplicates This example will attempt to remove duplicate items from [\"Some Text\", 1].\nProperties    Property Value Notes     List ($)List, with value [\"Some Text\", 1] ($)List is a variable of type IList\u003cdynamic\u003e    Result Attempting to remove duplicate items from [\"Some Text\", 1] results in no operation, as there are no duplicates to remove. Therefore, the variable ($)List remains:\n[\"Some Text\", 1]  Remove duplicate items from a List containing duplicates This example will remove duplicate items from [\"Some Text\", 1, \"Some Text\", 1].\nProperties    Property Value Notes     List ($)List, with value [\"Some Text\", 1, \"Some Text\", 1] ($)List is a variable of type IList\u003cdynamic\u003e    Result Removing duplicate items from [\"Some Text\", 1, \"Some Text\", 1] results in the second occurrences of \"Some Text\" and 1 being removed; with the variable ($)List being updated to the following:\n[\"Some Text\", 1]  Properties List The List where duplicate items are removed from.\nList can be any IList\u003cTItem\u003e, where TItem represents the type of items that can be removed from the List.\nFor information and examples of how it is determined whether two items are considered the same, please see Object Equality.\n         Data Type IList\u003cTItem\u003e   Property Type InputOutput   Default Value ($)List with value []    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     CannotModifyReadOnlyListException Thrown when List is read-only.   PropertyNullException Thrown when List is null.    Remarks Empty List If List is empty (i.e. []) there is nothing to remove, so no operation is performed.\nList with no duplicates If List does not contain duplicates there is nothing to remove, so no operation is performed.\nWhich duplicates are removed? If List contains duplicates, the first occurrences of the duplicated items are kept; all other occurrences are removed.\nDefining lists using literal syntax For information about how to define lists using literal syntax, see List Literals.\nDefining lists using expression syntax For information about how to define lists using expression syntax, see List Expressions.\nLists containing items of a single data type vs multiple data types For information about the different types of lists, including those that can contain only a single type of item, and those that can contain multiple types of item, see Lists.\n","categories":"","description":"Removes duplicate items from a List.","excerpt":"Removes duplicate items from a List.","ref":"/docs/reference/blocks/lists/remove-item/remove-duplicate-items-block-2/","tags":"","title":"Remove Duplicate Items"},{"body":"\r\rRemove Item At Beginning (Cortex.Blocks.Lists.RemoveItem.RemoveItemAtBeginningBlock`2)\nDescription Removes the item at the beginning of a List.\nExamples Remove the Item at the beginning of an empty List This example will attempt to remove the item at the beginning of [].\nProperties    Property Value Notes     List ($)List, with value [] ($)List is a variable of type IList\u003cdynamic\u003e    Result Attempting to remove the item at the beginning of [] results in no operation, as there is nothing to remove. Therefore, the variable ($)List remains:\n[]  Remove the Item at the beginning of a List This example will remove the item at the beginning of [\"Some Text\", 1].\nProperties    Property Value Notes     List ($)List, with value [\"Some Text\", 1] ($)List is a variable of type IList\u003cdynamic\u003e    Result Removing the item at the beginning of [\"Some Text\", 1] results in the variable ($)List being updated to the following:\n[1]  Properties List The List where the item is removed from.\nList can be any IList\u003cTItem\u003e, where TItem represents the type of items that can be removed from the List.\n         Data Type IList\u003cTItem\u003e   Property Type InputOutput   Default Value ($)List with value []    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     CannotModifyReadOnlyListException Thrown when List is read-only.   PropertyNullException Thrown when List is null.    Remarks Empty List If List is empty (i.e. []) there is nothing to remove, so no operation is performed.\nDefining lists using literal syntax For information about how to define lists using literal syntax, see List Literals.\nDefining lists using expression syntax For information about how to define lists using expression syntax, see List Expressions.\nLists containing items of a single data type vs multiple data types For information about the different types of lists, including those that can contain only a single type of item, and those that can contain multiple types of item, see Lists.\n","categories":"","description":"Removes the item at the beginning of a List.","excerpt":"Removes the item at the beginning of a List.","ref":"/docs/reference/blocks/lists/remove-item/remove-item-at-beginning-block-2/","tags":"","title":"Remove Item At Beginning"},{"body":"\r\rRemove Item At End (Cortex.Blocks.Lists.RemoveItem.RemoveItemAtEndBlock`2)\nDescription Removes the item at the end of a List.\nExamples Remove the Item at the end of an empty List This example will attempt to remove the item at the end of [].\nProperties    Property Value Notes     List ($)List, with value [] ($)List is a variable of type IList\u003cdynamic\u003e    Result Attempting to remove the item at the end of [] results in no operation, as there is nothing to remove. Therefore, the variable ($)List remains:\n[]  Remove the Item at the end of a List This example will remove the item at the end of [\"Some Text\", 1].\nProperties    Property Value Notes     List ($)List, with value [\"Some Text\", 1] ($)List is a variable of type IList\u003cdynamic\u003e    Result Removing the item at the end of [\"Some Text\", 1] results in the variable ($)List being updated to the following:\n[\"Some Text\"]  Properties List The List where the item is removed from.\nList can be any IList\u003cTItem\u003e, where TItem represents the type of items that can be removed from the List.\n         Data Type IList\u003cTItem\u003e   Property Type InputOutput   Default Value ($)List with value []    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     CannotModifyReadOnlyListException Thrown when List is read-only.   PropertyNullException Thrown when List is null.    Remarks Empty List If List is empty (i.e. []) there is nothing to remove, so no operation is performed.\nDefining lists using literal syntax For information about how to define lists using literal syntax, see List Literals.\nDefining lists using expression syntax For information about how to define lists using expression syntax, see List Expressions.\nLists containing items of a single data type vs multiple data types For information about the different types of lists, including those that can contain only a single type of item, and those that can contain multiple types of item, see Lists.\n","categories":"","description":"Removes the item at the end of a List.","excerpt":"Removes the item at the end of a List.","ref":"/docs/reference/blocks/lists/remove-item/remove-item-at-end-block-2/","tags":"","title":"Remove Item At End"},{"body":"\r\rRemove Item At Index (Cortex.Blocks.Lists.RemoveItem.RemoveItemAtIndexBlock`2)\nDescription Removes the item at the specified Index of a List.\nExamples Remove the Item at the first Index (i.e. 0) of an empty List This example will attempt to remove the item at index 0 of [].\nProperties    Property Value Notes     List ($)List, with value [] ($)List is a variable of type IList\u003cdynamic\u003e   Index ($)Index, with value 0 ($)Index is a variable of type Int32    Result Attempting to remove the item at index 0 of [] results in no operation, as there is nothing to remove. Therefore, the variable ($)List remains:\n[]  Remove the Item at the first Index (i.e. 0) of a List This example will remove the item at index 0 of [\"Some Text\", 1].\nProperties    Property Value Notes     List ($)List, with value [\"Some Text\", 1] ($)List is a variable of type IList\u003cdynamic\u003e   Index ($)Index, with value 0 ($)Index is a variable of type Int32    Result Removing the item at index 0 of [\"Some Text\", 1] results in the variable ($)List being updated to the following:\n[1]  Remove the Item at the last Index (i.e. Index equals count of items - 1) of a List This example will remove the item at index 1 of [\"Some Text\", 1].\nProperties    Property Value Notes     List ($)List, with value [\"Some Text\", 1] ($)List is a variable of type IList\u003cdynamic\u003e   Index ($)Index, with value 1 ($)Index is a variable of type Int32    Result Remove the item at index 1 of [\"Some Text\", 1] results in the variable ($)List being updated to the following:\n[\"Some Text\"]  Properties List The List where the item is removed from.\nList can be any IList\u003cTItem\u003e, where TItem represents the type of items that can be removed from the List.\n         Data Type IList\u003cTItem\u003e   Property Type InputOutput   Default Value ($)List with value []    Index The Index to remove the item at.\nValid values are between and including 0 and the total count of items in the List - 1.\nFor information about what an index is, please see Indexes.\n         Data Type Int32   Property Type Input   Default Value ($)Index with value 0    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     CannotModifyReadOnlyListException Thrown when List is read-only.   PropertyNullException Thrown when List is null.   PropertyValueOutOfRangeException Thrown when Index is out of the range of the list indexes. Valid indexes are between and including 0 and the count of items in the List - 1.    Remarks Defining lists using literal syntax For information about how to define lists using literal syntax, see List Literals.\nDefining lists using expression syntax For information about how to define lists using expression syntax, see List Expressions.\nLists containing items of a single data type vs multiple data types For information about the different types of lists, including those that can contain only a single type of item, and those that can contain multiple types of item, see Lists.\n","categories":"","description":"Removes the item at the specified index of a List.","excerpt":"Removes the item at the specified index of a List.","ref":"/docs/reference/blocks/lists/remove-item/remove-item-at-index-block-2/","tags":"","title":"Remove Item At Index"},{"body":"\r\rRemove Item With Key (Cortex.Blocks.Dictionaries.RemoveItem.RemoveItemWithKeyBlock`3)\nDescription Removes the specified Occurrence of an item with the given Key from a Dictionary.\nExamples Remove the first Occurrence of an item with a Key from an empty Dictionary This example will attempt to remove the first occurrence of an item with the key \"Key1\" from {}.\nProperties    Property Value Notes     Dictionary ($)Dictionary, with value {} ($)Dictionary is a variable of type IDictionary\u003cdynamic, dynamic\u003e   Key ($)Key, with value \"Key1\" ($)Key is a variable of type String   Occurrence ($)Occurrence, with value 1 ($)Occurrence is a variable of type Int32    Result Attempting to remove the first occurrence of an item with the key \"Key1\" from {} results in no operation, as there is nothing to remove. Therefore, the variable ($)Dictionary remains:\n{}  Remove the first Occurrence of an item with a Key from a Dictionary This example will attempt to remove the first occurrence of an item with the key \"Key1\" from {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1}.\nProperties    Property Value Notes     Dictionary ($)Dictionary, with value {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} ($)Dictionary is a variable of type IDictionary\u003cString, Int32\u003e   Key ($)Key, with value \"Key1\" ($)Key is a variable of type String   Occurrence ($)Occurrence, with value 1 ($)Occurrence is a variable of type Int32    Result An Occurrence of 1 means remove the first occurrence; 2 means second etc.\nAttempting to remove the first occurrence of an item with the key \"Key1\" from {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} results in the variable ($)Dictionary being updated to the following:\n{\"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1}  Remove the last Occurrence of an item with a Key from a Dictionary Typically keys are simple data types such as String, Int32, Boolean, and for these a dictionary cannot the same key value more than once. This is due to how the data type’s object equality is implemented (two items are considered equal if they have the same value rather than being the same object reference).\nHowever, other data types such as IList\u003cInt32\u003e can also be used as keys. For these data types, object equality only considers two items equal if they are the same reference; it does not care about whether they have the same value. Therefore, it is possible to have the same key value more than once, and as a result you should be able to remove any occurrence of item with that key.\nThis example will illustrate this, by attempting to remove the last occurrence of an item with the key [1] from {[1] : 1, [2] : 2, [3] : 3, [3] : 3, [2] : 2, [1] : 1}.\nProperties    Property Value Notes     Dictionary ($)Dictionary, with value {[1] : 1, [2] : 2, [3] : 3, [3] : 3, [2] : 2, [1] : 1} ($)Dictionary is a variable of type IDictionary\u003cIList\u003cInt32\u003e, Int32\u003e   Key ($)Key, with value [1] ($)Key is a variable of type IList\u003cInt32\u003e   Occurrence ($)Occurrence, with value -1 ($)Occurrence is a variable of type Int32    Result An Occurrence of -1 means remove the last occurrence; -2 means second last etc.\nAttempting to remove the last occurrence of an item with the key [1] from {[1] : 1, [2] : 2, [3] : 3, [3] : 3, [2] : 2, [1] : 1} results in the variable ($)Dictionary being updated to the following:\n{[1] : 1, [2] : 2, [3] : 3, [3] : 3, [2] : 2}  Properties Dictionary The Dictionary to remove the specified Occurrence of item with the given Key from.\nDictionary can be any IDictionary\u003cTKey, TItem\u003e, where TKey represents the type of keys used to lookup items in the Dictionary, and TItem represents the type of items in the Dictionary.\n         Data Type IDictionary\u003cTKey, TItem\u003e   Property Type InputOutput   Default Value ($)Dictionary with value {}    Key The Key the item to remove must have.\nFor information and examples of how it is determined whether an item has a specified key, please see Object Equality.\nFor information about what a key is, please see Keys.\n         Data Type TKey   Property Type Input   Default Value ($)Key with value null    Occurrence The Occurrence of matching item to remove from the Dictionary.\nItems are considered matching if they have the specified Key.\nUnlike lists, dictionaries do not have a defined order. This means the nth occurrence is determined by the underlying Microsoft .Net implementation; this is not published and could change if the algorithm were to change.\nFor information about supported values for the Occurrence property and examples of how it can be used, please see Occurrences.\n         Data Type Int32   Property Type Input   Default Value ($)Occurrence with value 1    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     CannotModifyReadOnlyDictionaryException Thrown when Dictionary is read-only.   PropertyNullException Thrown when Dictionary or Key are null.    Remarks Key Equality For information and examples of how it is determined whether a key is already present, please see Object Equality.\nOccurrences Unlike lists, dictionaries do not have a defined order. This means the nth occurrence is determined by the underlying Microsoft .Net implementation; this is not published and could change if the algorithm were to change.\nFor information about supported values for the Occurrence property and examples of how it can be used, please see Occurrences.\nEmpty Dictionary If Dictionary is empty (i.e. {}) there is nothing to remove, so no operation is performed.\nNo items with given Key, or Occurrence is not present If Dictionary does not contain items with the given Key or the specified Occurrence is not present, there is nothing to remove, so no operation is performed.\nDefining dictionaries using literal syntax For information about how to define dictionaries using literal syntax, see Dictionary Literals.\nDefining dictionaries using expression syntax For information about how to define dictionaries using expression syntax, see Dictionary Expressions.\nDictionaries containing items with same data types vs different data types For information about the different types of dictionaries, including those that can contain only the same type of item, and those that can contain different types of item, see Dictionaries.\n","categories":"","description":"Removes the specified occurrence of an item with the given key from a Dictionary.","excerpt":"Removes the specified occurrence of an item with the given key from a Dictionary.","ref":"/docs/reference/blocks/dictionaries/remove-item/remove-item-with-key-block-3/","tags":"","title":"Remove Item With Key"},{"body":"\r\rRemove Item With Value (Cortex.Blocks.Dictionaries.RemoveItem.RemoveItemWithValueBlock`3)\nDescription Removes the specified Occurrence of an item matching a Value from a Dictionary.\nExamples Remove the first Occurrence of an item matching a Value from an empty Dictionary This example will attempt to remove the first occurrence of an item matching the value 1 from {}.\nProperties    Property Value Notes     Dictionary ($)Dictionary, with value {} ($)Dictionary is a variable of type IDictionary\u003cdynamic, dynamic\u003e   Value ($)Value, with value 1 ($)Value is a variable of type Int32   Occurrence ($)Occurrence, with value 1 ($)Occurrence is a variable of type Int32    Result Attempting to remove the first occurrence of an item matching the value 1 from {} results in no operation, as there is nothing to remove. Therefore, the variable ($)Dictionary remains:\n{}  Remove the first Occurrence of an item matching a Value from a Dictionary This example will attempt to remove the first occurrence of an item matching the value 1 from {\"Key1\" : 1, \"Key2\" : 1}.\nProperties    Property Value Notes     Dictionary ($)Dictionary, with value {\"Key1\" : 1, \"Key2\" : 1} ($)Dictionary is a variable of type IDictionary\u003cString, Int32\u003e   Value ($)Value, with value 1 ($)Value is a variable of type Int32   Occurrence ($)Occurrence, with value 1 ($)Occurrence is a variable of type Int32    Result An Occurrence of 1 means remove the first occurrence; 2 means second etc.\nAttempting to remove the first occurrence of an item matching the value 1 from {\"Key1\" : 1, \"Key2\" : 1} results in the variable ($)Dictionary being updated to the following:\n{\"Key2\" : 1}  Remove the last Occurrence of an item matching a Value from a Dictionary This example will attempt to remove the last occurrence of an item matching the value 1 from {\"Key1\" : 1, \"Key2\" : 1}.\nProperties    Property Value Notes     Dictionary ($)Dictionary, with value {\"Key1\" : 1, \"Key2\" : 1} ($)Dictionary is a variable of type IDictionary\u003cString, Int32\u003e   Value ($)Value, with value 1 ($)Value is a variable of type Int32   Occurrence ($)Occurrence, with value -1 ($)Occurrence is a variable of type Int32    Result An Occurrence of -1, means remove the last occurrence; -2 means second last etc.\nAttempting to remove the last occurrence of an item matching the value 1 from {\"Key1\" : 1, \"Key2\" : 1} results in the variable ($)Dictionary being updated to the following:\n{\"Key1\" : 1}  Properties Dictionary The Dictionary to remove the specified Occurrence of matching item from.\nItems are considered matching if they have the specified Value.\nDictionary can be any IDictionary\u003cTKey, TItem\u003e, where TKey represents the type of keys used to lookup items in the Dictionary, and TItem represents the type of items in the Dictionary.\n         Data Type IDictionary\u003cTKey, TItem\u003e   Property Type InputOutput   Default Value ($)Dictionary with value {}    Value The Value the item to remove must match.\nFor information and examples of how it is determined whether an item matches a specified value, please see Object Equality.\n         Data Type TItem   Property Type Input   Default Value ($)Value with value null    Occurrence The Occurrence of matching item to remove from the Dictionary.\nItems are considered matching if they have the specified Value.\nUnlike lists, dictionaries do not have a defined order. This means the nth occurrence is determined by the underlying Microsoft .Net implementation; this is not published and could change if the algorithm were to change.\nFor information about supported values for the Occurrence property and examples of how it can be used, please see Occurrences.\n         Data Type Int32   Property Type Input   Default Value ($)Occurrence with value 1    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     CannotModifyReadOnlyDictionaryException Thrown when Dictionary is read-only.   InvalidPropertyValueException Thrown when Value is null and Dictionary only accepts non-nullable value types.   PropertyNullException Thrown when Dictionary is null.    Remarks Item Equality For information and examples of how it is determined whether an item matches a specified value, please see Object Equality.\nOccurrences Unlike lists, dictionaries do not have a defined order. This means the nth occurrence is determined by the underlying Microsoft .Net implementation; this is not published and could change if the algorithm were to change.\nFor information about supported values for the Occurrence property and examples of how it can be used, please see Occurrences.\nEmpty Dictionary If Dictionary is empty (i.e. {}) there is nothing to remove, so no operation is performed.\nNo items matching Value, or Occurrence is not present If Dictionary does not contain items matching the specified Value or the specified Occurrence is not present, there is nothing to remove, so no operation is performed.\nDefining dictionaries using literal syntax For information about how to define dictionaries using literal syntax, see Dictionary Literals.\nDefining dictionaries using expression syntax For information about how to define dictionaries using expression syntax, see Dictionary Expressions.\nDictionaries containing items with same data types vs different data types For information about the different types of dictionaries, including those that can contain only the same type of item, and those that can contain different types of item, see Dictionaries.\n","categories":"","description":"Removes the specified occurrence of an item matching a value from a Dictionary.","excerpt":"Removes the specified occurrence of an item matching a value from a Dictionary.","ref":"/docs/reference/blocks/dictionaries/remove-item/remove-item-with-value-block-3/","tags":"","title":"Remove Item With Value"},{"body":"\r\rRemove Item With Value (Cortex.Blocks.Lists.RemoveItem.RemoveItemWithValueBlock`2)\nDescription Removes the specified Occurrence of an item matching a Value from a List.\nExamples Remove the first Occurrence of an item matching a Value from an empty List This example will attempt to remove the first occurrence of an item matching the value 1 from [].\nProperties    Property Value Notes     List ($)List, with value [] ($)List is a variable of type IList\u003cdynamic\u003e   Value ($)Value, with value 1 ($)Value is a variable of type Int32   Occurrence ($)Occurrence, with value 1 ($)Occurrence is a variable of type Int32    Result Attempting to remove the first occurrence of an item matching the value 1 from [] results in no operation, as there is nothing to remove. Therefore, the variable ($)List remains:\n[]  Remove the first Occurrence of an item matching a Value from a List This example will attempt to remove the first occurrence of an item matching the value 1 from [1, 2, 3, 3, 2, 1].\nProperties    Property Value Notes     List ($)List, with value [1, 2, 3, 3, 2, 1] ($)List is a variable of type IList\u003cInt32\u003e   Value ($)Value, with value 1 ($)Value is a variable of type Int32   Occurrence ($)Occurrence, with value 1 ($)Occurrence is a variable of type Int32    Result An Occurrence of 1 means remove the first occurrence; 2 means second etc.\nAttempting to remove the first occurrence of an item matching the value 1 from [1, 2, 3, 3, 2, 1] results in the variable ($)List being updated to the following:\n[2, 3, 3, 2, 1]  Remove the last Occurrence of an item matching a Value from a List This example will attempt to remove the last occurrence of an item matching the value 1 from [1, 2, 3, 3, 2, 1].\nProperties    Property Value Notes     List ($)List, with value [1, 2, 3, 3, 2, 1] ($)List is a variable of type IList\u003cInt32\u003e   Value ($)Value, with value 1 ($)Value is a variable of type Int32   Occurrence ($)Occurrence, with value -1 ($)Occurrence is a variable of type Int32    Result An Occurrence of -1, means remove the last occurrence; -2 means second last etc.\nAttempting to remove the last occurrence of an item matching the value 1 from [1, 2, 3, 3, 2, 1] results in the variable ($)List being updated to the following:\n[1, 2, 3, 3, 2]  Properties List The List to remove the specified Occurrence of matching item from.\nItems are considered matching if they have the specified Value.\nList can be any IList\u003cTItem\u003e, where TItem represents the type of items that can be removed from the List.\n         Data Type IList\u003cTItem\u003e   Property Type InputOutput   Default Value ($)List with value []    Value The Value the item to remove must match.\nFor information and examples of how it is determined whether an item matches a specified value, please see Object Equality.\n         Data Type TItem   Property Type Input   Default Value ($)Value with value null    Occurrence The Occurrence of matching item to remove from the List.\nItems are considered matching if they have the specified Value.\nFor information about supported values for the Occurrence property and examples of how it can be used, please see Occurrences.\n         Data Type Int32   Property Type Input   Default Value ($)Occurrence with value 1    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     CannotModifyReadOnlyListException Thrown when List is read-only.   InvalidPropertyValueException Thrown when Value is null and List only accepts non-nullable value types.   PropertyNullException Thrown when List is null.    Remarks Item Equality For information and examples of how it is determined whether an item matches a specified value, please see Object Equality.\nOccurrences For information about supported values for the Occurrence property and examples of how it can be used, please see Occurrences.\nEmpty List If List is empty (i.e. []) there is nothing to remove, so no operation is performed.\nNo items matching Value, or Occurrence is not present If List does not contain items matching the specified Value or the specified Occurrence is not present, there is nothing to remove, so no operation is performed.\nDefining lists using literal syntax For information about how to define lists using literal syntax, see List Literals.\nDefining lists using expression syntax For information about how to define lists using expression syntax, see List Expressions.\nLists containing items of a single data type vs multiple data types For information about the different types of lists, including those that can contain only a single type of item, and those that can contain multiple types of item, see Lists.\n","categories":"","description":"Removes the specified occurrence of an item matching a value from a List.","excerpt":"Removes the specified occurrence of an item matching a value from a List.","ref":"/docs/reference/blocks/lists/remove-item/remove-item-with-value-block-2/","tags":"","title":"Remove Item With Value"},{"body":"","categories":"","description":"Remove an item or multiple items from a dictionary.","excerpt":"Remove an item or multiple items from a dictionary.","ref":"/docs/reference/blocks/dictionaries/remove-item/","tags":"","title":"Remove Item(s)"},{"body":"","categories":"","description":"Remove an item or multiple items from a list.","excerpt":"Remove an item or multiple items from a list.","ref":"/docs/reference/blocks/lists/remove-item/","tags":"","title":"Remove Item(s)"},{"body":"\r\rRemove Items At Beginning (Cortex.Blocks.Lists.RemoveItem.RemoveItemsAtBeginningBlock`2)\nDescription Removes the specified Count of items from the beginning of a List.\nExamples Remove Count of items from the beginning of a List This example will remove 2 items from the beginning of [\"Some Text\", 1, \"Some More Text\", 2].\nProperties    Property Value Notes     List ($)List, with value [\"Some Text\", 1, \"Some More Text\", 2] ($)List is a variable of type IList\u003cdynamic\u003e   Count ($)Count, with value 2 ($)Count is a variable of type Int32    Result Removing 2 items from the beginning of [\"Some Text\", 1, \"Some More Text\", 2] results in the variable ($)List being updated to the following:\n[\"Some More Text\", 2]  Properties List The List where the items are removed from.\nList can be any IList\u003cTItem\u003e, where TItem represents the type of items that can be removed from the List.\n         Data Type IList\u003cTItem\u003e   Property Type InputOutput   Default Value ($)List with value []    Count The Count of items to remove.\n         Data Type Int32   Property Type Input   Default Value ($)Count with value 0    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     CannotModifyReadOnlyListException Thrown when List is read-only.   PropertyNullException Thrown when List is null.   PropertyValueOutOfRangeException Thrown when Count is greater than the count of items in the List - 1.    Remarks Negative Count If Count is negative all items in the List are removed.\nZero Count If Count is 0 there is nothing to remove, so no operation is performed.\nDefining lists using literal syntax For information about how to define lists using literal syntax, see List Literals.\nDefining lists using expression syntax For information about how to define lists using expression syntax, see List Expressions.\nLists containing items of a single data type vs multiple data types For information about the different types of lists, including those that can contain only a single type of item, and those that can contain multiple types of item, see Lists.\n","categories":"","description":"Removes a count of items from the beginning of a List.","excerpt":"Removes a count of items from the beginning of a List.","ref":"/docs/reference/blocks/lists/remove-item/remove-items-at-beginning-block-2/","tags":"","title":"Remove Items At Beginning"},{"body":"\r\rRemove Items At End (Cortex.Blocks.Lists.RemoveItem.RemoveItemsAtEndBlock`2)\nDescription Removes the specified Count of items from the end of a List.\nExamples Remove Count of items from the end of a List This example will remove 2 items from the end of [\"Some Text\", 1, \"Some More Text\", 2].\nProperties    Property Value Notes     List ($)List, with value [\"Some Text\", 1, \"Some More Text\", 2] ($)List is a variable of type IList\u003cdynamic\u003e   Count ($)Count, with value 2 ($)Count is a variable of type Int32    Result Removing 2 items from the end of [\"Some Text\", 1, \"Some More Text\", 2] results in the variable ($)List being updated to the following:\n[\"Some Text\", 1]  Properties List The List where the items are removed from.\nList can be any IList\u003cTItem\u003e, where TItem represents the type of items that can be removed from the List.\n         Data Type IList\u003cTItem\u003e   Property Type InputOutput   Default Value ($)List with value []    Count The Count of items to remove.\n         Data Type Int32   Property Type Input   Default Value ($)Count with value 0    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     CannotModifyReadOnlyListException Thrown when List is read-only.   PropertyNullException Thrown when List is null.   PropertyValueOutOfRangeException Thrown when Count is greater than the count of items in the List - 1.    Remarks Negative Count If Count is negative all items in the List are removed.\nZero Count If Count is 0 there is nothing to remove, so no operation is performed.\nDefining lists using literal syntax For information about how to define lists using literal syntax, see List Literals.\nDefining lists using expression syntax For information about how to define lists using expression syntax, see List Expressions.\nLists containing items of a single data type vs multiple data types For information about the different types of lists, including those that can contain only a single type of item, and those that can contain multiple types of item, see Lists.\n","categories":"","description":"Removes a count of items from the end of a List.","excerpt":"Removes a count of items from the end of a List.","ref":"/docs/reference/blocks/lists/remove-item/remove-items-at-end-block-2/","tags":"","title":"Remove Items At End"},{"body":"\r\rRemove Items At Index (Cortex.Blocks.Lists.RemoveItem.RemoveItemsAtIndexBlock`2)\nDescription Removes the specified Count of items starting at the given Index of a List.\nExamples Remove Count of items at the first Index (i.e. 0) of a List This example will remove 2 items at index 0 of [\"Some Text\", 1, \"Some More Text\", 2].\nProperties    Property Value Notes     List ($)List, with value [\"Some Text\", 1, \"Some More Text\", 2] ($)List is a variable of type IList\u003cdynamic\u003e   Index ($)Index, with value 0 ($)Index is a variable of type Int32   Count ($)Count, with value 2 ($)Count is a variable of type Int32    Result Removing 2 items at index 0 of [\"Some Text\", 1, \"Some More Text\", 2] results in the variable ($)List being updated to the following:\n[\"Some More Text\", 2]  Properties List The List where the items are removed from.\nList can be any IList\u003cTItem\u003e, where TItem represents the type of items that can be removed from the List.\n         Data Type IList\u003cTItem\u003e   Property Type InputOutput   Default Value ($)List with value []    Index The Index to remove the Count of items at. This is an inclusive index, which means the item at the specified index will be included.\nValid values are between and including 0 and the total count of items in the List - 1.\nFor information about what an index is, please see Indexes.\n         Data Type Int32   Property Type Input   Default Value ($)Index with value 0    Count The Count of items to remove.\n         Data Type Int32   Property Type Input   Default Value ($)Count with value 0    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     CannotModifyReadOnlyListException Thrown when List is read-only.   PropertyNullException Thrown when List is null.   PropertyValueOutOfRangeException Thrown when Index is less than 0 or greater than the count of items in List - 1.    Thrown when Index + Count is greater than the count of items in the List - 1.    Remarks Index is inclusive The Index is an inclusive index, which means the item at the index will be included in the removed items.\nNegative Count If Count is negative all items after and including the specified Index in the List are removed.\nZero Count If Count is 0 there is nothing to remove, so no operation is performed.\nDefining lists using literal syntax For information about how to define lists using literal syntax, see List Literals.\nDefining lists using expression syntax For information about how to define lists using expression syntax, see List Expressions.\nLists containing items of a single data type vs multiple data types For information about the different types of lists, including those that can contain only a single type of item, and those that can contain multiple types of item, see Lists.\n","categories":"","description":"Removes a count of items starting at the specified index of a List.","excerpt":"Removes a count of items starting at the specified index of a List.","ref":"/docs/reference/blocks/lists/remove-item/remove-items-at-index-block-2/","tags":"","title":"Remove Items At Index"},{"body":"\r\rRemove Items At Indexes (Cortex.Blocks.Lists.RemoveItem.RemoveItemsAtIndexesBlock`2)\nDescription Removes the items at each of the specified Indexes of a List.\nExamples Remove items at the first and third Indexes (i.e. [0, 2]) of a List This example will remove items at indexes 0 and 2 of [\"Some Text\", 1, \"Some More Text\", 2].\nProperties    Property Value Notes     List ($)List, with value [\"Some Text\", 1, \"Some More Text\", 2] ($)List is a variable of type IList\u003cdynamic\u003e   Indexes ($)Indexes, with value [0, 2] ($)Indexes is a variable of type IEnumerable\u003cInt32\u003e    Result Removing items at indexes 0 and 2 of [\"Some Text\", 1, \"Some More Text\", 2] results in the variable ($)List being updated to the following:\n[1, 2]  Properties List The List where the items are removed from.\nList can be any IList\u003cTItem\u003e, where TItem represents the type of items that can be removed from the List.\n         Data Type IList\u003cTItem\u003e   Property Type InputOutput   Default Value ($)List with value []    Indexes The Indexes of the items to remove.\nValid values are between and including 0 and the total count of items in the List - 1.\nFor information about what an index is, please see Indexes.\n         Data Type IEnumerable\u003cInt32\u003e   Property Type Input   Default Value ($)Indexes with value []    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     CannotModifyReadOnlyListException Thrown when List is read-only.   DuplicateValueException Thrown when Indexes contains duplicate values.   PropertyNullException Thrown when List or Indexes is null.   PropertyValueOutOfRangeException Thrown when Indexes contains no values.    Thrown when any index in Indexes is less than 0 or greater than the count of items in List - 1.    Remarks Defining lists using literal syntax For information about how to define lists using literal syntax, see List Literals.\nDefining lists using expression syntax For information about how to define lists using expression syntax, see List Expressions.\nLists containing items of a single data type vs multiple data types For information about the different types of lists, including those that can contain only a single type of item, and those that can contain multiple types of item, see Lists.\n","categories":"","description":"Removes the items at each of the specified indexes of a List.","excerpt":"Removes the items at each of the specified indexes of a List.","ref":"/docs/reference/blocks/lists/remove-item/remove-items-at-indexes-block-2/","tags":"","title":"Remove Items At Indexes"},{"body":"\r\rRemove Items With Key (Cortex.Blocks.Dictionaries.RemoveItem.RemoveItemsWithKeyBlock`3)\nDescription Removes all items with the given Key from a Dictionary.\nExamples Remove all items with a Key from an empty Dictionary This example will attempt to remove all items with the key \"Key1\" from {}.\nProperties    Property Value Notes     Dictionary ($)Dictionary, with value {} ($)Dictionary is a variable of type IDictionary\u003cdynamic, dynamic\u003e   Key ($)Key, with value \"Key1\" ($)Key is a variable of type String    Result Attempting to remove all items with the key \"Key1\" from {} results in no operation, as there is nothing to remove. Therefore, the variable ($)Dictionary remains:\n{}  Remove all items with a Key from a Dictionary Typically keys are simple data types such as String, Int32, Boolean, and for these a dictionary cannot the same key value more than once. This is due to how the data type’s object equality is implemented (two items are considered equal if they have the same value rather than being the same object reference).\nHowever, other data types such as IList\u003cInt32\u003e can also be used as keys. For these data types, object equality only considers two items equal if they are the same reference; it does not care about whether they have the same value. Therefore, it is possible to have the same key value more than once, and as a result you should be able to remove all items with that key.\nThis example will illustrate this, by attempting to remove all items with the key [1] from {[1] : 1, [2] : 2, [3] : 3, [3] : 3, [2] : 2, [1] : 1}.\nProperties    Property Value Notes     Dictionary ($)Dictionary, with value {[1] : 1, [2] : 2, [3] : 3, [3] : 3, [2] : 2, [1] : 1} ($)Dictionary is a variable of type IDictionary\u003cIList\u003cInt32\u003e, Int32\u003e   Key ($)Key, with value [1] ($)Key is a variable of type IList\u003cInt32\u003e    Result Attempting to remove all items with the key [1] from {[1] : 1, [2] : 2, [3] : 3, [3] : 3, [2] : 2, [1] : 1} results in the variable ($)Dictionary being updated to the following:\n{[2] : 2, [3] : 3, [3] : 3, [2] : 2}  Properties Dictionary The Dictionary to remove all items with the given Key from.\nDictionary can be any IDictionary\u003cTKey, TItem\u003e, where TKey represents the type of keys used to lookup items in the Dictionary, and TItem represents the type of items in the Dictionary.\n         Data Type IDictionary\u003cTKey, TItem\u003e   Property Type InputOutput   Default Value ($)Dictionary with value {}    Key The Key the items to remove must have.\nFor information and examples of how it is determined whether an item has a specified key, please see Object Equality.\nFor information about what a key is, please see Keys.\n         Data Type TKey   Property Type Input   Default Value ($)Key with value null    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     CannotModifyReadOnlyDictionaryException Thrown when Dictionary is read-only.   PropertyNullException Thrown when Dictionary or Key are null.    Remarks Key Equality For information and examples of how it is determined whether a key is already present, please see Object Equality.\nEmpty Dictionary If Dictionary is empty (i.e. {}) there is nothing to remove, so no operation is performed.\nNo items with given Key If Dictionary does not contain items with the given Key there is nothing to remove, so no operation is performed.\nDefining dictionaries using literal syntax For information about how to define dictionaries using literal syntax, see Dictionary Literals.\nDefining dictionaries using expression syntax For information about how to define dictionaries using expression syntax, see Dictionary Expressions.\nDictionaries containing items with same data types vs different data types For information about the different types of dictionaries, including those that can contain only the same type of item, and those that can contain different types of item, see Dictionaries.\n","categories":"","description":"Removes all items with the given key from a Dictionary.","excerpt":"Removes all items with the given key from a Dictionary.","ref":"/docs/reference/blocks/dictionaries/remove-item/remove-items-with-key-block-3/","tags":"","title":"Remove Items With Key"},{"body":"\r\rRemove Items With Keys (Cortex.Blocks.Dictionaries.RemoveItem.RemoveItemsWithKeysBlock`3)\nDescription Removes all items with any of the given Keys from a Dictionary.\nExamples Remove all items with any of the given Keys from an empty Dictionary This example will attempt to remove all items with any of the given keys in [\"Key1\", \"Key2\"] from {}.\nProperties    Property Value Notes     Dictionary ($)Dictionary, with value {} ($)Dictionary is a variable of type IDictionary\u003cdynamic, dynamic\u003e   Keys ($)Keys, with value [\"Key1\", \"Key2\"] ($)Keys is a variable of type IDictionary\u003cString\u003e    Result Attempting to remove all items with any of the given keys in [\"Key1\", \"Key2\"] from {} results in no operation, as there is nothing to remove. Therefore, the variable ($)Dictionary remains:\n{}  Remove all items with any of the given Keys from a Dictionary This example will attempt to remove all items with any of the given keys in [\"Key1\", \"Key2\"] from {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1}.\nProperties    Property Value Notes     Dictionary ($)Dictionary, with value {} ($)Dictionary is a variable of type IDictionary\u003cString, Int32\u003e   Keys ($)Keys, with value [\"Key1\", \"Key2\"] ($)Keys is a variable of type IDictionary\u003cString\u003e    Result Attempting to remove all items with any of the given keys in [\"Key1\", \"Key2\"] from {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} results in the variable ($)Dictionary being updated to the following:\n{\"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1}  Properties Dictionary The Dictionary to remove all items with any of the given Keys from.\nDictionary can be any IDictionary\u003cTKey, TItem\u003e, where TKey represents the type of keys used to lookup items in the Dictionary, and TItem represents the type of items in the Dictionary.\n         Data Type IDictionary\u003cTKey, TItem\u003e   Property Type InputOutput   Default Value ($)Dictionary with value {}    Keys The Keys the items to remove must have one of.\nFor information and examples of how it is determined whether an item has a specified key, please see Object Equality.\nFor information about what a key is, please see Keys.\n         Data Type IEnumerable\u003cTKey\u003e   Property Type Input   Default Value ($)Keys with value []    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     ArgumentNullException Thrown when any key in Keys is null   CannotModifyReadOnlyDictionaryException Thrown when Dictionary is read-only.   PropertyNullException Thrown when Dictionary or Keys are null.    Remarks Key Equality For information and examples of how it is determined whether a key is already present, please see Object Equality.\nEmpty Dictionary If Dictionary is empty (i.e. {}) there is nothing to remove, so no operation is performed.\nEmpty Keys If Keys is empty (i.e. []) there are no keys to match, therefore nothing can be removed and no operation is performed.\nNo items with one of the given Keys If Dictionary does not contain items with one of the given Keys, there is nothing to remove for that key.\nNo items with any of the given Keys If Dictionary does not contain items with any of the given Keys there is nothing to remove, so no operation is performed.\nDefining dictionaries using literal syntax For information about how to define dictionaries using literal syntax, see Dictionary Literals.\nDefining dictionaries using expression syntax For information about how to define dictionaries using expression syntax, see Dictionary Expressions.\nDictionaries containing items with same data types vs different data types For information about the different types of dictionaries, including those that can contain only the same type of item, and those that can contain different types of item, see Dictionaries.\n","categories":"","description":"Removes all items with any of the given keys from a Dictionary.","excerpt":"Removes all items with any of the given keys from a Dictionary.","ref":"/docs/reference/blocks/dictionaries/remove-item/remove-items-with-keys-block-3/","tags":"","title":"Remove Items With Keys"},{"body":"\r\rRemove Items With Value (Cortex.Blocks.Dictionaries.RemoveItem.RemoveItemsWithValueBlock`3)\nDescription Removes all items matching a Value from a Dictionary.\nExamples Remove all items matching a Value from an empty Dictionary This example will attempt to remove all items matching the value 1 from {}.\nProperties    Property Value Notes     Dictionary ($)Dictionary, with value {} ($)Dictionary is a variable of type IDictionary\u003cdynamic, dynamic\u003e   Value ($)Value, with value 1 ($)Value is a variable of type Int32    Result Attempting to remove all items matching the value 1 from {} results in no operation, as there is nothing to remove. Therefore, the variable ($)Dictionary remains:\n{}  Remove all items matching a Value from a Dictionary This example will attempt to remove all items matching the value 1 from {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1}.\nProperties    Property Value Notes     Dictionary ($)Dictionary, with value {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} ($)Dictionary is a variable of type IDictionary\u003cString, Int32\u003e   Value ($)Value, with value 1 ($)Value is a variable of type Int32    Result Attempting to remove all items matching the value 1 from {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} results in the variable ($)Dictionary being updated to the following:\n{\"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2}  Properties Dictionary The Dictionary to remove all matching items from.\nItems are considered matching if they have the specified Value.\nDictionary can be any IDictionary\u003cTKey, TItem\u003e, where TKey represents the type of keys used to lookup items in the Dictionary, and TItem represents the type of items in the Dictionary.\n         Data Type IDictionary\u003cTKey, TItem\u003e   Property Type InputOutput   Default Value ($)Dictionary with value {}    Value The Value the items to remove must match.\nFor information and examples of how it is determined whether an item matches a specified value, please see Object Equality.\n         Data Type TItem   Property Type Input   Default Value ($)Value with value null    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     CannotModifyReadOnlyDictionaryException Thrown when Dictionary is read-only.   InvalidPropertyValueException Thrown when Value is null and Dictionary only accepts non-nullable value types.   PropertyNullException Thrown when Dictionary is null.    Remarks Item Equality For information and examples of how it is determined whether an item matches a specified value, please see Object Equality.\nEmpty Dictionary If Dictionary is empty (i.e. {}) there is nothing to remove, so no operation is performed.\nNo items matching Value If Dictionary does not contain items matching the specified Value, there is nothing to remove, so no operation is performed.\nDefining dictionaries using literal syntax For information about how to define dictionaries using literal syntax, see Dictionary Literals.\nDefining dictionaries using expression syntax For information about how to define dictionaries using expression syntax, see Dictionary Expressions.\nDictionaries containing items with same data types vs different data types For information about the different types of dictionaries, including those that can contain only the same type of item, and those that can contain different types of item, see Dictionaries.\n","categories":"","description":"Removes all items matching a value from a Dictionary.","excerpt":"Removes all items matching a value from a Dictionary.","ref":"/docs/reference/blocks/dictionaries/remove-item/remove-items-with-value-block-3/","tags":"","title":"Remove Items With Value"},{"body":"\r\rRemove Items With Value (Cortex.Blocks.Lists.RemoveItem.RemoveItemsWithValueBlock`2)\nDescription Removes all items matching a Value from a List.\nExamples Remove all items matching a Value from an empty List This example will attempt to remove all items matching the value 1 from [].\nProperties    Property Value Notes     List ($)List, with value [] ($)List is a variable of type IList\u003cdynamic\u003e   Value ($)Value, with value 1 ($)Value is a variable of type Int32    Result Attempting to remove all items matching the value 1 from [] results in no operation, as there is nothing to remove. Therefore, the variable ($)List remains:\n[]  Remove all items matching a Value from a List This example will attempt to remove all items matching the value 1 from [1, 2, 3, 3, 2, 1].\nProperties    Property Value Notes     List ($)List, with value [1, 2, 3, 3, 2, 1] ($)List is a variable of type IList\u003cInt32\u003e   Value ($)Value, with value 1 ($)Value is a variable of type Int32    Result Attempting to remove all items matching the value 1 from [1, 2, 3, 3, 2, 1] results in the variable ($)List being updated to the following:\n[2, 3, 3, 2]  Properties List The List to remove all matching items from.\nItems are considered matching if they have the specified Value.\nList can be any IList\u003cTItem\u003e, where TItem represents the type of items that can be removed from the List.\n         Data Type IList\u003cTItem\u003e   Property Type InputOutput   Default Value ($)List with value []    Value The Value the items to remove must match.\nFor information and examples of how it is determined whether an item matches a specified value, please see Object Equality.\n         Data Type TItem   Property Type Input   Default Value ($)Value with value null    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     CannotModifyReadOnlyListException Thrown when List is read-only.   InvalidPropertyValueException Thrown when Value is null and List only accepts non-nullable value types.   PropertyNullException Thrown when List is null.    Remarks Item Equality For information and examples of how it is determined whether an item matches a specified value, please see Object Equality.\nEmpty List If List is empty (i.e. []) there is nothing to remove, so no operation is performed.\nNo items matching Value If List does not contain items matching the specified Value, there is nothing to remove, so no operation is performed.\nDefining lists using literal syntax For information about how to define lists using literal syntax, see List Literals.\nDefining lists using expression syntax For information about how to define lists using expression syntax, see List Expressions.\nLists containing items of a single data type vs multiple data types For information about the different types of lists, including those that can contain only a single type of item, and those that can contain multiple types of item, see Lists.\n","categories":"","description":"Removes all items matching a value from a List.","excerpt":"Removes all items matching a value from a List.","ref":"/docs/reference/blocks/lists/remove-item/remove-items-with-value-block-2/","tags":"","title":"Remove Items With Value"},{"body":"\r\rRemove Items With Values (Cortex.Blocks.Dictionaries.RemoveItem.RemoveItemsWithValuesBlock`3)\nDescription Removes all items matching one of the specified Values from a Dictionary.\nExamples Remove all items matching one of the specified Values from an empty Dictionary This example will attempt to remove all items matching one of the values [1, 2] from {}.\nProperties    Property Value Notes     Dictionary ($)Dictionary, with value {} ($)Dictionary is a variable of type IDictionary\u003cdynamic, dynamic\u003e   Values ($)Values, with value [1, 2] ($)Values is a variable of type IEnumerable\u003cInt32\u003e    Result Attempting to remove all items matching one of the values [1, 2] from {} results in no operation, as there is nothing to remove. Therefore, the variable ($)Dictionary remains:\n{}  Remove all items matching one of the specified Values from a Dictionary This example will attempt to remove all items matching one of the values [1, 2] from {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1}.\nProperties    Property Value Notes     Dictionary ($)Dictionary, with value {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} ($)Dictionary is a variable of type IDictionary\u003cString, Int32\u003e   Values ($)Values, with value [1, 2] ($)Values is a variable of type IEnumerable\u003cInt32\u003e    Result Attempting to remove all items matching one of the values [1, 2] from {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} results in the variable ($)Dictionary being updated to the following:\n{\"Key3\" : 3, \"Key4\" : 3}  Properties Dictionary The Dictionary to remove all matching items from.\nItems are considered matching if they have one of the specified Values.\nDictionary can be any IDictionary\u003cTKey, TItem\u003e, where TKey represents the type of keys used to lookup items in the Dictionary, and TItem represents the type of items in the Dictionary.\n         Data Type IDictionary\u003cTKey, TItem\u003e   Property Type InputOutput   Default Value ($)Dictionary with value {}    Values The Values the items to remove must match one of.\nFor information and examples of how it is determined whether an item matches a specified value, please see Object Equality.\n         Data Type IEnumerable\u003cTItem\u003e   Property Type Input   Default Value ($)Values with value []    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     CannotModifyReadOnlyDictionaryException Thrown when Dictionary is read-only.   PropertyNullException Thrown when Dictionary or Values is null.    Remarks Item Equality For information and examples of how it is determined whether an item matches a specified value, please see Object Equality.\nEmpty Dictionary If Dictionary is empty (i.e. {}) there is nothing to remove, so no operation is performed.\nEmpty Values If Values is empty (i.e. []) there are no values to match, therefore nothing can be removed and no operation is performed.\nNo items matching a specified value in Values If Dictionary does not contain items matching one of the specified Values, there is nothing to remove for that value.\nNo items matching Values If Dictionary does not contain items matching any of the specified Values, there is nothing to remove, so no operation is performed.\nDefining dictionaries using literal syntax For information about how to define dictionaries using literal syntax, see Dictionary Literals.\nDefining dictionaries using expression syntax For information about how to define dictionaries using expression syntax, see Dictionary Expressions.\nDictionaries containing items with same data types vs different data types For information about the different types of dictionaries, including those that can contain only the same type of item, and those that can contain different types of item, see Dictionaries.\n","categories":"","description":"Removes all items matching one of the specified values from a Dictionary.","excerpt":"Removes all items matching one of the specified values from a Dictionary.","ref":"/docs/reference/blocks/dictionaries/remove-item/remove-items-with-values-block-3/","tags":"","title":"Remove Items With Values"},{"body":"\r\rRemove Items With Values (Cortex.Blocks.Lists.RemoveItem.RemoveItemsWithValuesBlock`2)\nDescription Removes all items matching one of the specified Values from a List.\nExamples Remove all items matching one of the specified Values from an empty List This example will attempt to remove all items matching one of the values [1, 2] from [].\nProperties    Property Value Notes     List ($)List, with value [] ($)List is a variable of type IList\u003cdynamic\u003e   Values ($)Values, with value [1, 2] ($)Values is a variable of type IEnumerable\u003cInt32\u003e    Result Attempting to remove all items matching one of the values [1, 2] from [] results in no operation, as there is nothing to remove. Therefore, the variable ($)List remains:\n[]  Remove all items matching one of the specified Values from a List This example will attempt to remove all items matching one of the values [1, 2] from [1, 2, 3, 3, 2, 1].\nProperties    Property Value Notes     List ($)List, with value [1, 2, 3, 3, 2, 1] ($)List is a variable of type IList\u003cInt32\u003e   Values ($)Values, with value [1, 2] ($)Values is a variable of type IEnumerable\u003cInt32\u003e    Result Attempting to remove all items matching one of the values [1, 2] from [1, 2, 3, 3, 2, 1] results in the variable ($)List being updated to the following:\n[3, 3]  Properties List The List to remove all matching items from.\nItems are considered matching if they have one of the specified Values.\nList can be any IList\u003cTItem\u003e, where TItem represents the type of items that can be removed from the List.\n         Data Type IList\u003cTItem\u003e   Property Type InputOutput   Default Value ($)List with value []    Values The Values the items to remove must match one of.\nFor information and examples of how it is determined whether an item matches a specified value, please see Object Equality.\n         Data Type IEnumerable\u003cTItem\u003e   Property Type Input   Default Value ($)Values with value []    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     CannotModifyReadOnlyListException Thrown when List is read-only.   PropertyNullException Thrown when List or Values is null.    Remarks Item Equality For information and examples of how it is determined whether an item matches a specified value, please see Object Equality.\nEmpty List If List is empty (i.e. []) there is nothing to remove, so no operation is performed.\nEmpty Values If Values is empty (i.e. []) there are no values to match, therefore nothing can be removed and no operation is performed.\nNo items matching a specified value in Values If List does not contain items matching one of the specified Values, there is nothing to remove for that value.\nNo items matching Values If List does not contain items matching any of the specified Values, there is nothing to remove, so no operation is performed.\nDefining lists using literal syntax For information about how to define lists using literal syntax, see List Literals.\nDefining lists using expression syntax For information about how to define lists using expression syntax, see List Expressions.\nLists containing items of a single data type vs multiple data types For information about the different types of lists, including those that can contain only a single type of item, and those that can contain multiple types of item, see Lists.\n","categories":"","description":"Removes all items matching one of the specified values from a List.","excerpt":"Removes all items matching one of the specified values from a List.","ref":"/docs/reference/blocks/lists/remove-item/remove-items-with-values-block-2/","tags":"","title":"Remove Items With Values"},{"body":"","categories":"","description":"Remove a length of text from a given text.","excerpt":"Remove a length of text from a given text.","ref":"/docs/reference/blocks/text/remove-text/","tags":"","title":"Remove Text"},{"body":"\r\rRemove Text At Beginning (Cortex.Blocks.Text.RemoveText.RemoveTextAtBeginningBlock)\nDescription Removes a Length of text from the beginning of a given Text.\nExamples Remove a Length of text from the beginning of a given Text This example will remove the first 3 characters from the beginning of \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".\nProperties    Property Value Notes     Text ($)Text, with value \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" ($)Text is a variable of type String   Length ($)Length, with value 3 ($)Length is a variable of type Int32    Result Removing the first 3 characters from the beginning of \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" results in the variable ($)Text being updated to the following:\n\"DEFGHIJKLMNOPQRSTUVWXYZ\"  Properties Text The Text to remove the Length of text from.\n         Data Type String   Property Type InputOutput   Default Value ($)Text with value \"\"    Length The Length of text to remove.\n         Data Type Int32   Property Type Input   Default Value ($)Length with value -1    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     PropertyValueOutOfRangeException Thrown when Text is null or empty (i.e. \"\").    Thrown when Length is greater than the length of Text.    Remarks Negative Length If Length is negative, all text will be removed and the variable specified in the Text property will be set to empty (i.e. \"\").\nZero Length If Length is 0, no text will be removed and the variable specified in the Text property will remain unchanged.\nImmutable String data type The String data type used to represent Text is immutable, which means it is read-only and cannot be changed once created.\nTo overcome this, this block creates a new String which has the Length of text removed at the beginning and re-assigns it to the variable specified in the Text property.\n","categories":"","description":"Removes a length of text from the beginning of a given text.","excerpt":"Removes a length of text from the beginning of a given text.","ref":"/docs/reference/blocks/text/remove-text/remove-text-at-beginning-block/","tags":"","title":"Remove Text At Beginning"},{"body":"\r\rRemove Text At End (Cortex.Blocks.Text.RemoveText.RemoveTextAtEndBlock)\nDescription Removes a Length of text from the end of a given Text.\nExamples Remove a Length of text from the end of a given Text This example will remove the last 3 characters from the end of \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".\nProperties    Property Value Notes     Text ($)Text, with value \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" ($)Text is a variable of type String   Length ($)Length, with value 3 ($)Length is a variable of type Int32    Result Removing the last 3 characters from the end of \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" results in the variable ($)Text being updated to the following:\n\"ABCDEFGHIJKLMNOPQRSTUVW\"  Properties Text The Text to remove the Length of text from.\n         Data Type String   Property Type InputOutput   Default Value ($)Text with value \"\"    Length The Length of text to remove.\n         Data Type Int32   Property Type Input   Default Value ($)Length with value -1    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     PropertyValueOutOfRangeException Thrown when Text is null or empty (i.e. \"\").    Thrown when Length is greater than the length of Text.    Remarks Negative Length If Length is negative, all text will be removed and the variable specified in the Text property will be set to empty (i.e. \"\").\nZero Length If Length is 0, no text will be removed and the variable specified in the Text property will remain unchanged.\nImmutable String data type The String data type used to represent Text is immutable, which means it is read-only and cannot be changed once created.\nTo overcome this, this block creates a new String which has the Length of text removed at the end and re-assigns it to the variable specified in the Text property.\n","categories":"","description":"Removes a length of text from the end of a given text.","excerpt":"Removes a length of text from the end of a given text.","ref":"/docs/reference/blocks/text/remove-text/remove-text-at-end-block/","tags":"","title":"Remove Text At End"},{"body":"\r\rRemove Text At Index (Cortex.Blocks.Text.RemoveText.RemoveTextAtIndexBlock)\nDescription Removes a Length of text at the specified Index of a given Text.\nExamples Remove a Length of text at the specified Index of a given Text This example will remove 3 characters at index 3 of \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".\nProperties    Property Value Notes     Text ($)Text, with value \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" ($)Text is a variable of type String   Index ($)Index, with value 3 ($)Index is a variable of type Int32   Length ($)Length, with value 3 ($)Length is a variable of type Int32    Result \"D\" is at index 3 in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\". Therefore, removing 3 characters at (and including) index 3 results in the variable ($)Text being updated to the following:\n\"ABCGHIJKLMNOPQRSTUVWXYZ\"  Properties Text The Text to remove the Length of text from.\n         Data Type String   Property Type InputOutput   Default Value ($)Text with value \"\"    Index The Index to remove the text from. This is an inclusive index, which means the character at the specified index will be included.\nFor information about what an index is, please see Indexes.\n         Data Type Int32   Property Type Input   Default Value ($)Index with value 0    Length The Length of text to remove.\n         Data Type Int32   Property Type Input   Default Value ($)Length with value -1    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     PropertyValueOutOfRangeException Thrown when Text is null or empty (i.e. \"\").    Thrown when Index is less than zero or greater than the length of Text - 1.    Thrown when Index + a positive Length is greater than the length of Text - 1.    Remarks Negative Length A negative Length can be used to remove all text at and after the Index of Text.\nZero Length If Length is 0, no text will be removed and the variable specified in the Text property will remain unchanged.\nIndex is inclusive The Index property is an inclusive index, which means the character at the index will be included in the removed text.\nImmutable String data type The String data type used to represent Text is immutable, which means it is read-only and cannot be changed once created.\nTo overcome this, this block creates a new String which has the Length of text removed at the specified Index and re-assigns it to the variable specified in the Text property.\n","categories":"","description":"Removes a length of text at the specified index of a given text.","excerpt":"Removes a length of text at the specified index of a given text.","ref":"/docs/reference/blocks/text/remove-text/remove-text-at-index-block/","tags":"","title":"Remove Text At Index"},{"body":"\r\rRemove Text Before Index (Cortex.Blocks.Text.RemoveText.RemoveTextBeforeIndexBlock)\nDescription Removes a Length of text before the specified Index of a given Text.\nExamples Remove a Length of text before the specified Index of a given Text This example will remove 3 characters before index 3 of \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".\nProperties    Property Value Notes     Text ($)Text, with value \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" ($)Text is a variable of type String   Index ($)Index, with value 3 ($)Index is a variable of type Int32   Length ($)Length, with value 3 ($)Length is a variable of type Int32    Result \"D\" is at index 3 in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\". Therefore, removing 3 characters before index 3 results in the variable ($)Text being updated to the following:\n\"DEFGHIJKLMNOPQRSTUVWXYZ\"  Properties Text The Text to remove the Length of text from.\n         Data Type String   Property Type InputOutput   Default Value ($)Text with value \"\"    Index The Index to remove the text before. This is an exclusive index, which means the character at the specified index won’t be included.\nFor information about what an index is, please see Indexes.\n         Data Type Int32   Property Type Input   Default Value ($)Index with value 0    Length The Length of text to remove.\n         Data Type Int32   Property Type Input   Default Value ($)Length with value -1    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     PropertyValueOutOfRangeException Thrown when Text is null or empty (i.e. \"\").    Thrown when Index is less than 1 or greater than the length of Text - 1.    Thrown when Index - a positive Length is less than 1.    Remarks Negative Length A negative Length can be used to remove all text before the Index of Text.\nZero Length If Length is 0, the variable specified in the Text property will be set to empty (i.e. \"\").\nIndex is exclusive The Index property is an exclusive index, which means the character at the index will not be included in the removed text.\nImmutable String data type The String data type used to represent Text is immutable, which means it is read-only and cannot be changed once created.\nTo overcome this, this block creates a new String which has the Length of text removed before the specified Index and re-assigns it to the variable specified in the Text property.\n","categories":"","description":"Removes a length of text before the specified index of a given text.","excerpt":"Removes a length of text before the specified index of a given text.","ref":"/docs/reference/blocks/text/remove-text/remove-text-before-index-block/","tags":"","title":"Remove Text Before Index"},{"body":"\r\rRemove Text Between Indexes (Cortex.Blocks.Text.RemoveText.RemoveTextBetweenIndexesBlock)\nDescription Removes text between the specified Start Index and End Index of a given Text.\nExamples Remove text between the specified Start Index and End Index of a given Text This example will remove all characters between start index 0 and end index 3 of \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".\nProperties    Property Value Notes     Text ($)Text, with value \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" ($)Text is a variable of type String   Start Index ($)StartIndex, with value 0 ($)StartIndex is a variable of type Int32   End Index ($)EndIndex, with value 3 ($)EndIndex is a variable of type Int32    Result \"A\" is at index 0 and \"D\" is at index 3 in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\". Therefore, removing all characters between (and including) start index 0 and end index 3 results in the variable ($)Text being updated to the following:\n\"EFGHIJKLMNOPQRSTUVWXYZ\"  Remove text where Start Index is greater than End Index This example will remove all characters between start index 3 and end index 0 of \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".\nProperties    Property Value Notes     Text ($)Text, with value \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" ($)Text is a variable of type String   Start Index ($)StartIndex, with value 3 ($)StartIndex is a variable of type Int32   End Index ($)EndIndex, with value 0 ($)EndIndex is a variable of type Int32    Result In this example the start index 3 is greater than the end index 0. When this occurs, the block simply swaps the indexes before it processes the text.\nTherefore, having start index 3 and end index 0 is the same as having start index 0 and end index 3.\n\"A\" is at index 0 and \"D\" is at index 3 in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".\nTherefore, removing all characters between (and including) start index 3 and end index 0, or start index 0 and end index 3, results in the variable ($)Text being updated to the following:\n\"EFGHIJKLMNOPQRSTUVWXYZ\"  Properties Text The Text to remove the text from.\n         Data Type String   Property Type InputOutput   Default Value ($)Text with value \"\"    Start Index The Start Index used to remove the text. This is an inclusive index, which means the character at the specified index will be included.\nFor information about what an index is, please see Indexes.\n         Data Type Int32   Property Type Input   Default Value ($)StartIndex with value 0    End Index The End Index used to remove the text. This is an inclusive index, which means the character at the specified index will be included.\nFor information about what an index is, please see Indexes.\n         Data Type Int32   Property Type Input   Default Value ($)EndIndex with value 0    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     PropertyValueOutOfRangeException Thrown when Text is null or empty (i.e. \"\").    Thrown when Start Index or End Index is less than zero or greater than the length of Text - 1.    Remarks Start Index and End Index are inclusive The Start Index and End Index properties are both inclusive indexes, which means the characters at those indexes will be included in the removed text.\nStart Index greater than End Index Start Index can be greater than End Index. If this is the case, the values of the indexes will be swapped. See Example above.\nImmutable String data type The String data type used to represent Text is immutable, which means it is read-only and cannot be changed once created.\nTo overcome this, this block creates a new String which has the text removed between the specified Start Index and End Index, and re-assigns it to the variable specified in the Text property.\n","categories":"","description":"Removes text between the specified start index and end index of a given text.","excerpt":"Removes text between the specified start index and end index of a given text.","ref":"/docs/reference/blocks/text/remove-text/remove-text-between-indexes-block/","tags":"","title":"Remove Text Between Indexes"},{"body":"","categories":"","description":"Rename a folder.","excerpt":"Rename a folder.","ref":"/docs/reference/blocks/files-and-folders/rename-folder/","tags":"","title":"Rename Folder"},{"body":"\r\rRename Folder (Cortex.Blocks.FilesAndFolders.RenameFolder.RenameFolderBlock)\nDescription Renames a folder at the specified Folder Path to a New Name.\nExamples Rename a folder This example will rename \"C:\\Source\\Folder\" to \"C:\\Source\\RenamedFolder\".\nIn this example assume:\n \"C:\\Source\\Folder\" contains:  An empty sub-folder named \"SubFolder\". A file named \"File.txt\".    Properties    Property Value Notes     Folder Path ($)FolderPath, with value @\"C:\\Source\\Folder\" ($)FolderPath is a variable of type String   New Name ($)NewName, with value \"RenamedFolder\" ($)NewName is a variable of type String    Result Renaming \"C:\\Source\\Folder\" to \"RenamedFolder\" will:\n Rename the existing folder at \"C:\\Source\\Folder\" to \"C:\\Source\\RenamedFolder\" with:  The Date Created left unchanged. The Date Accessed left unchanged. The Date Modified left unchanged. The Folder attributes left unchanged.   \"SubFolder\" and \"File.txt\" will be located under \"C:\\Source\\RenamedFolder\" and their names, dates, attributes and content will be left unchanged.   Other Move Operations If any other folder move operation is required, the Move Folder or Move Folders blocks must be used instead.\n Properties Folder Path The Folder Path of the folder to rename.\nThe Folder Path is case-insensitive, cannot contain any wildcard characters, and any trailing spaces will be automatically removed.\nFor information about the supported folder path formats (i.e. absolute, relative, UNC etc.) and examples of each, please see File \u0026 Folder Paths.\n         Data Type String   Property Type Input   Default Value ($)FolderPath with value null    New Name The New Name to rename the folder to.\nThe New Name is case-insensitive and any trailing spaces will be automatically removed.\nThe New Name must be a valid folder name, otherwise an InvalidFolderNameException will be thrown.\nFor information about valid folder names, please see File \u0026 Folder Paths.\n         Data Type String   Property Type Input   Default Value ($)NewName with value null    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     InvalidFolderNameException A folder or file with the New Name already exists.    The New Name contains only whitespace, or the NUL character (i.e. \\0), or contains one or more invalid characters (i.e. \", *, ?, |, \u003c, \u003e, :, \\, /).    The New Name exceeds the system-defined maximum length (typically 32,767 characters).   OperationFailedException The Folder Path does not exist.    The Folder Path points to a file.    The Folder Path contains leading spaces.    The Folder Path contains only whitespace, or the NUL character (i.e. \\0), or contains one or more invalid characters (i.e. \", *, ?, |, \u003c, \u003e, :, \\, /) in any folder names.    The Folder Path exceeds the system-defined maximum length (typically 32,767 characters).    The Folder Path is a win32 device path (i.e starts with a \"\\\\.\\\").    The Folder Path is invalid (for example, it is on an unmapped drive).    The user the flow is executing as does not have the required permissions to rename the folder or any of its content (e.g. not having read access to the Folder Path or its content, or write access to the parent of Folder Path.    An unexpected error occurs when renaming the folder.   PropertyEmptyException Thrown when Folder Path or New Name are empty (i.e. \"\").   PropertyNullException Thrown when Folder Path or New Name are null.    Remarks Folder Paths For information about the supported folder path formats (i.e. absolute, relative, UNC etc.) and examples of each, including how it is determined if a path points to a folder or a file, please see File \u0026 Folder Paths.\nFolder Path needs escaping Folder Path requires \\ characters to be escaped, otherwise each unescaped \\ will be reported as an Invalid property value message when trying to debug the flow.\nEscaping can be done in two ways:\n Escaping the \\ character with another \\ character (e.g. \"C:\\\\Source\\\\\"), or Prepending an @ character before the start of the Folder Path (e.g. @\"C:\\Source\").  Folder Attributes When renaming the folder at the specified Folder Path all of the folder’s attributes are left unchanged.\nFor information about the folder attributes (i.e. ReadOnly, Hidden, Archive etc.), please see File \u0026 Folder Attributes.\n","categories":"","description":"Renames a folder at the specified folder path to a new name.","excerpt":"Renames a folder at the specified folder path to a new name.","ref":"/docs/reference/blocks/files-and-folders/rename-folder/rename-folder-block/","tags":"","title":"Rename Folder"},{"body":"","categories":"","description":"Blocks related to working with Schedules.","excerpt":"Blocks related to working with Schedules.","ref":"/docs/reference/blocks/schedules/","tags":"","title":"Schedules"},{"body":"\r\rSearch File (Cortex.Blocks.FilesAndFolders.SearchFile.SearchFileBlock)\nDescription Searches the file at the specified File Path for text that matches a given Search Pattern.\nResults are returned as a list of Matches.\nAdditional options can be specified:\n Search Options can be specified to choose whether to use a ContainsText, PatternMatching or Regex search. Encoding can be specified if needed to explicitly state the encoding that should be used to read and search the file. A Comparison Type option can specified to choose how it is determined whether text matches the Search Pattern (e.g. whether the search is case-sensitive or case-insensitive).  Examples Get matches for a given text This example will get all matches in the file \"C:\\Source\\File.txt\" that match the text \"error\".\nIt will perform a case-insensitive search, and let the block determine the encoding of the file automatically.\nIn this example assume \"C:\\Source\\File.txt\" contains the following text:\nError: Failed to determine uptime. Information: Uptime is 2 hours. Information: Uptime is 3 hours. Error: An terminal error has occurred. The service will restart now. Properties    Property Value Notes     File Path ($)FilePath, with value @\"C:\\Source\\File.txt\" ($)FilePath is a variable of type String   Search Pattern ($)SearchPattern, with value \"error\" ($)SearchPattern is a variable of type String   Search Options ($)SearchOptions, with value SearchOptions.ContainsText ($)SearchOptions is a variable of type SearchOptions   Encoding ($)Encoding, with value null ($)Encoding is a variable of type Encoding   Comparison Type ($)ComparisonType, with value StringComparison.OrdinalIgnoreCase ($)ComparisonType is a variable of type StringComparison   Matches ($)Matches, with no value ($)Matches is a variable that will be set to an IList\u003cFileMatch\u003e value    Result Searching \"C:\\Source\\File.txt\" for all text matching \"error\" (case-insensitive), results in the variable ($)Matches being updated to the following:\n[ { \"FilePath\": \"C:\\\\Source\\\\File.txt\", \"Line\": 1, \"Value\": \"Error\", \"Index\": 0, \"Length\": 5, \"Groups\": {} }, { \"FilePath\": \"C:\\\\Source\\\\File.txt\", \"Line\": 4, \"Value\": \"Error\", \"Index\": 0, \"Length\": 5, \"Groups\": {} }, { \"FilePath\": \"C:\\\\Source\\\\File.txt\", \"Line\": 4, \"Value\": \"error\", \"Index\": 19, \"Length\": 5, \"Groups\": {} } ]  Get matches for a given pattern This example will get all matches in the file \"C:\\Source\\File.txt\" that match the pattern \"Uptime is * hours.\".\nIt will perform a case-sensitive search, and let the block determine the encoding of the file automatically.\nIn this example assume \"C:\\Source\\File.txt\" contains the following text:\nError: Failed to determine uptime. Information: Uptime is 2 hours. Information: Uptime is 3 hours. Error: An terminal error has occurred. The service will restart now. Properties    Property Value Notes     File Path ($)FilePath, with value @\"C:\\Source\\File.txt\" ($)FilePath is a variable of type String   Search Pattern ($)SearchPattern, with value \"Uptime is * hours.\" ($)SearchPattern is a variable of type String   Search Options ($)SearchOptions, with value SearchOptions.PatternMatching ($)SearchOptions is a variable of type SearchOptions   Encoding ($)Encoding, with value null ($)Encoding is a variable of type Encoding   Comparison Type ($)ComparisonType, with value StringComparison.Ordinal ($)ComparisonType is a variable of type StringComparison   Matches ($)Matches, with no value ($)Matches is a variable that will be set to an IList\u003cFileMatch\u003e value    Result Searching \"C:\\Source\\File.txt\" for all text matching the pattern \"Uptime is * hours.\" (case-sensitive), results in the variable ($)Matches being updated to the following:\n[ { \"FilePath\": \"C:\\\\Source\\\\File.txt\", \"Line\": 2, \"Value\": \"Uptime is 2 hours.\", \"Index\": 13, \"Length\": 18, \"Groups\": {} }, { \"FilePath\": \"C:\\\\Source\\\\File.txt\", \"Line\": 3, \"Value\": \"Uptime is 3 hours.\", \"Index\": 13, \"Length\": 18, \"Groups\": {} } ]  Get matches for a given regex This example will get all matches in the file \"C:\\Source\\File.txt\" that match the regex \"^Error:.*$\".\nIt will perform a case-sensitive search, explicitly specify the encoding of the file as UTF-8 and will match any line that starts with \"Error:\".\nIn this example assume \"C:\\Source\\File.txt\" contains the following text:\nError: Failed to determine uptime. Information: Uptime is 2 hours. Information: Uptime is 3 hours. Error: An terminal error has occurred. The service will restart now. Properties    Property Value Notes     File Path ($)FilePath, with value @\"C:\\Source\\File.txt\" ($)FilePath is a variable of type String   Search Pattern ($)SearchPattern, with value \"^Error:.*$\" ($)SearchPattern is a variable of type String   Search Options ($)SearchOptions, with value SearchOptions.Regex ($)SearchOptions is a variable of type SearchOptions   Encoding ($)Encoding, with value Encoding.UTF8 ($)Encoding is a variable of type Encoding   Comparison Type ($)ComparisonType, with value StringComparison.Ordinal ($)ComparisonType is a variable of type StringComparison   Matches ($)Matches, with no value ($)Matches is a variable that will be set to an IList\u003cFileMatch\u003e value    Result Searching \"C:\\Source\\File.txt\" for all text matching the regex \"^Error:.*$\" (case-sensitive), results in the variable ($)Matches being updated to the following:\n[ { \"FilePath\": \"C:\\\\Source\\\\File.txt\", \"Line\": 1, \"Value\": \"Error: Failed to determine uptime.\", \"Index\": 0, \"Length\": 34, \"Groups\": {} }, { \"FilePath\": \"C:\\\\Source\\\\File.txt\", \"Line\": 4, \"Value\": \"Error: An terminal error has occurred. The service will restart now.\", \"Index\": 0, \"Length\": 68, \"Groups\": {} } ]  Properties File Path The File Path to search for text that matches a given Search Pattern.\nThe File Path is case-insensitive, cannot contain any wildcard characters, and any trailing spaces will be automatically removed.\nFor information about the supported file path formats (i.e. absolute, relative, UNC etc.) and examples of each, please see File \u0026 Folder Paths.\n         Data Type String   Property Type Input   Default Value ($)FilePath with value null    Search Pattern The Search Pattern which text must match to be included in the returned Matches.\nA null or empty (i.e. \"\") Search Pattern means match anything; all additional block options such as Search Options etc. still take effect.\n         Data Type String   Property Type Input   Default Value ($)SearchPattern with value null    Search Options Search Options can be specified to choose whether Search Pattern should be interpreted as a ContainsText, PatternMatching or Regex search:\n SearchOptions.ContainsText matches text exactly. SearchOptions.PatternMatching allows wildcard text matching using Pattern Matching Syntax:  * wildcard character can be used to match 0 or more characters. ? wildcard character can be used to match 0 or 1 character. All other characters are treated as a literal character.   SearchOptions.Regex allows regex text matching using .Net Regex Syntax.  Please note that with SearchOptions.ContainsText overlapping matches are detected (e.g. searching for \"aa\" in \"aaa\" matches \"aa\" at index 0 and \"aa\" at index 1). With SearchOptions.Regex only \"aa\" at index 0 will be matched.\n         Data Type SearchOptions   Property Type Input   Default Value ($)SearchOptions with value SearchOptions.ContainsText    Encoding Option to specify the Encoding that should be used to read and search the file.\nMost of the time Encoding can be left as null; allowing the block to automatically attempt to detect the encoding of the file based on the presence of byte order marks. However, if it is found that the returned Matches are not correct because the block was unable to detect the encoding of the file, it is possible to specify the Encoding explicitly using this property.\nFor information about encoding, examples of available encodings and using them, please see Text Encoding.\n         Data Type String   Property Type Input   Default Value ($)Encoding with value null    Comparison Type The Comparison Type specifying the rules used to match text against the given Search Pattern.\nFor information about the supported values for the Comparison Type property and examples of how it is determined whether two pieces of text match, please see Text Equality.\n         Data Type StringComparison   Property Type Input   Default Value ($)ComparisonType with value StringComparison.Ordinal    Matches Matches containing a FileMatch for every text that matches the specified Search Pattern based on the other specified options.\nA basic example with a single FileMatch can be seen below:\n[ { \"FilePath\": \"C:\\\\Source\\\\File.txt\", \"Line\": 1, \"Value\": \"Error: Failed to determine uptime.\", \"Index\": 0, \"Length\": 34, \"Groups\": {} } ] For more information see the example above, or the FileMatch data type.\n         Data Type IList\u003cFileMatch\u003e   Property Type Output   Default Value ($)Matches with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     ArgumentException Thrown when Search Options is not one of the specified SearchOptions types (e.g. (SearchOptions)10).    Thrown when Comparison Type is not one of the specified StringComparison types (e.g. (StringComparison)10).   InvalidPropertyValueException Thrown when Encoding is invalid (e.g. Encoding.GetEncoding(-1)).   OperationFailedException The File Path does not exist.    The File Path points to a folder.    The File Path contains leading spaces.    The File Path contains only whitespace, or the NUL character (i.e. \\0), or contains one or more invalid characters (i.e. \", *, ?, |, \u003c, \u003e, :, \\, /) in any file or folder names.    The File Path exceeds the system-defined maximum length (typically 32,767 characters).    The File Path is invalid (for example, it is on an unmapped drive).    The user the flow is executing as does not have the required permissions to search the File Path.    An unexpected error occurs when searching the File Path.   PropertyEmptyException Thrown when File Path is empty (i.e. \"\").   PropertyNullException Thrown when File Path is null.   RegexMatchTimeoutException Thrown when using Search Options is either SearchOptions.Regex or SearchOptions.PatternMatching and the execution time of the search exceeds 30 seconds.   RegexParsingFailedException Thrown when Search Options is SearchOptions.Regex and the Search Pattern is not a valid regex (e.g. ().    Remarks File Paths For information about the supported file path formats (i.e. absolute, relative, UNC etc.) and examples of each, including how it is determined if a path points to a folder or a file, please see File \u0026 Folder Paths.\nFile Path needs escaping File Path requires \\ characters to be escaped, otherwise each unescaped \\ will be reported as an Invalid property value message when trying to debug the flow.\nEscaping can be done in two ways:\n Escaping the \\ character with another \\ character (e.g. \"C:\\\\Source\\\\File.txt\"), or Prepending an @ character before the start of the File Path (e.g. @\"C:\\Source\\File.txt\").  Null or empty Search Pattern A null or empty (i.e. \"\") Search Pattern means match anything; all additional block options such as Search Options etc. still take effect.\nEncoding of text For information about encoding of text, examples of available encodings and using them, please see Text Encoding.\nComparison Types For information about the supported values for the Comparison Type property and examples of how it is determined whether two pieces of text match, please see Text Equality.\nKnown Limitations  The text in the file at the specified File Path is searched line-by-line. As a result, when using SearchOptions.Regex the in-line s regex character is not supported. If the text in the file at the specified File Path ends with a blank line (0 length) that line will not be read and therefore not matched against. If Search Options is set to SearchOptions.Regex or SearchOptions.PatternMatching and Comparison Type is set to StringComparison.CurrentCulture, some characters such as æ that is equivalent to ae may not evaluate as equal.  ","categories":"","description":"Searches a file at a specified file path for a matching search pattern.","excerpt":"Searches a file at a specified file path for a matching search pattern.","ref":"/docs/reference/blocks/files-and-folders/search-file/search-file-block/","tags":"","title":"Search File"},{"body":"","categories":"","description":"Search a file or multiple files.","excerpt":"Search a file or multiple files.","ref":"/docs/reference/blocks/files-and-folders/search-file/","tags":"","title":"Search File(s)"},{"body":"\r\rSearch Files (Cortex.Blocks.FilesAndFolders.SearchFile.SearchFilesBlock)\nDescription Searches the files at the specified File Paths for text that matches a given Search Pattern.\nResults are returned as Matches.\nAdditional options can be specified:\n Search Options can be specified to choose whether to use a ContainsText, PatternMatching or Regex search. Encoding can be specified if needed to explicitly state the encoding that should be used to read and search the files. A Comparison Type option can specified to choose how it is determined whether text matches the Search Pattern (e.g. whether the search is case-sensitive or case-insensitive).  Examples Get matches for a given text This example will get all matches in the files [\"C:\\Source\\File1.txt\", \"C:\\Source\\File2.txt\"] that match the text \"error\".\nIt will perform a case-insensitive search, and let the block determine the encoding of the files automatically.\nIn this example assume \"C:\\Source\\File1.txt\" contains the following text:\nError: Failed to determine uptime. Information: Uptime is 2 hours. Information: Uptime is 3 hours. Error: An terminal error has occurred. The service will restart now. and \"C:\\Source\\File2.txt\" contains the following text:\nInformation: Uptime is 1 hour. Information: Uptime is 2 hours. Information: Uptime is 3 hours. Error: Failed to determine uptime. Error: Failed to determine uptime. Information: Uptime is 6 hours. Properties    Property Value Notes     File Paths ($)FilePaths, with value [@\"C:\\Source\\File1.txt\", @\"C:\\Source\\File2.txt\"] ($)FilePaths is a variable of type IEnumerable\u003cString\u003e   Search Pattern ($)SearchPattern, with value \"error\" ($)SearchPattern is a variable of type String   Search Options ($)SearchOptions, with value SearchOptions.ContainsText ($)SearchOptions is a variable of type SearchOptions   Encoding ($)Encoding, with value null ($)Encoding is a variable of type Encoding   Comparison Type ($)ComparisonType, with value StringComparison.OrdinalIgnoreCase ($)ComparisonType is a variable of type StringComparison   Matches ($)Matches, with no value ($)Matches is a variable that will be set to an IDictionary\u003cString, IList\u003cFileMatch\u003e\u003e value    Result Searching \"C:\\Source\\File.txt\" for all text matching \"error\" (case-insensitive), results in the variable ($)Matches being updated to the following:\n{ \"C:\\\\Source\\\\File1.txt\" : [ { \"FilePath\": \"C:\\\\Source\\\\File1.txt\", \"Line\": 1, \"Value\": \"Error\", \"Index\": 0, \"Length\": 5, \"Groups\": {} }, { \"FilePath\": \"C:\\\\Source\\\\File1.txt\", \"Line\": 4, \"Value\": \"Error\", \"Index\": 0, \"Length\": 5, \"Groups\": {} }, { \"FilePath\": \"C:\\\\Source\\\\File1.txt\", \"Line\": 4, \"Value\": \"error\", \"Index\": 19, \"Length\": 5, \"Groups\": {} } ], \"C:\\\\Source\\\\File2.txt\" : [ { \"FilePath\": \"C:\\\\Source\\\\File2.txt\", \"Line\": 4, \"Value\": \"Error\", \"Index\": 0, \"Length\": 5, \"Groups\": {} }, { \"FilePath\": \"C:\\\\Source\\\\File2.txt\", \"Line\": 5, \"Value\": \"Error\", \"Index\": 0, \"Length\": 5, \"Groups\": {} } ] }  Get matches for a given pattern This example will get all matches in the files [\"C:\\Source\\File1.txt\", \"C:\\Source\\File2.txt\"] that match the pattern \"Uptime is * hour?.\".\nIt will perform a case-sensitive search, and let the block determine the encoding of the files automatically.\nIn this example assume \"C:\\Source\\File1.txt\" contains the following text:\nError: Failed to determine uptime. Information: Uptime is 2 hours. Information: Uptime is 3 hours. Error: An terminal error has occurred. The service will restart now. and \"C:\\Source\\File2.txt\" contains the following text:\nInformation: Uptime is 1 hour. Information: Uptime is 2 hours. Information: Uptime is 3 hours. Error: Failed to determine uptime. Error: Failed to determine uptime. Information: Uptime is 6 hours. Properties    Property Value Notes     File Paths ($)FilePaths, with value [@\"C:\\Source\\File1.txt\", @\"C:\\Source\\File2.txt\"] ($)FilePaths is a variable of type IEnumerable\u003cString\u003e   Search Pattern ($)SearchPattern, with value \"Uptime is * hour?.\" ($)SearchPattern is a variable of type String   Search Options ($)SearchOptions, with value SearchOptions.PatternMatching ($)SearchOptions is a variable of type SearchOptions   Encoding ($)Encoding, with value null ($)Encoding is a variable of type Encoding   Comparison Type ($)ComparisonType, with value StringComparison.Ordinal ($)ComparisonType is a variable of type StringComparison   Matches ($)Matches, with no value ($)Matches is a variable that will be set to an IDictionary\u003cString, IList\u003cFileMatch\u003e\u003e value    Result Searching the files [\"C:\\Source\\File1.txt\", \"C:\\Source\\File2.txt\"] for all text matching the pattern \"Uptime is * hour?.\" (case-sensitive), results in the variable ($)Matches being updated to the following:\n{ \"C:\\\\Source\\\\File1.txt\" : [ { \"FilePath\": \"C:\\\\Source\\\\File1.txt\", \"Line\": 2, \"Value\": \"Uptime is 2 hours.\", \"Index\": 13, \"Length\": 18, \"Groups\": {} }, { \"FilePath\": \"C:\\\\Source\\\\File1.txt\", \"Line\": 3, \"Value\": \"Uptime is 3 hours.\", \"Index\": 13, \"Length\": 18, \"Groups\": {} } ], \"C:\\\\Source\\\\File2.txt\" : [ { \"FilePath\": \"C:\\\\Source\\\\File2.txt\", \"Line\": 1, \"Value\": \"Uptime is 1 hour.\", \"Index\": 13, \"Length\": 17, \"Groups\": {} }, { \"FilePath\": \"C:\\\\Source\\\\File2.txt\", \"Line\": 2, \"Value\": \"Uptime is 2 hours.\", \"Index\": 13, \"Length\": 18, \"Groups\": {} }, { \"FilePath\": \"C:\\\\Source\\\\File2.txt\", \"Line\": 3, \"Value\": \"Uptime is 3 hours.\", \"Index\": 13, \"Length\": 18, \"Groups\": {} }, { \"FilePath\": \"C:\\\\Source\\\\File2.txt\", \"Line\": 6, \"Value\": \"Uptime is 6 hours.\", \"Index\": 13, \"Length\": 18, \"Groups\": {} } ] }  Get matches for a given regex This example will get all matches in the files [\"C:\\Source\\File1.txt\", \"C:\\Source\\File2.txt\"] that match the regex \"^Error:.*$\".\nIt will perform a case-sensitive search, explicitly specify the encoding of the files as UTF-8 and will match any lines that start with \"Error:\".\nIn this example assume \"C:\\Source\\File1.txt\" contains the following text:\nError: Failed to determine uptime. Information: Uptime is 2 hours. Information: Uptime is 3 hours. Error: An terminal error has occurred. The service will restart now. and \"C:\\Source\\File2.txt\" contains the following text:\nInformation: Uptime is 1 hour. Information: Uptime is 2 hours. Information: Uptime is 3 hours. Error: Failed to determine uptime. Error: Failed to determine uptime. Information: Uptime is 6 hours. Properties    Property Value Notes     File Paths ($)FilePaths, with value [@\"C:\\Source\\File1.txt\", @\"C:\\Source\\File2.txt\"] ($)FilePaths is a variable of type IEnumerable\u003cString\u003e   Search Pattern ($)SearchPattern, with value \"^Error:.*$\" ($)SearchPattern is a variable of type String   Search Options ($)SearchOptions, with value SearchOptions.Regex ($)SearchOptions is a variable of type SearchOptions   Encoding ($)Encoding, with value Encoding.UTF8 ($)Encoding is a variable of type Encoding   Comparison Type ($)ComparisonType, with value StringComparison.Ordinal ($)ComparisonType is a variable of type StringComparison   Matches ($)Matches, with no value ($)Matches is a variable that will be set to an IDictionary\u003cString, IList\u003cFileMatch\u003e\u003e value    Result Searching the files [\"C:\\Source\\File1.txt\", \"C:\\Source\\File2.txt\"] for all text matching the regex \"^Error:.*$\" (case-sensitive), results in the variable ($)Matches being updated to the following:\n{ \"C:\\\\Source\\\\File1.txt\" : [ { \"FilePath\": \"C:\\\\Source\\\\File1.txt\", \"Line\": 1, \"Value\": \"Error: Failed to determine uptime.\", \"Index\": 0, \"Length\": 34, \"Groups\": {} }, { \"FilePath\": \"C:\\\\Source\\\\File1.txt\", \"Line\": 4, \"Value\": \"Error: An terminal error has occurred. The service will restart now.\", \"Index\": 0, \"Length\": 68, \"Groups\": {} } ], \"C:\\\\Source\\\\File2.txt\" : [ { \"FilePath\": \"C:\\\\Source\\\\File2.txt\", \"Line\": 4, \"Value\": \"Error: Failed to determine uptime.\", \"Index\": 0, \"Length\": 34, \"Groups\": {} }, { \"FilePath\": \"C:\\\\Source\\\\File2.txt\", \"Line\": 5, \"Value\": \"Error: Failed to determine uptime.\", \"Index\": 0, \"Length\": 34, \"Groups\": {} } ] }  Properties File Paths The File Paths to search for text that matches a given Search Pattern.\nEach file path in File Paths is case-insensitive, cannot contain any wildcard characters, and any trailing spaces will be automatically removed.\nFor information about the supported file path formats (i.e. absolute, relative, UNC etc.) and examples of each, please see File \u0026 Folder Paths.\n         Data Type IEnumerable\u003cString\u003e   Property Type Input   Default Value ($)FilePaths with value []    Search Pattern The Search Pattern which text must match to be included in the returned Matches.\nA null or empty (i.e. \"\") Search Pattern means match anything; all additional block options such as Search Options etc. still take effect.\n         Data Type String   Property Type Input   Default Value ($)SearchPattern with value null    Search Options Search Options can be specified to choose whether Search Pattern should be interpreted as a ContainsText, PatternMatching or Regex search:\n SearchOptions.ContainsText matches text exactly. SearchOptions.PatternMatching allows wildcard text matching using Pattern Matching Syntax:  * wildcard character can be used to match 0 or more characters. ? wildcard character can be used to match 0 or 1 character. All other characters are treated as a literal character.   SearchOptions.Regex allows regex text matching using .Net Regex Syntax.  Please note that with SearchOptions.ContainsText overlapping matches are detected (e.g. searching for \"aa\" in \"aaa\" matches \"aa\" at index 0 and \"aa\" at index 1). With SearchOptions.Regex only \"aa\" at index 0 will be matched.\n         Data Type SearchOptions   Property Type Input   Default Value ($)SearchOptions with value SearchOptions.ContainsText    Encoding Option to specify the Encoding that should be used to read and search the files.\nMost of the time Encoding can be left as null; allowing the block to automatically attempt to detect the encoding of the files based on the presence of byte order marks. However, if it is found that the returned Matches are not correct because the block was unable to detect the encoding of the files, it is possible to specify the Encoding explicitly using this property.\nFor information about encoding, examples of available encodings and using them, please see Text Encoding.\n         Data Type String   Property Type Input   Default Value ($)Encoding with value null    Comparison Type The Comparison Type specifying the rules used to match text against the given Search Pattern.\nFor information about the supported values for the Comparison Type property and examples of how it is determined whether two pieces of text match, please see Text Equality.\n         Data Type StringComparison   Property Type Input   Default Value ($)ComparisonType with value StringComparison.Ordinal    Matches Matches containing an entry for each file in File Paths.\nThe key of each entry is the file path, and the value contains a FileMatch for every text in the file path that matches the specified Search Pattern based on the other specified options.\nA basic example with a single file path and a single FileMatch can be seen below:\n{ \"C:\\\\Source\\\\File1.txt\" : [ { \"FilePath\": \"C:\\\\Source\\\\File1.txt\", \"Line\": 1, \"Value\": \"Error: Failed to determine uptime.\", \"Index\": 0, \"Length\": 34, \"Groups\": {} } ] } For more information see the example above, or the FileMatch data type.\n         Data Type IDictionary\u003cString, IList\u003cFileMatch\u003e\u003e   Property Type Output   Default Value ($)Matches with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     ArgumentException Thrown when Search Options is not one of the specified SearchOptions types (e.g. (SearchOptions)10).    Thrown when Comparison Type is not one of the specified StringComparison types (e.g. (StringComparison)10).   InvalidPropertyValueException Thrown when Encoding is invalid (e.g. Encoding.GetEncoding(-1)).   OperationFailedException Any file path in File Paths is null or empty (i.e. \"\"). For more information, see Null or Empty File Paths    Any file path in File Paths is duplicated. For more information, see Duplicate File Paths    Any file path in File Paths does not exist.    Any file path in File Paths points to a folder.    Any file path in File Paths contains leading spaces.    Any file path in File Paths contains only whitespace, or the NUL character (i.e. \\0), or contains one or more invalid characters (i.e. \", *, ?, |, \u003c, \u003e, :, \\, /) in any file or folder names.    Any file path in File Paths exceeds the system-defined maximum length (typically 32,767 characters).    Any file path in File Paths is invalid (for example, it is on an unmapped drive).    The user the flow is executing as does not have the required permissions to search a file path in File Paths.    An unexpected error occurs when searching any file path in File Paths.   PropertyEmptyException Thrown when File Paths does not contain any items.   PropertyNullException Thrown when File Paths is null.   RegexMatchTimeoutException Thrown when using Search Options is either SearchOptions.Regex or SearchOptions.PatternMatching and the execution time of the search exceeds 30 seconds.   RegexParsingFailedException Thrown when Search Options is SearchOptions.Regex and the Search Pattern is not a valid regex (e.g. ().    Remarks File Paths For information about the supported file path formats (i.e. absolute, relative, UNC etc.) and examples of each, including how it is determined if a path points to a folder or a file, please see File \u0026 Folder Paths.\nFile Paths needs escaping Each file path in File Paths requires \\ characters to be escaped, otherwise each unescaped \\ will be reported as an Invalid property value message when trying to debug the flow.\nEscaping can be done in two ways:\n Escaping the \\ character with another \\ character (e.g. \"C:\\\\Source\\\\File.txt\"), or Prepending an @ character before the start of the File Paths (e.g. @\"C:\\Source\\File.txt\").  Null or empty Search Pattern A null or empty (i.e. \"\") Search Pattern means match anything; all additional block options such as Search Options etc. still take effect.\nEncoding of text For information about encoding of text, examples of available encodings and using them, please see Text Encoding.\nComparison Types For information about the supported values for the Comparison Type property and examples of how it is determined whether two pieces of text match, please see Text Equality.\nHandling of Exceptions If an exception occurs when trying to search a file in the File Paths, it will be recorded and the block will continue processing the remaining files. Once all files are processed, recorded exceptions will be thrown within an OperationFailedException.\nKnown Limitations  The text in the files at the specified File Paths is searched line-by-line. As a result, when using SearchOptions.Regex the in-line s regex character is not supported. If the text in the files at the specified File Paths ends with a blank line (0 length) that line will not be read and therefore not matched against. If Search Options is set to SearchOptions.Regex or SearchOptions.PatternMatching and Comparison Type is set to StringComparison.CurrentCulture, some characters such as æ that is equivalent to ae may not evaluate as equal.  ","categories":"","description":"Searches files at the specified file paths for a matching search pattern.","excerpt":"Searches files at the specified file paths for a matching search pattern.","ref":"/docs/reference/blocks/files-and-folders/search-file/search-files-block/","tags":"","title":"Search Files"},{"body":"","categories":"","description":"","excerpt":"","ref":"/search/","tags":"","title":"Search Results"},{"body":"\r\rSet All Items (Cortex.Blocks.Dictionaries.SetItem.SetAllItems`3)\nDescription Sets all items in a Dictionary to a New Value.\nExamples Set all items in a Dictionary to a New Value This example will set all items in {\"Key1\" : 1, \"Key2\" : 2} to 10.\nProperties    Property Value Notes     Dictionary ($)Dictionary, with value {\"Key1\" : 1, \"Key2\" : 2} ($)Dictionary is a variable of type IDictionary\u003cString, Int32\u003e   New Value ($)NewValue, with value 10 ($)NewValue is a variable of type Int32    Result Setting all items in {\"Key1\" : 1, \"Key2\" : 2} to 10 results in the variable ($)Dictionary being updated to the following:\n{\"Key1\" : 10, \"Key2\" : 10}  Properties Dictionary The Dictionary to set all items in.\nDictionary can be any IDictionary\u003cTKey, TItem\u003e, where TKey represents the type of keys used to lookup items in the Dictionary, and TItem represents the type of items in the Dictionary.\n         Data Type IDictionary\u003cTKey, TItem\u003e   Property Type InputOutput   Default Value ($)Dictionary with value {}    New Value The New Value to set all items in Dictionary to.\n         Data Type TItem   Property Type Input   Default Value ($)NewValue with value null    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     CannotModifyReadOnlyDictionaryException Thrown when Dictionary is read-only.   InvalidPropertyValueException Thrown when New Value is null and Dictionary only accepts non-nullable value types.   PropertyNullException Thrown when Dictionary is null.    Remarks Empty Dictionary If Dictionary is empty (i.e. {}) there is nothing to set, so no operation is performed.\nDefining dictionaries using literal syntax For information about how to define dictionaries using literal syntax, see Dictionary Literals.\nDefining dictionaries using expression syntax For information about how to define dictionaries using expression syntax, see Dictionary Expressions.\nDictionaries containing items with same data types vs different data types For information about the different types of dictionaries, including those that can contain only the same type of item, and those that can contain different types of item, see Dictionaries.\n","categories":"","description":"Sets all items in a Dictionary to a new value.","excerpt":"Sets all items in a Dictionary to a new value.","ref":"/docs/reference/blocks/dictionaries/set-item/set-all-items-block-3/","tags":"","title":"Set All Items"},{"body":"\r\rSet All Items (Cortex.Blocks.Lists.SetItem.SetAllItems`2)\nDescription Sets all items in a List to a New Value.\nExamples Set all items in a List to a New Value This example will set all items in [\"Some Text\", 1] to \"New Value\".\nProperties    Property Value Notes     List ($)List, with value [\"Some Text\", 1] ($)List is a variable of type IList\u003cdynamic\u003e   New Value ($)NewValue, with value \"New Value\" ($)NewValue is a variable of type String    Result Setting all items in [\"Some Text\", 1] to \"New Value\" results in the variable ($)List being updated to the following:\n[\"New Value\", \"New Value\"]  Properties List The List to set all items in.\nList can be any IList\u003cTItem\u003e, where TItem represents the type of items in the List.\n         Data Type IList\u003cTItem\u003e   Property Type InputOutput   Default Value ($)List with value []    New Value The New Value to set all items in List to.\n         Data Type TItem   Property Type Input   Default Value ($)NewValue with value null    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     CannotModifyReadOnlyListException Thrown when List is read-only.   InvalidPropertyValueException Thrown when New Value is null and List only accepts non-nullable value types.   PropertyNullException Thrown when List is null.    Remarks Empty List If List is empty (i.e. []) there is nothing to set, so no operation is performed.\nDefining lists using literal syntax For information about how to define lists using literal syntax, see List Literals.\nDefining lists using expression syntax For information about how to define lists using expression syntax, see List Expressions.\nLists containing items of a single data type vs multiple data types For information about the different types of lists, including those that can contain only a single type of item, and those that can contain multiple types of item, see Lists.\n","categories":"","description":"Sets all items in a List to a new value.","excerpt":"Sets all items in a List to a new value.","ref":"/docs/reference/blocks/lists/set-item/set-all-items-block-2/","tags":"","title":"Set All Items"},{"body":"\r\rSet Item At Beginning (Cortex.Blocks.Lists.SetItem.SetItemAtBeginningBlock`2)\nDescription Sets the item at the beginning of a List to a New Value.\nExamples Set the item at the beginning of a List to a New Value This example will set the item at the beginning of [\"Some Text\", 1] to \"Some Modified Text\".\nProperties    Property Value Notes     List ($)List, with value [\"Some Text\", 1] ($)List is a variable of type IList\u003cdynamic\u003e   New Value ($)NewValue, with value \"Some Modified Text\" ($)NewValue is a variable of type String    Result Setting the item at the beginning of [\"Some Text\", 1] to \"Some Modified Text\" results in the variable ($)List being updated to the following:\n[\"Some Modified Text\", 1]  Properties List The List to set the item in.\nList can be any IList\u003cTItem\u003e, where TItem represents the type of items in the List.\n         Data Type IList\u003cTItem\u003e   Property Type InputOutput   Default Value ($)List with value []    New Value The New Value to set the item at the beginning of List to.\n         Data Type TItem   Property Type Input   Default Value ($)NewValue with value null    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     CannotModifyReadOnlyListException Thrown when List is read-only.   InvalidPropertyValueException Thrown when New Value is null and List only accepts non-nullable value types.   PropertyEmptyException Thrown when List contains no items.   PropertyNullException Thrown when List is null.    Remarks Defining lists using literal syntax For information about how to define lists using literal syntax, see List Literals.\nDefining lists using expression syntax For information about how to define lists using expression syntax, see List Expressions.\nLists containing items of a single data type vs multiple data types For information about the different types of lists, including those that can contain only a single type of item, and those that can contain multiple types of item, see Lists.\n","categories":"","description":"Sets the item at the beginning of a List to a new value.","excerpt":"Sets the item at the beginning of a List to a new value.","ref":"/docs/reference/blocks/lists/set-item/set-item-at-beginning-block-2/","tags":"","title":"Set Item At Beginning"},{"body":"\r\rSet Item At End (Cortex.Blocks.Lists.SetItem.SetItemAtEndBlock`2)\nDescription Sets the item at the end of a List to a New Value.\nExamples Set the item at the end of a List to a New Value This example will set the item at the end of [\"Some Text\", 1] to 10.\nProperties    Property Value Notes     List ($)List, with value [\"Some Text\", 1] ($)List is a variable of type IList\u003cdynamic\u003e   New Value ($)NewValue, with value 10 ($)NewValue is a variable of type Int32    Result Setting the item at the end of [\"Some Text\", 1] to 10 results in the variable ($)List being updated to the following:\n[\"Some Text\", 10]  Properties List The List to set the item in.\nList can be any IList\u003cTItem\u003e, where TItem represents the type of items in the List.\n         Data Type IList\u003cTItem\u003e   Property Type InputOutput   Default Value ($)List with value []    New Value The New Value to set the item at the end of List to.\n         Data Type TItem   Property Type Input   Default Value ($)NewValue with value null    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     CannotModifyReadOnlyListException Thrown when List is read-only.   InvalidPropertyValueException Thrown when New Value is null and List only accepts non-nullable value types.   PropertyEmptyException Thrown when List contains no items.   PropertyNullException Thrown when List is null.    Remarks Defining lists using literal syntax For information about how to define lists using literal syntax, see List Literals.\nDefining lists using expression syntax For information about how to define lists using expression syntax, see List Expressions.\nLists containing items of a single data type vs multiple data types For information about the different types of lists, including those that can contain only a single type of item, and those that can contain multiple types of item, see Lists.\n","categories":"","description":"Sets the item at the end of a List to a new value.","excerpt":"Sets the item at the end of a List to a new value.","ref":"/docs/reference/blocks/lists/set-item/set-item-at-end-block-2/","tags":"","title":"Set Item At End"},{"body":"\r\rSet Item At Index (Cortex.Blocks.Lists.SetItem.SetItemAtIndexBlock`2)\nDescription Sets the item at the specified Index of a List to a New Value.\nExamples Set the Item at the first Index (i.e. 0) of a List to a New Value This example will set the item at index 0 of [\"Some Text\", 1] to 10.\nProperties    Property Value Notes     List ($)List, with value [\"Some Text\", 1] ($)List is a variable of type IList\u003cdynamic\u003e   New Value ($)NewValue, with value 10 ($)NewValue is a variable of type Int32   Index ($)Index, with value 0 ($)Index is a variable of type Int32    Result Setting the item at index 0 of [\"Some Text\", 1] to 10 results in the variable ($)List being updated to the following:\n[10, 1]  Set the Item at the last Index (i.e. Index equals count of items - 1) of a List This example will set the item at index 1 of [\"Some Text\", 1] to 10.\nProperties    Property Value Notes     List ($)List, with value [\"Some Text\", 1] ($)List is a variable of type IList\u003cdynamic\u003e   New Value ($)NewValue, with value 10 ($)NewValue is a variable of type Int32   Index ($)Index, with value 1 ($)Index is a variable of type Int32    Result Setting the item at index 1 of [\"Some Text\", 1] to 10 results in the variable ($)List being updated to the following:\n[\"Some Text\", 10]  Properties List The List to set the item in.\nList can be any IList\u003cTItem\u003e, where TItem represents the type of items in the List.\n         Data Type IList\u003cTItem\u003e   Property Type InputOutput   Default Value ($)List with value []    New Value The New Value to set the item at the specified Index of List to.\n         Data Type TItem   Property Type Input   Default Value ($)NewValue with value null    Index The Index to set the item at.\nValid values are between and including 0 and the total count of items in the List - 1.\nFor information about what an index is, please see Indexes.\n         Data Type Int32   Property Type Input   Default Value ($)Index with value 0    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     CannotModifyReadOnlyListException Thrown when List is read-only.   InvalidPropertyValueException Thrown when New Value is null and List only accepts non-nullable value types.   PropertyNullException Thrown when List is null.   PropertyValueOutOfRangeException Thrown when List contains no items.    Thrown when Index is out of the range of the list indexes. Valid indexes are between and including 0 and the count of items in the List - 1.    Remarks Defining lists using literal syntax For information about how to define lists using literal syntax, see List Literals.\nDefining lists using expression syntax For information about how to define lists using expression syntax, see List Expressions.\nLists containing items of a single data type vs multiple data types For information about the different types of lists, including those that can contain only a single type of item, and those that can contain multiple types of item, see Lists.\n","categories":"","description":"Sets the item at the specified index of a List to a new value.","excerpt":"Sets the item at the specified index of a List to a new value.","ref":"/docs/reference/blocks/lists/set-item/set-item-at-index-block-2/","tags":"","title":"Set Item At Index"},{"body":"\r\rSet Item With Key (Cortex.Blocks.Dictionaries.SetItem.SetItemWithKeyBlock`3)\nDescription Sets the specified Occurrence of an item with the given Key in a Dictionary to a New Value.\nExamples Set the first Occurrence of an item with a Key in a Dictionary to a New Value This example will attempt to set the first occurrence of an item with the key \"Key1\" in {\"Key1\" : 1, \"Key2\" : 2} to 10.\nProperties    Property Value Notes     Dictionary ($)Dictionary, with value {\"Key1\" : 1, \"Key2\" : 2} ($)Dictionary is a variable of type IDictionary\u003cString, Int32\u003e   Key ($)Key, with value \"Key1\" ($)Key is a variable of type String   New Value ($)NewValue, with value 10 ($)NewValue is a variable of type Int32   Occurrence ($)Occurrence, with value 1 ($)Occurrence is a variable of type Int32    Result An Occurrence of 1 means set the first occurrence; 2 means second etc.\nAttempting to set the first occurrence of an item with the key \"Key1\" in {\"Key1\" : 1, \"Key2\" : 2} to 10 results in the variable ($)Dictionary being updated to the following:\n{\"Key1\" : 10, \"Key2\" : 1}  Set the last Occurrence of an item with a Key in a Dictionary to a New Value Typically keys are simple data types such as String, Int32, Boolean, and for these a dictionary cannot the same key value more than once. This is due to how the data type’s object equality is implemented (two items are considered equal if they have the same value rather than being the same object reference).\nHowever, other data types such as IList\u003cInt32\u003e can also be used as keys. For these data types, object equality only considers two items equal if they are the same reference; it does not care about whether they have the same value. Therefore, it is possible to have the same key value more than once, and as a result you should be able to set an occurrence of item with that key.\nThis example will illustrate this, by attempting to set the last occurrence of an item with the key [1] in {[1] : 1, [2] : 2, [3] : 3, [3] : 3, [2] : 2, [1] : 1} to 10.\nProperties    Property Value Notes     Dictionary ($)Dictionary, with value {[1] : 1, [2] : 2, [3] : 3, [3] : 3, [2] : 2, [1] : 1} ($)Dictionary is a variable of type IDictionary\u003cIList\u003cInt32\u003e, Int32\u003e   Key ($)Key, with value [1] ($)Key is a variable of type IList\u003cInt32\u003e   New Value ($)NewValue, with value 10 ($)NewValue is a variable of type Int32   Occurrence ($)Occurrence, with value -1 ($)Occurrence is a variable of type Int32    Result An Occurrence of -1, means set the last occurrence; -2 means second last etc.\nAttempting to set the last occurrence of an item with the key [1] in {[1] : 1, [2] : 2, [3] : 3, [3] : 3, [2] : 2, [1] : 1} to 10 results in the variable ($)Dictionary being updated to the following:\n{[1] : 1, [2] : 2, [3] : 3, [3] : 3, [2] : 2, [1] : 10}  Properties Dictionary The Dictionary to set the specified Occurrence of item with the given Key in.\nItems are considered matching if they have the specified Key.\nDictionary can be any IDictionary\u003cTKey, TItem\u003e, where TKey represents the type of keys used to lookup items in the Dictionary, and TItem represents the type of items in the Dictionary.\n         Data Type IDictionary\u003cTKey, TItem\u003e   Property Type InputOutput   Default Value ($)Dictionary with value {}    Key The Key the item to set must have.\nFor information and examples of how it is determined whether an item has a specified key, please see Object Equality.\nFor information about what a key is, please see Keys.\n         Data Type TKey   Property Type Input   Default Value ($)Key with value null    New Value The New Value to set the specified Occurrence of item with the given Key in Dictionary to.\n         Data Type TItem   Property Type Input   Default Value ($)NewValue with value null    Occurrence The Occurrence of item with the given Key to set in the Dictionary.\nItems are considered matching if they have the specified Key.\nUnlike lists, dictionaries do not have a defined order. This means the nth occurrence is determined by the underlying Microsoft .Net implementation; this is not published and could change if the algorithm were to change.\nFor information about supported values for the Occurrence property and examples of how it can be used, please see Occurrences.\n         Data Type Int32   Property Type Input   Default Value ($)Occurrence with value 1    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     CannotModifyReadOnlyDictionaryException Thrown when Dictionary is read-only.   InvalidPropertyValueException Thrown when New Value is null and Dictionary only accepts non-nullable value types.   KeyNotPresentException Thrown when the Key is not present in the Dictionary.   OccurrenceNotPresentException Thrown when the specified Occurrence of item with the given Key is not present in the Dictionary.   PropertyNullException Thrown when Dictionary or Key are null.    Remarks Key Equality For information and examples of how it is determined whether a key is already present, please see Object Equality.\nOccurrences Unlike lists, dictionaries do not have a defined order. This means the nth occurrence is determined by the underlying Microsoft .Net implementation; this is not published and could change if the algorithm were to change.\nFor information about supported values for the Occurrence property and examples of how it can be used, please see Occurrences.\nDefining dictionaries using literal syntax For information about how to define dictionaries using literal syntax, see Dictionary Literals.\nDefining dictionaries using expression syntax For information about how to define dictionaries using expression syntax, see Dictionary Expressions.\nDictionaries containing items with same data types vs different data types For information about the different types of dictionaries, including those that can contain only the same type of item, and those that can contain different types of item, see Dictionaries.\n","categories":"","description":"Sets the specified occurrence of an item with the given key in a Dictionary to a new value.","excerpt":"Sets the specified occurrence of an item with the given key in a Dictionary to a new value.","ref":"/docs/reference/blocks/dictionaries/set-item/set-item-with-key-block-3/","tags":"","title":"Set Item With Key"},{"body":"\r\rSet Item With Value (Cortex.Blocks.Dictionaries.SetItem.SetItemWithValueBlock`3)\nDescription Sets the specified Occurrence of an item matching a Value in a Dictionary to a New Value.\nExamples Set the first Occurrence of an item matching a Value in a Dictionary to a New Value This example will attempt to set the first occurrence of an item matching the value 1 in {\"Key1\" : 1, \"Key2\" : 1} to 10.\nProperties    Property Value Notes     Dictionary ($)Dictionary, with value {\"Key1\" : 1, \"Key2\" : 1} ($)Dictionary is a variable of type IDictionary\u003cString, Int32\u003e   Value ($)Value, with value 1 ($)Value is a variable of type Int32   New Value ($)NewValue, with value 10 ($)NewValue is a variable of type Int32   Occurrence ($)Occurrence, with value 1 ($)Occurrence is a variable of type Int32    Result An Occurrence of 1 means set the first occurrence; 2 means second etc.\nAttempting to set the first occurrence of an item matching the value 1 in {\"Key1\" : 1, \"Key2\" : 1} to 10 results in the variable ($)Dictionary being updated to the following:\n{\"Key1\" : 10, \"Key2\" : 1}  Set the last Occurrence of an item matching a Value in a Dictionary to a New Value This example will attempt to set the last occurrence of an item matching the value 1 in {\"Key1\" : 1, \"Key2\" : 1} to 10.\nProperties    Property Value Notes     Dictionary ($)Dictionary, with value {\"Key1\" : 1, \"Key2\" : 1} ($)Dictionary is a variable of type IDictionary\u003cString, Int32\u003e   Value ($)Value, with value 1 ($)Value is a variable of type Int32   New Value ($)NewValue, with value 10 ($)NewValue is a variable of type Int32   Occurrence ($)Occurrence, with value -1 ($)Occurrence is a variable of type Int32    Result An Occurrence of -1, means set the last occurrence; -2 means second last etc.\nAttempting to set the last occurrence of an item matching the value 1 in {\"Key1\" : 1, \"Key2\" : 1} to 10 results in the variable ($)Dictionary being updated to the following:\n{\"Key1\" : 1, \"Key2\" : 10}  Properties Dictionary The Dictionary to set the specified Occurrence of matching item in.\nItems are considered matching if they have the specified Value.\nDictionary can be any IDictionary\u003cTKey, TItem\u003e, where TKey represents the type of keys used to lookup items in the Dictionary, and TItem represents the type of items in the Dictionary.\n         Data Type IDictionary\u003cTKey, TItem\u003e   Property Type InputOutput   Default Value ($)Dictionary with value {}    Value The Value the item to set must match.\nFor information and examples of how it is determined whether an item matches a specified value, please see Object Equality.\n         Data Type TItem   Property Type Input   Default Value ($)Value with value null    New Value The New Value to set the specified Occurrence of matching item in Dictionary to.\n         Data Type TItem   Property Type Input   Default Value ($)NewValue with value null    Occurrence The Occurrence of matching item to set in the Dictionary.\nItems are considered matching if they have the specified Value.\nUnlike lists, dictionaries do not have a defined order. This means the nth occurrence is determined by the underlying Microsoft .Net implementation; this is not published and could change if the algorithm were to change.\nFor information about supported values for the Occurrence property and examples of how it can be used, please see Occurrences.\n         Data Type Int32   Property Type Input   Default Value ($)Occurrence with value 1    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     CannotModifyReadOnlyDictionaryException Thrown when Dictionary is read-only.   InvalidPropertyValueException Thrown when Value or New Value are null and Dictionary only accepts non-nullable value types.   PropertyNullException Thrown when Dictionary is null.    Remarks Item Equality For information and examples of how it is determined whether an item matches a specified value, please see Object Equality.\nOccurrences Unlike lists, dictionaries do not have a defined order. This means the nth occurrence is determined by the underlying Microsoft .Net implementation; this is not published and could change if the algorithm were to change.\nFor information about supported values for the Occurrence property and examples of how it can be used, please see Occurrences.\nEmpty Dictionary If Dictionary is empty (i.e. {}) there is nothing to set, so no operation is performed.\nNo items matching Value, or Occurrence is not present If Dictionary does not contain items matching the specified Value or the specified Occurrence is not present, there is nothing to set, so no operation is performed.\nDefining dictionaries using literal syntax For information about how to define dictionaries using literal syntax, see Dictionary Literals.\nDefining dictionaries using expression syntax For information about how to define dictionaries using expression syntax, see Dictionary Expressions.\nDictionaries containing items with same data types vs different data types For information about the different types of dictionaries, including those that can contain only the same type of item, and those that can contain different types of item, see Dictionaries.\n","categories":"","description":"Sets the specified occurrence of an item matching a value in a Dictionary to a new value.","excerpt":"Sets the specified occurrence of an item matching a value in a Dictionary to a new value.","ref":"/docs/reference/blocks/dictionaries/set-item/set-item-with-value-block-3/","tags":"","title":"Set Item With Value"},{"body":"\r\rSet Item With Value (Cortex.Blocks.Lists.SetItem.SetItemWithValueBlock`2)\nDescription Sets the specified Occurrence of an item matching a Value in a List to a New Value.\nExamples Set the first Occurrence of an item matching a Value in a List to a New Value This example will attempt to set the first occurrence of an item matching the value 1 in [1, 2, 3, 3, 2, 1] to 10.\nProperties    Property Value Notes     List ($)List, with value [1, 2, 3, 3, 2, 1] ($)List is a variable of type IList\u003cInt32\u003e   Value ($)Value, with value 1 ($)Value is a variable of type Int32   New Value ($)NewValue, with value 10 ($)NewValue is a variable of type Int32   Occurrence ($)Occurrence, with value 1 ($)Occurrence is a variable of type Int32    Result An Occurrence of 1 means set the first occurrence; 2 means second etc.\nAttempting to set the first occurrence of an item matching the value 1 in [1, 2, 3, 3, 2, 1] to 10 results in the variable ($)List being updated to the following:\n[10, 2, 3, 3, 2, 1]  Set the last Occurrence of an item matching a Value in a List to a New Value This example will attempt to set the last occurrence of an item matching the value 1 in [1, 2, 3, 3, 2, 1] to 10.\nProperties    Property Value Notes     List ($)List, with value [1, 2, 3, 3, 2, 1] ($)List is a variable of type IList\u003cInt32\u003e   Value ($)Value, with value 1 ($)Value is a variable of type Int32   New Value ($)NewValue, with value 10 ($)NewValue is a variable of type Int32   Occurrence ($)Occurrence, with value -1 ($)Occurrence is a variable of type Int32    Result An Occurrence of -1, means set the last occurrence; -2 means second last etc.\nAttempting to set the last occurrence of an item matching the value 1 in [1, 2, 3, 3, 2, 1] to 10 results in the variable ($)List being updated to the following:\n[1, 2, 3, 3, 2, 10]  Properties List The List to set the specified Occurrence of matching item in.\nItems are considered matching if they have the specified Value.\nList can be any IList\u003cTItem\u003e, where TItem represents the type of items in the List.\n         Data Type IList\u003cTItem\u003e   Property Type InputOutput   Default Value ($)List with value []    Value The Value the item to set must match.\nFor information and examples of how it is determined whether an item matches a specified value, please see Object Equality.\n         Data Type TItem   Property Type Input   Default Value ($)Value with value null    New Value The New Value to set the specified Occurrence of matching item in List to.\n         Data Type TItem   Property Type Input   Default Value ($)NewValue with value null    Occurrence The Occurrence of matching item to set in the List.\nItems are considered matching if they have the specified Value.\nFor information about supported values for the Occurrence property and examples of how it can be used, please see Occurrences.\n         Data Type Int32   Property Type Input   Default Value ($)Occurrence with value 1    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     CannotModifyReadOnlyListException Thrown when List is read-only.   InvalidPropertyValueException Thrown when Value or New Value are null and List only accepts non-nullable value types.   PropertyNullException Thrown when List is null.    Remarks Item Equality For information and examples of how it is determined whether an item matches a specified value, please see Object Equality.\nOccurrences For information about supported values for the Occurrence property and examples of how it can be used, please see Occurrences.\nEmpty List If List is empty (i.e. []) there is nothing to set, so no operation is performed.\nNo items matching Value, or Occurrence is not present If List does not contain items matching the specified Value or the specified Occurrence is not present, there is nothing to set, so no operation is performed.\nDefining lists using literal syntax For information about how to define lists using literal syntax, see List Literals.\nDefining lists using expression syntax For information about how to define lists using expression syntax, see List Expressions.\nLists containing items of a single data type vs multiple data types For information about the different types of lists, including those that can contain only a single type of item, and those that can contain multiple types of item, see Lists.\n","categories":"","description":"Sets the specified occurrence of an item matching a value in a List to a new value.","excerpt":"Sets the specified occurrence of an item matching a value in a List to a new value.","ref":"/docs/reference/blocks/lists/set-item/set-item-with-value-block-2/","tags":"","title":"Set Item With Value"},{"body":"","categories":"","description":"Set an item or multiple items in a dictionary to a new value.","excerpt":"Set an item or multiple items in a dictionary to a new value.","ref":"/docs/reference/blocks/dictionaries/set-item/","tags":"","title":"Set Item(s)"},{"body":"","categories":"","description":"Set an item or multiple items in a list to a new value.","excerpt":"Set an item or multiple items in a list to a new value.","ref":"/docs/reference/blocks/lists/set-item/","tags":"","title":"Set Item(s)"},{"body":"\r\rSet Items At Beginning (Cortex.Blocks.Lists.SetItem.SetItemsAtBeginningBlock`2)\nDescription Sets the items at the beginning of a List to New Values.\nExamples Set the items at the beginning of a List to New Values This example will set the first and second items at the beginning of [\"Some Text\", 1, \"Some More Text\", 2] to [\"Some Modified Text\", 10] respectively.\nProperties    Property Value Notes     List ($)List, with value [\"Some Text\", 1, \"Some More Text\", 2] ($)List is a variable of type IList\u003cdynamic\u003e   New Values ($)NewValues, with value [\"Some Modified Text\", 10] ($)NewValues is a variable of type IEnumerable\u003cdynamic\u003e    Result Setting the first and second items at the beginning of [\"Some Text\", 1, \"Some More Text\", 2] to [\"Some Modified Text\", 10] respectively, results in the variable ($)List being updated to the following:\n[\"Some Modified Text\", 10, \"Some More Text\", 2]  Properties List The List to set the items in.\nList can be any IList\u003cTItem\u003e, where TItem represents the type of items in the List.\n         Data Type IList\u003cTItem\u003e   Property Type InputOutput   Default Value ($)List with value []    New Values The New Values to set the items at the beginning of List to.\nThe number of items in New Values determines the number of items that will be set at the beginning of List. One item means only the first item is set, two items means the first and second items are set etc.\nThe first item in List will be set to the first value in New Values; the second item in List will be set to the second value in New Values etc.\n         Data Type IEnumerable\u003cTItem\u003e   Property Type Input   Default Value ($)NewValues with value []    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     CannotModifyReadOnlyListException Thrown when List is read-only.   PropertyEmptyException Thrown when List contains no items.   PropertyNullException Thrown when List or New Values is null.    Remarks Empty New Values If New Values is empty (i.e. []) there is nothing to set, so no operation is performed.\nDefining lists using literal syntax For information about how to define lists using literal syntax, see List Literals.\nDefining lists using expression syntax For information about how to define lists using expression syntax, see List Expressions.\nLists containing items of a single data type vs multiple data types For information about the different types of lists, including those that can contain only a single type of item, and those that can contain multiple types of item, see Lists.\n","categories":"","description":"Sets the items at the beginning of a List to new values.","excerpt":"Sets the items at the beginning of a List to new values.","ref":"/docs/reference/blocks/lists/set-item/set-items-at-beginning-block-2/","tags":"","title":"Set Items At Beginning"},{"body":"\r\rSet Items At End (Cortex.Blocks.Lists.SetItem.SetItemsAtEndBlock`2)\nDescription Sets the items at the end of a List to New Values.\nExamples Set the items at the end of a List to New Values This example will set the second last and last items at the end of [\"Some Text\", 1, \"Some More Text\", 2] to [\"Some Modified Text\", 10] respectively.\nProperties    Property Value Notes     List ($)List, with value [\"Some Text\", 1, \"Some More Text\", 2] ($)List is a variable of type IList\u003cdynamic\u003e   New Values ($)NewValues, with value [\"Some Modified Text\", 10] ($)NewValues is a variable of type IEnumerable\u003cdynamic\u003e    Result Setting the second last and last items at the end of [\"Some Text\", 1, \"Some More Text\", 2] to [\"Some Modified Text\", 10] respectively, results in the variable ($)List being updated to the following:\n[\"Some Text\", 1, \"Some Modified Text\", 10]  Properties List The List to set the items in.\nList can be any IList\u003cTItem\u003e, where TItem represents the type of items in the List.\n         Data Type IList\u003cTItem\u003e   Property Type InputOutput   Default Value ($)List with value []    New Values The New Values to set the items at the end of List to.\nThe number of items in New Values determines the number of items that will be set at the end of List. One item means only the last item is set, two items means the second last and last items are set etc.\nThe last item in List will be set to the last value in New Values; the second last item in List will be set to the second last value in New Values etc.\n         Data Type IEnumerable\u003cTItem\u003e   Property Type Input   Default Value ($)NewValues with value []    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     CannotModifyReadOnlyListException Thrown when List is read-only.   PropertyEmptyException Thrown when List contains no items.   PropertyNullException Thrown when List or New Values is null.    Remarks Empty New Values If New Values is empty (i.e. []) there is nothing to set, so no operation is performed.\nDefining lists using literal syntax For information about how to define lists using literal syntax, see List Literals.\nDefining lists using expression syntax For information about how to define lists using expression syntax, see List Expressions.\nLists containing items of a single data type vs multiple data types For information about the different types of lists, including those that can contain only a single type of item, and those that can contain multiple types of item, see Lists.\n","categories":"","description":"Sets the items at the end of a List to new values.","excerpt":"Sets the items at the end of a List to new values.","ref":"/docs/reference/blocks/lists/set-item/set-items-at-end-block-2/","tags":"","title":"Set Items At End"},{"body":"\r\rSet Items At Index (Cortex.Blocks.Lists.SetItem.SetItemsAtIndexBlock`2)\nDescription Sets the items at the specified Index of a List to New Values.\nExamples Set the Items at the first Index (i.e. 0) of a List to New Values This example will set the 2 items starting at index 0 of [\"Some Text\", 1, \"Some More Text\", 2] to [\"Some Modified Text\", 10] respectively.\nProperties    Property Value Notes     List ($)List, with value [\"Some Text\", 1, \"Some More Text\", 2] ($)List is a variable of type IList\u003cdynamic\u003e   New Values ($)NewValues, with value [\"Some Modified Text\", 10] ($)NewValues is a variable of type IEnumerable\u003cdynamic\u003e   Index ($)Index, with value 0 ($)Index is a variable of type Int32    Result Setting the two items at index 0 of [\"Some Text\", 1, \"Some More Text\", 2] to [\"Some Modified Text\", 10] respectively, results in the variable ($)List being updated to the following:\n[\"Some Modified Text\", 10, \"Some More Text\", 2]  Properties List The List to set the items in.\nList can be any IList\u003cTItem\u003e, where TItem represents the type of items in the List.\n         Data Type IList\u003cTItem\u003e   Property Type InputOutput   Default Value ($)List with value []    New Values The New Values to set the items at the specified Index of List to.\nThe number of items in New Values determines the number of items that will be set at the end of List. One item means one item is set, two items means two items are set etc.\nThe item at Index of List will be set to the first value in New Values; the item at Index + 1 of List will be set to the second value in New Values etc.\n         Data Type IEnumerable\u003cTItem\u003e   Property Type Input   Default Value ($)NewValues with value []    Index The Index to start setting the items at. This is an inclusive index, which means the item at the specified index will be included.\nValid values are between and including 0 and the total count of items in the List - 1.\nFor information about what an index is, please see Indexes.\n         Data Type Int32   Property Type Input   Default Value ($)Index with value 0    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     CannotModifyReadOnlyListException Thrown when List is read-only.   PropertyEmptyException Thrown when New Values contains no items.   PropertyNullException Thrown when List or New Values is null.   PropertyValueOutOfRangeException Thrown when Index is less than 0 or greater than the count of items in List - 1.    Thrown when Index + count of items in New Values is greater than the count of items in the List - 1.    Remarks Index is inclusive The Index is an inclusive index, which means the item at the index will be included in the set items.\nDefining lists using literal syntax For information about how to define lists using literal syntax, see List Literals.\nDefining lists using expression syntax For information about how to define lists using expression syntax, see List Expressions.\nLists containing items of a single data type vs multiple data types For information about the different types of lists, including those that can contain only a single type of item, and those that can contain multiple types of item, see Lists.\n","categories":"","description":"Sets the items at the specified index of a List to new values.","excerpt":"Sets the items at the specified index of a List to new values.","ref":"/docs/reference/blocks/lists/set-item/set-items-at-index-block-2/","tags":"","title":"Set Items At Index"},{"body":"\r\rSet Items At Indexes (Cortex.Blocks.Lists.SetItem.SetItemsAtIndexesBlock`2)\nDescription Sets the items at each of the specified Indexes of a List to New Values.\nExamples Sets items at the first and third Indexes (i.e. [0, 2]) of a List to New Values This example will set items at indexes 0 and 2 of [\"Some Text\", 1, \"Some More Text\", 2] to [\"Some Modified Text\", \"Some More Modified Text\"] respectively.\nProperties    Property Value Notes     List ($)List, with value [\"Some Text\", 1, \"Some More Text\", 2] ($)List is a variable of type IList\u003cdynamic\u003e   New Values ($)NewValues, with value [\"Some Modified Text\", \"Some More Modified Text\"] ($)NewValues is a variable of type IEnumerable\u003cString\u003e   Indexes ($)Indexes, with value [0, 2] ($)Indexes is a variable of type IEnumerable\u003cInt32\u003e    Result Setting items at indexes 0 and 2 of [\"Some Text\", 1, \"Some More Text\", 2] to [\"Some Modified Text\", \"Some More Modified Text\"] respectively, results in the variable ($)List being updated to the following:\n[\"Some Modified Text\", 1, \"Some More Modified Text\", 2]  Properties List The List to set the items in.\nList can be any IList\u003cTItem\u003e, where TItem represents the type of items in the List.\n         Data Type IList\u003cTItem\u003e   Property Type InputOutput   Default Value ($)List with value []    New Values The New Values to set the items at the specified Indexes of List to.\nThe number of items in New Values must match the number of items in Indexes.\nThe List item at the first index in Indexes will be set to the first value in New Values; the List item at the second index in Indexes will be set to the second value in New Values etc.\n         Data Type IEnumerable\u003cTItem\u003e   Property Type Input   Default Value ($)NewValues with value []    Indexes The Indexes of the items to set.\nValid values are between and including 0 and the total count of items in the List - 1.\nFor information about what an index is, please see Indexes.\n         Data Type IEnumerable\u003cInt32\u003e   Property Type Input   Default Value ($)Indexes with value []    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     CannotModifyReadOnlyListException Thrown when List is read-only.   DuplicateValueException Thrown when Indexes contains duplicate values.   PropertyItemCountException Thrown when the count of items in New Values and the count of items in Indexes are not the same.   PropertyNullException Thrown when List or New Values or Indexes is null.   PropertyValueOutOfRangeException Thrown when Indexes contains no values.    Thrown when any index in Indexes is less than 0 or greater than the count of items in List - 1.    Remarks Defining lists using literal syntax For information about how to define lists using literal syntax, see List Literals.\nDefining lists using expression syntax For information about how to define lists using expression syntax, see List Expressions.\nLists containing items of a single data type vs multiple data types For information about the different types of lists, including those that can contain only a single type of item, and those that can contain multiple types of item, see Lists.\n","categories":"","description":"Sets the items at each of the specified indexes of a List to new values.","excerpt":"Sets the items at each of the specified indexes of a List to new values.","ref":"/docs/reference/blocks/lists/set-item/set-items-at-indexes-block-2/","tags":"","title":"Set Items At Indexes"},{"body":"\r\rSet Items With Key (Cortex.Blocks.Dictionaries.SetItem.SetItemsWithKeyBlock`3)\nDescription Sets all items with the given Key in a Dictionary to a New Value.\nExamples Sets all items with a Key in a Dictionary to a New Value Typically keys are simple data types such as String, Int32, Boolean, and for these a dictionary cannot the same key value more than once. This is due to how the data type’s object equality is implemented (two items are considered equal if they have the same value rather than being the same object reference).\nHowever, other data types such as IList\u003cInt32\u003e can also be used as keys. For these data types, object equality only considers two items equal if they are the same reference; it does not care about whether they have the same value. Therefore, it is possible to have the same key value more than once, and as a result you should be able to set all items with that key.\nThis example will illustrate this, by attempting to set all items with the key [1] in {[1] : 1, [2] : 2, [3] : 3, [3] : 3, [2] : 2, [1] : 1} to 10.\nProperties    Property Value Notes     Dictionary ($)Dictionary, with value {[1] : 1, [2] : 2, [3] : 3, [3] : 3, [2] : 2, [1] : 1} ($)Dictionary is a variable of type IDictionary\u003cIList\u003cInt32\u003e, Int32\u003e   Key ($)Key, with value [1] ($)Key is a variable of type IList\u003cInt32\u003e   New Value ($)NewValue, with value 10 ($)NewValue is a variable of type Int32    Result Attempting to set all items with the key [1] in {[1] : 1, [2] : 2, [3] : 3, [3] : 3, [2] : 2, [1] : 1} to 10 results in the variable ($)Dictionary being updated to the following:\n{[1] : 10, [2] : 2, [3] : 3, [3] : 3, [2] : 2, [1] : 10}  Properties Dictionary The Dictionary to set all items with the given Key in.\nItems are considered matching if they have the specified Key.\nDictionary can be any IDictionary\u003cTKey, TItem\u003e, where TKey represents the type of keys used to lookup items in the Dictionary, and TItem represents the type of items in the Dictionary.\n         Data Type IDictionary\u003cTKey, TItem\u003e   Property Type InputOutput   Default Value ($)Dictionary with value {}    Key The Key the items to set must have.\nFor information and examples of how it is determined whether an item has a specified key, please see Object Equality.\nFor information about what a key is, please see Keys.\n         Data Type TKey   Property Type Input   Default Value ($)Key with value null    New Value The New Value to set all items with the given Key in Dictionary to.\n         Data Type TItem   Property Type Input   Default Value ($)NewValue with value null    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     CannotModifyReadOnlyDictionaryException Thrown when Dictionary is read-only.   InvalidPropertyValueException Thrown when New Value is null and Dictionary only accepts non-nullable value types.   KeyNotPresentException Thrown when the Key is not present in the Dictionary.   PropertyNullException Thrown when Dictionary or Key are null.    Remarks Key Equality For information and examples of how it is determined whether a key is already present, please see Object Equality.\nDefining dictionaries using literal syntax For information about how to define dictionaries using literal syntax, see Dictionary Literals.\nDefining dictionaries using expression syntax For information about how to define dictionaries using expression syntax, see Dictionary Expressions.\nDictionaries containing items with same data types vs different data types For information about the different types of dictionaries, including those that can contain only the same type of item, and those that can contain different types of item, see Dictionaries.\n","categories":"","description":"Sets all items with the given key in a Dictionary to a new value.","excerpt":"Sets all items with the given key in a Dictionary to a new value.","ref":"/docs/reference/blocks/dictionaries/set-item/set-items-with-key-block-3/","tags":"","title":"Set Items With Key"},{"body":"\r\rSet Items With Keys (Cortex.Blocks.Dictionaries.SetItem.SetItemsWithKeysBlock`3)\nDescription Sets all items with any of the given Keys in a Dictionary to New Values.\nExamples Set all items with any of the given Keys in a Dictionary to New Values This example will attempt to set all items with any of the keys [\"Key1\", \"Key2\"] in {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} to [10, 20] respectively.\nProperties    Property Value Notes     Dictionary ($)Dictionary, with value {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} ($)Dictionary is a variable of type IDictionary\u003cString, Int32\u003e   Keys ($)Keys, with value [\"Key1\", \"Key2\"] ($)Keys is a variable of type IEnumerable\u003cString\u003e   NewValues ($)NewValues, with value [10, 20] ($)NewValues is a variable of type IEnumerable\u003cInt32\u003e    Result Attempting to set all items with any of the keys [\"Key1\", \"Key2\"] in {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} to [10, 20] respectively, results in the variable ($)Dictionary being updated to the following:\n{\"Key1\" : 10, \"Key2\" : 20, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1}  Properties Dictionary The Dictionary to set all matching items in.\nItems are considered matching if they have any of the specified Keys.\nDictionary can be any IDictionary\u003cTKey, TItem\u003e, where TKey represents the type of keys used to lookup items in the Dictionary, and TItem represents the type of items in the Dictionary.\n         Data Type IDictionary\u003cTKey, TItem\u003e   Property Type InputOutput   Default Value ($)Dictionary with value {}    Keys The Keys the items to set must have one of.\nFor information and examples of how it is determined whether an item has a specified key, please see Object Equality.\n         Data Type IEnumerable\u003cTKey\u003e   Property Type Input   Default Value ($)Keys with value []    New Values The New Values to set the items with the corresponding Keys in Dictionary to.\nThe number of items in New Values must match the number of items in Keys.\nDictionary items with the first key in Keys will be set to the first value in New Values; Dictionary items with the second key in Keys will be set to the second value in New Values etc.\n         Data Type IEnumerable\u003cTItem\u003e   Property Type Input   Default Value ($)NewValues with value []    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     ArgumentNullException Thrown when any key in Keys is null   CannotModifyReadOnlyDictionaryException Thrown when Dictionary is read-only.   KeysNotPresentException Thrown when any key in the Keys is not present in the Dictionary.   PropertyItemCountException Thrown when the count of items in Keys and the count of items in New Values are not the same, or neither contain any items.   PropertyNullException Thrown when Dictionary or Keys or New Values are null.    Remarks Key Equality For information and examples of how it is determined whether an item has a specified key, please see Object Equality.\nDefining dictionaries using literal syntax For information about how to define dictionaries using literal syntax, see Dictionary Literals.\nDefining dictionaries using expression syntax For information about how to define dictionaries using expression syntax, see Dictionary Expressions.\nDictionaries containing items with same data types vs different data types For information about the different types of dictionaries, including those that can contain only the same type of item, and those that can contain different types of item, see Dictionaries.\n","categories":"","description":"Sets all items with any of the given keys in a Dictionary to new values.","excerpt":"Sets all items with any of the given keys in a Dictionary to new values.","ref":"/docs/reference/blocks/dictionaries/set-item/set-items-with-keys-block-3/","tags":"","title":"Set Items With Keys"},{"body":"\r\rSet Items With Value (Cortex.Blocks.Dictionaries.SetItem.SetItemsWithValueBlock`3)\nDescription Sets all items matching a Value in a Dictionary to a New Value.\nExamples Set all items matching a Value in a Dictionary to a New Value This example will attempt to set all items matching the value 1 in {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} to 10.\nProperties    Property Value Notes     Dictionary ($)Dictionary, with value {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} ($)Dictionary is a variable of type IDictionary\u003cString, Int32\u003e   Value ($)Value, with value 1 ($)Value is a variable of type Int32   New Value ($)NewValue, with value 10 ($)NewValue is a variable of type Int32    Result Attempting to set all items matching the value 1 in {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} to 10 results in the variable ($)Dictionary being updated to the following:\n{\"Key1\" : 10, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 10}  Properties Dictionary The Dictionary to set all matching items in.\nItems are considered matching if they have the specified Value.\nDictionary can be any IDictionary\u003cTKey, TItem\u003e, where TKey represents the type of keys used to lookup items in the Dictionary, and TItem represents the type of items in the Dictionary.\n         Data Type IDictionary\u003cTKey, TItem\u003e   Property Type InputOutput   Default Value ($)Dictionary with value {}    Value The Value the items to set must match.\nFor information and examples of how it is determined whether an item matches a specified value, please see Object Equality.\n         Data Type TItem   Property Type Input   Default Value ($)Value with value null    New Value The New Value to set all matching items in Dictionary to.\n         Data Type TItem   Property Type Input   Default Value ($)NewValue with value null    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     CannotModifyReadOnlyDictionaryException Thrown when Dictionary is read-only.   InvalidPropertyValueException Thrown when Value or New Value are null and Dictionary only accepts non-nullable value types.   PropertyNullException Thrown when Dictionary is null.    Remarks Item Equality For information and examples of how it is determined whether an item matches a specified value, please see Object Equality.\nEmpty Dictionary If Dictionary is empty (i.e. {}) there is nothing to set, so no operation is performed.\nNo items matching Value If Dictionary does not contain items matching the specified Value, there is nothing to set, so no operation is performed.\nDefining dictionaries using literal syntax For information about how to define dictionaries using literal syntax, see Dictionary Literals.\nDefining dictionaries using expression syntax For information about how to define dictionaries using expression syntax, see Dictionary Expressions.\nDictionaries containing items with same data types vs different data types For information about the different types of dictionaries, including those that can contain only the same type of item, and those that can contain different types of item, see Dictionaries.\n","categories":"","description":"Sets all items matching a value in a Dictionary to a new value.","excerpt":"Sets all items matching a value in a Dictionary to a new value.","ref":"/docs/reference/blocks/dictionaries/set-item/set-items-with-value-block-3/","tags":"","title":"Set Items With Value"},{"body":"\r\rSet Items With Value (Cortex.Blocks.Lists.SetItem.SetItemsWithValueBlock`2)\nDescription Sets all items matching a Value in a List to a New Value.\nExamples Set all items matching a Value in a List to a New Value This example will attempt to set all items matching the value 1 in [1, 2, 3, 3, 2, 1] to 10.\nProperties    Property Value Notes     List ($)List, with value [1, 2, 3, 3, 2, 1] ($)List is a variable of type IList\u003cInt32\u003e   Value ($)Value, with value 1 ($)Value is a variable of type Int32   New Value ($)NewValue, with value 10 ($)NewValue is a variable of type Int32    Result Attempting to set all items matching the value 1 in [1, 2, 3, 3, 2, 1] to 10 results in the variable ($)List being updated to the following:\n[10, 2, 3, 3, 2, 10]  Properties List The List to set all matching items in.\nItems are considered matching if they have the specified Value.\nList can be any IList\u003cTItem\u003e, where TItem represents the type of items in the List.\n         Data Type IList\u003cTItem\u003e   Property Type InputOutput   Default Value ($)List with value []    Value The Value the items to set must match.\nFor information and examples of how it is determined whether an item matches a specified value, please see Object Equality.\n         Data Type TItem   Property Type Input   Default Value ($)Value with value null    New Value The New Value to set all matching items in List to.\n         Data Type TItem   Property Type Input   Default Value ($)NewValue with value null    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     CannotModifyReadOnlyListException Thrown when List is read-only.   InvalidPropertyValueException Thrown when Value or New Value are null and List only accepts non-nullable value types.   PropertyNullException Thrown when List is null.    Remarks Item Equality For information and examples of how it is determined whether an item matches a specified value, please see Object Equality.\nEmpty List If List is empty (i.e. []) there is nothing to set, so no operation is performed.\nNo items matching Value If List does not contain items matching the specified Value, there is nothing to set, so no operation is performed.\nDefining lists using literal syntax For information about how to define lists using literal syntax, see List Literals.\nDefining lists using expression syntax For information about how to define lists using expression syntax, see List Expressions.\nLists containing items of a single data type vs multiple data types For information about the different types of lists, including those that can contain only a single type of item, and those that can contain multiple types of item, see Lists.\n","categories":"","description":"Sets all items matching a value in a List to a new value.","excerpt":"Sets all items matching a value in a List to a new value.","ref":"/docs/reference/blocks/lists/set-item/set-items-with-value-block-2/","tags":"","title":"Set Items With Value"},{"body":"\r\rSet Items With Values (Cortex.Blocks.Dictionaries.SetItem.SetItemsWithValuesBlock`3)\nDescription Set all items matching one of the specified Values in a Dictionary to New Values.\nExamples Set all items matching one of the specified Values in a Dictionary to New Values This example will attempt to set all items matching one of the values [1, 2] in {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} to [10, 20] respectively.\nProperties    Property Value Notes     Dictionary ($)Dictionary, with value {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} ($)Dictionary is a variable of type IDictionary\u003cString, Int32\u003e   Values ($)Values, with value [1, 2] ($)Values is a variable of type IEnumerable\u003cInt32\u003e   NewValues ($)NewValues, with value [10, 20] ($)NewValues is a variable of type IEnumerable\u003cInt32\u003e    Result Attempting to set all items matching one of the values [1, 2] in {\"Key1\" : 1, \"Key2\" : 2, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 2, \"Key6\" : 1} to [10, 20] respectively, results in the variable ($)Dictionary being updated to the following:\n{\"Key1\" : 10, \"Key2\" : 20, \"Key3\" : 3, \"Key4\" : 3, \"Key5\" : 20, \"Key6\" : 10}  Properties Dictionary The Dictionary to set all matching items in.\nItems are considered matching if they have one of the specified Values.\nDictionary can be any IDictionary\u003cTKey, TItem\u003e, where TKey represents the type of keys used to lookup items in the Dictionary, and TItem represents the type of items in the Dictionary.\n         Data Type IDictionary\u003cTKey, TItem\u003e   Property Type InputOutput   Default Value ($)Dictionary with value {}    Values The Values the items to set must match one of.\nFor information and examples of how it is determined whether an item matches a specified value, please see Object Equality.\n         Data Type IEnumerable\u003cTItem\u003e   Property Type Input   Default Value ($)Values with value []    New Values The New Values to set the items matching the corresponding Values in Dictionary to.\nThe number of items in New Values must match the number of items in Values.\nDictionary items matching the first value in Values will be set to the first value in New Values; Dictionary items matching the second value in Values will be set to the second value in New Values etc.\n         Data Type IEnumerable\u003cTItem\u003e   Property Type Input   Default Value ($)NewValues with value []    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     CannotModifyReadOnlyDictionaryException Thrown when Dictionary is read-only.   DuplicateValueException Thrown when Values contains duplicate values.   PropertyItemCountException Thrown when the count of items in Values and the count of items in New Values are not the same, or neither contain any items.   PropertyNullException Thrown when Dictionary or Values or New Values are null.    Remarks Item Equality For information and examples of how it is determined whether an item matches a specified value, please see Object Equality.\nEmpty Dictionary If Dictionary is empty (i.e. {}) there is nothing to set, so no operation is performed.\nNo items matching a specified value in Values If Dictionary does not contain items matching one of the specified Values, there is nothing to set for that value.\nNo items matching Values If Dictionary does not contain items matching any of the specified Values, there is nothing to set, so no operation is performed.\nDefining dictionaries using literal syntax For information about how to define dictionaries using literal syntax, see Dictionary Literals.\nDefining dictionaries using expression syntax For information about how to define dictionaries using expression syntax, see Dictionary Expressions.\nDictionaries containing items with same data types vs different data types For information about the different types of dictionaries, including those that can contain only the same type of item, and those that can contain different types of item, see Dictionaries.\n","categories":"","description":"Sets all items matching one of the specified values in a Dictionary to new values.","excerpt":"Sets all items matching one of the specified values in a Dictionary to new values.","ref":"/docs/reference/blocks/dictionaries/set-item/set-items-with-values-block-3/","tags":"","title":"Set Items With Values"},{"body":"\r\rSet Items With Values (Cortex.Blocks.Lists.SetItem.SetItemsWithValuesBlock`2)\nDescription Set all items matching one of the specified Values in a List to New Values.\nExamples Set all items matching one of the specified Values in a List to New Values This example will attempt to set all items matching one of the values [1, 2] in [1, 2, 3, 3, 2, 1] to [10, 20] respectively.\nProperties    Property Value Notes     List ($)List, with value [1, 2, 3, 3, 2, 1] ($)List is a variable of type IList\u003cInt32\u003e   Values ($)Values, with value [1, 2] ($)Values is a variable of type IEnumerable\u003cInt32\u003e   NewValues ($)NewValues, with value [10, 20] ($)NewValues is a variable of type IEnumerable\u003cInt32\u003e    Result Attempting to set all items matching one of the values [1, 2] in [1, 2, 3, 3, 2, 1] to [10, 20] respectively, results in the variable ($)List being updated to the following:\n[10, 20, 3, 3, 20, 10]  Properties List The List to set all matching items in.\nItems are considered matching if they have one of the specified Values.\nList can be any IList\u003cTItem\u003e, where TItem represents the type of items in the List.\n         Data Type IList\u003cTItem\u003e   Property Type InputOutput   Default Value ($)List with value []    Values The Values the items to set must match one of.\nFor information and examples of how it is determined whether an item matches a specified value, please see Object Equality.\n         Data Type IEnumerable\u003cTItem\u003e   Property Type Input   Default Value ($)Values with value []    New Values The New Values to set the items matching the corresponding Values in List to.\nThe number of items in New Values must match the number of items in Values.\nList items matching the first value in Values will be set to the first value in New Values; List items matching the second value in Values will be set to the second value in New Values etc.\n         Data Type IEnumerable\u003cTItem\u003e   Property Type Input   Default Value ($)NewValues with value []    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     CannotModifyReadOnlyListException Thrown when List is read-only.   DuplicateValueException Thrown when Values contains duplicate values.   PropertyItemCountException Thrown when the count of items in Values and the count of items in New Values are not the same, or neither contain any items.   PropertyNullException Thrown when List or Values or New Values are null.    Remarks Item Equality For information and examples of how it is determined whether an item matches a specified value, please see Object Equality.\nEmpty List If List is empty (i.e. []) there is nothing to set, so no operation is performed.\nNo items matching a specified value in Values If List does not contain items matching one of the specified Values, there is nothing to set for that value.\nNo items matching Values If List does not contain items matching any of the specified Values, there is nothing to set, so no operation is performed.\nDefining lists using literal syntax For information about how to define lists using literal syntax, see List Literals.\nDefining lists using expression syntax For information about how to define lists using expression syntax, see List Expressions.\nLists containing items of a single data type vs multiple data types For information about the different types of lists, including those that can contain only a single type of item, and those that can contain multiple types of item, see Lists.\n","categories":"","description":"Sets all items matching one of the specified values in a List to new values.","excerpt":"Sets all items matching one of the specified values in a List to new values.","ref":"/docs/reference/blocks/lists/set-item/set-items-with-values-block-2/","tags":"","title":"Set Items With Values"},{"body":"","categories":"","description":"Blocks that are used to set Variables.","excerpt":"Blocks that are used to set Variables.","ref":"/docs/reference/blocks/variables/set-variable/","tags":"","title":"Set Variable"},{"body":"\r\rSet Variable (Cortex.Blocks.Variables.SetVariable.SetVariableBlock)\nDescription Sets a Variable to a given Value.\nAny type of Value can be set, including Lists, Dictionaries, Structures etc.\nIf a Variable is set to the Value of another Variable then they will have the same reference. This means that if either Variable has new items added to it, items updated in it, or items removed from it, then both will be affected, please see Working with References for more information.\nExamples Setting a Variable This example will set a Variable to a list of [[1, 2, 3], [4, 5, 6]].\nProperties    Property Value Notes     Value Value, with value [[1, 2, 3], [4, 5, 6]] The Value is of type List\u003cList\u003cInt32\u003e\u003e   Variable ($)Variable, with no value ($)Variable is a variable that will be set to the type of the value (i.e. List\u003cList\u003cInt32\u003e\u003e)    Result Setting ($)Variable to [[1, 2, 3], [4, 5, 6]] results in the variable ($)Variable being updated to the following:\n[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]  Overwriting a Variable This example will overwrite an exisiting Variable that has the text value \"A text value\", to a list value of [1, 2, 3].\nProperties    Property Value Notes     Value Value, with value [1, 2, 3] The Value is of type List\u003cInt32\u003e   Variable ($)Variable, with value \"A text value\" ($)Variable is a variable that will be set to the type of the value (i.e. List\u003cInt32\u003e)    Result Setting ($)Variable to [1, 2, 3] results in the variable ($)Variable being updated to the following:\n[ 1, 2, 3 ]  Note that ($)Variable is overwritten, any data previously stored within the variable will be lost.\nOverwriting a Variable Property This example will update the Items property within an existing Variable that has the text value \"A text value\", to a list of [1, 2, 3].\n($)Variable has an initial value of:\n{ \"Items\": \"A text value\", } Properties    Property Value Notes     Value Value, with value [1, 2, 3] The Value is of type List\u003cInt32\u003e   Variable ($)Variable.Items, with value \"A text value\" ($)Variable.Items is a property within variable that will be set to the type of the value (i.e. List\u003cInt32\u003e)    Result Setting the ($)Variable.Items property to [1, 2, 3] results in the ($)Variable being updated to the following:\n{ \"Items\": [ 1, 2, 3 ] } Note that ($)Variable.Items is overwritten, any data previously stored within the property will be lost.\n Properties Value The Value to set the Variable to.\nA Variable can be set to any type of object, including Lists, Dictionaries, Structures etc.\n         Data Type TValue   Property Type Input   Default Value ($)Value with value null    Variable The Variable that will be set to the Value.\nIf a Variable is set to the Value of another Variable then they will have the same reference, for more information see Working with References.\n         Data Type TValue   Property Type Output   Default Value ($)Variable with no value    Exceptions No exceptions are thrown by the block.\nRemarks Initialising Variables If the Set Variable block is used to set a Variable that is not initialised, the Variable will be initialised with the given Value when the block is run.\nOverwriting Variables If the Set Variable block is used to set a Variable that is already initialised and has a Value, the Variable will be overwritten with the new Value when the block is run.\nA property of a Variable can also be overwritten, instead of the whole object. This is shown in the example above, Overwriting a Variable Property\nVariable Scope Each workspace has its own scope; as a result, variables can be defined that only exist and are accessible in this workspace and any of its sub-workspaces. On exiting a workspace any variables defined for the workspace’s scope are deleted.\nThe Set Variable block can only set a Variable that is accessible from its scope.\nFor information about variables and scope, please see Working with Variables.\nNull Value If Value is not provided or is set to null, Variable will be set to null.\n","categories":"","description":"Sets a Variable to a given Value.","excerpt":"Sets a Variable to a given Value.","ref":"/docs/reference/blocks/variables/set-variable/set-variable-block-1/","tags":"","title":"Set Variable"},{"body":"Single (System.Single)\nSummary The Single data type is used to represent a fractional, or very large or small number from -3.402823e+38 through 3.402823e+38.\n         Category: Numbers   Name: Single   Full Name: System.Single   Alias: float   Description: A fractional, or very large or small number from -3.402823e+38 through 3.402823e+38   Size: 4 bytes   Default Value: 0   Can be used as: Double, Object, dynamic   Can be cast to: Int16, as long as value is from -32,768 through 32,767 (e.g. (Int16)32767 or (System.Int16)32767 or (short)32767)    Int32, as long as value is from -2,147,483,648 through 2,147,483,647 (e.g. (Int32)2147483647 or (System.Int32)2147483647 or (int)2147483647)    Int64, as long as value is from -9,223,372,036,854,775,808 through 9,223,372,036,854,775,807 (e.g. (Int64)9223372036854775807 or (System.Int64)9223372036854775807 or (long)9223372036854775807)    Remarks Create a Single The following table shows some of the ways that a Single can be created.\n   Method Example Result Editor Support Notes     Use a Single expression 1.0f + 1.0f 2.0 Expression Add    1.0f - 1.0f 0.0 Expression Subtract    1.0f * 1.0f 1.0 Expression Multiply    1.0f / 1.0f 1.0 Expression Divide    Single.MaxValue 3.402823e+38 Expression Maximum value of a Single. See Single.MaxValue    Single.MinValue -3.402823e+38 Expression Minimum value of a Single. See Single.MinValue    Single.Parse(\"1\") 1.0 Expression Attempts to parse text and convert it to a Single value. See Single.Parse    Convert.ToSingle(\"1\") 1.0 Expression Attempts to convert text to a Single value. See Convert.ToSingle    Convert Single to Text The following table shows some of the ways that a Single can be converted to text.\n   Method Example Result Editor Support Notes     Use ToString 1.0f.ToString() \"1\" Expression See Single.ToString    ($)SingleVariable.ToString() where ($)SingleVariable has a Single value of 1.0 \"1\" Expression See Single.ToString   Use Convert.ToString Convert.ToString(1.0f) \"1\" Expression See Convert.ToString    Convert.ToString(($)SingleVariable) where ($)SingleVariable has a Single value of 1.0 \"1\" Expression See Convert.ToString   Use Convert Object To Text block where Object property has a Single value of 1.0 \"1\" N/A See Convert Object To Text   Use Convert Object To Json block where Object property has a Single value of 1.0 \"1.0\" N/A See Convert Object To Json    Property Editor Support  The Expression Editor is available for Input properties where the data type is Single. The Literal Editor is available for Input properties where the data type is Single.  Expression syntax is not supported within the Literal Editor for the Single data type.   The Variable Editor is available for InputOutput and Output properties where the data type is Single.  Known Limitations None\nSee Also Related Types  Int16 Int32 Int64 Double  Related Concepts  Working with Numbers  External Documentation  System.Single  ","categories":"","description":"Used to represent a fractional, or very large or small number from `-3.402823e+38` through `3.402823e+38`.","excerpt":"Used to represent a fractional, or very large or small number from `-3.402823e+38` through `3.402823e+38`.","ref":"/docs/reference/data-types/numbers/single/","tags":"","title":"Single"},{"body":"","categories":"","description":"Split text (using a separator) into a list of values.","excerpt":"Split text (using a separator) into a list of values.","ref":"/docs/reference/blocks/text/split-text/","tags":"","title":"Split Text"},{"body":"\r\rSplit Text (Cortex.Blocks.Text.SplitText.SplitTextBlock)\nDescription Splits Text into a list of String Values, using the given Separator to determine where to split.\nSplit Options can be used to specify how to treat empty entries (i.e. \"\").\nExamples Split Text into a list of String Values using a pipe Separator This example will split the text \"Sunday|Monday|Tuesday|Wednesday|Thursday|Friday|Saturday\" into a list of String values, using the pipe separator (i.e. \"|\") to determine where to split.\nProperties    Property Value Notes     Text ($)Text, with value \"Sunday|Monday|Tuesday|Wednesday|Thursday|Friday|Saturday\" ($)Text is a variable of type String   Separator ($)Separator, with value \"|\" ($)Separator is a variable of type String   Split Options ($)SplitOptions, with value StringSplitOptions.None ($)SplitOptions is a variable of type StringSplitOptions   Values ($)Values, with no value ($)Values is a variable that will be set to an IList\u003cString\u003e    Result Splitting \"Sunday|Monday|Tuesday|Wednesday|Thursday|Friday|Saturday\" using a pipe separator (i.e. \"|\"), results in the variable ($)Values being updated to the following:\n[\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]  Split Text into a list of String Values using a comma Separator (removing empty entries) This example will split the text \"1,2,3,,\" into a list of String values, using the comma separator (i.e. \",\") to determine where to split, and removing empty entries (i.e. \"\").\nProperties    Property Value Notes     Text ($)Text, with value \"1,2,3,,\" ($)Text is a variable of type String   Separator ($)Separator, with value \",\" ($)Separator is a variable of type String   Split Options ($)SplitOptions, with value StringSplitOptions.RemoveEmptyEntries ($)SplitOptions is a variable of type StringSplitOptions   Values ($)Values, with no value ($)Values is a variable that will be set to an IList\u003cString\u003e    Result Splitting \"1,2,3,,\" using a comma separator (i.e. \",\") and removing the last 2 entries which are empty (i.e. \"\"), results in the variable ($)Values being updated to the following:\n[\"1\", \"2\", \"3\"]  Split Text into a list of String Values using a comma Separator (keeping empty entries) This example will split the text \"1,2,3,,\" into a list of String values, using the comma separator (i.e. \",\") to determine where to split, and keeping empty entries (i.e. \"\").\nProperties    Property Value Notes     Text ($)Text, with value \"1,2,3,,\" ($)Text is a variable of type String   Separator ($)Separator, with value \",\" ($)Separator is a variable of type String   Split Options ($)SplitOptions, with value StringSplitOptions.None ($)SplitOptions is a variable of type StringSplitOptions   Values ($)Values, with no value ($)Values is a variable that will be set to an IList\u003cString\u003e    Result Splitting \"1,2,3,,\" using a comma separator (i.e. \",\") and keeping the last 2 entries which are empty, results in the variable ($)Values being updated to the following:\n[\"1\", \"2\", \"3\", \"\", \"\"]  Properties Text The Text to split into Values using the given Separator.\n         Data Type String   Property Type Input   Default Value ($)Text with value \"\"    Separator The Separator used to determine where to split the Text into the Values.\nSeparator can contain zero or more characters.\nThe Separator is not included in the resultant Values.\n         Data Type String   Property Type Input   Default Value ($)Separator with value \"\"    Split Options Split Options used to specify how to treat empty entries (i.e. \"\").\nCurrently supported values for the Split Options property are:\n StringSplitOptions.None (Default) - empty entries are included in Values. StringSplitOptions.RemoveEmptyEntries - empty entries are excluded from Values.           Data Type StringSplitOptions   Property Type Input   Default Value ($)SplitOpions with value StringSplitOptions.None    Values The resultant Values containing an entry for each piece of split text in the order they are defined in Text.\n         Data Type IList\u003cString\u003e   Property Type Output   Default Value ($)Values with no value    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     ArgumentException Thrown when Split Options is not one of the specified StringSplitOptions types (e.g. (StringSplitOptions)10).    Remarks Null or empty Text If Text is null or empty (i.e. \"\"), then null or empty (i.e. \"\") respectively is added as the only entry to Values.\nNull or empty Separator If Separator is null or empty (i.e. \"\"), the value of the variable specified for the Text property is added as the only entry to Values.\nSeparator not found If the Separator is not found in Text, the value of the variable specified for the Text property is added as the only entry to Values.\n","categories":"","description":"Splits text into a list of String values, using the given separator to determine where to split.","excerpt":"Splits text into a list of String values, using the given separator to determine where to split.","ref":"/docs/reference/blocks/text/split-text/split-text-block/","tags":"","title":"Split Text"},{"body":"","categories":"","description":"Blocks that indicate the start of a flow.","excerpt":"Blocks that indicate the start of a flow.","ref":"/docs/reference/blocks/flows/start-flow/","tags":"","title":"Start Flow"},{"body":"\r\rStart Flow (Cortex.Blocks.Flows.StartFlow.StartFlowBlock)\nDescription Indicates the start of a flow.\nThis is always the first block in a flow. It cannot be deleted, and a flow can only contain one of these blocks.\nThe block has no block specific properties, but it does have the Description property that is common to all blocks. This allows users to give each block a description; typically this will be left blank for this block.\nA breakpoint can be added to this block when debugging.\nExamples No examples for the block.\nProperties No properties for the block, other than the Description property that is common to all blocks.\nExceptions No exceptions are thrown by the block.\nRemarks No remarks for the block.\n","categories":"","description":"Indicates the start of a flow.","excerpt":"Indicates the start of a flow.","ref":"/docs/reference/blocks/flows/start-flow/start-flow-block/","tags":"","title":"Start Flow"},{"body":"","categories":"","description":"Blocks that indicate the start of a workspace.","excerpt":"Blocks that indicate the start of a workspace.","ref":"/docs/reference/blocks/workspaces/start-workspace/","tags":"","title":"Start Workspace"},{"body":"\r\rStart Workspace (Cortex.Blocks.Workspaces.StartWorkspace.StartWorkspaceBlock)\nDescription Indicates the start of a workspace; when a flow execution reaches this block it will create a new scope for the workspace.\nThis is always the first block in a workspace. It cannot be deleted, and a workspace can only contain one of these blocks.\nThe block has no block specific properties, but it does have the Description property that is common to all blocks. This allows users to give each block a description; typically this will be left blank for this block.\nA breakpoint can be added to this block when debugging.\nExamples No examples for the block.\nProperties No properties for the block, other than the Description property that is common to all blocks.\nExceptions No exceptions are thrown by the block.\nRemarks Workspace Scope Each workspace has its own scope; as a result, variables can be defined that only exist and are accessible in this workspace and any of its sub-workspaces. On exiting a workspace any variables defined for the workspace’s scope are deleted.\nFor information about variables and scope, please see Working with Variables.\n","categories":"","description":"Indicates the start of a workspace.","excerpt":"Indicates the start of a workspace.","ref":"/docs/reference/blocks/workspaces/start-workspace/start-workspace-block/","tags":"","title":"Start Workspace"},{"body":"String (System.String)\nSummary The String data type is used to represent text.\n         Category: Text   Name: String   Full Name: System.String   Alias: string   Description: A sequence of unicode characters, surrounded by double quotes (e.g. \"This is a string\")   Size: Varies depending upon the number of characters it contains   Default Value: null   Can be used as: IEnumerable, IEnumerable\u003cChar\u003e, Object, dynamic   Can be cast to: N/A    Remarks Create a String The following table shows some of the ways that a String can be created.\n   Method Example Result Editor Support Notes     Declare a String literal \"Hello World!\" \"Hello World!\" Literal, Expression In the Expression Editor the surrounding double quotes (i.e. \"\") are needed (e.g. \"Hello World!\"); in the Literal Editor they are not (e.g. Hello World!). Any double quotes in the Literal Editor will be treated as literal characters that are part of the String.   Use a String expression $\"Hello {($)Variable}!\" where ($)Variable is set to \"World!\" \"Hello World!\" Expression Uses [String Interpolation][]    String.Format(\"Hello {0}!\", ($)Variable) where ($)Variable is set to \"World!\" \"Hello World!\" Expression Uses String.Format    String.Concat(\"Hello\", \" \", \"World!\") \"Hello World!\" Expression Uses String.Concat    String.Join(\" \", {\"Hello\", \"World!\"}) \"Hello World!\" Expression Uses String.Join    \"Hello!\".Insert(5, \" World\") \"Hello World!\" Expression Uses String.Insert    \"Hello\" + \" \" + \"World!\" \"Hello World!\" Expression Uses String Concatenation Operator (i.e. +)    Property Editor Support  The Expression Editor is available for Input properties where the data type is String. The Literal Editor is available for Input properties where the data type is String.  Expression syntax is not supported within the Literal Editor for the String data type.   The Variable Editor is available for InputOutput and Output properties where the data type is String.  Known Limitations None\nSee Also Related Types None\nRelated Concepts  Working with Text  External Documentation  System.String  ","categories":"","description":"Used to represent text.","excerpt":"Used to represent text.","ref":"/docs/reference/data-types/text/string/","tags":"","title":"String"},{"body":"","categories":"","description":"Subtract a time period (Years, Months, Days, Hours, Minutes, Seconds and Milliseconds) from a date time.","excerpt":"Subtract a time period (Years, Months, Days, Hours, Minutes, Seconds and Milliseconds) from a date time.","ref":"/docs/reference/blocks/date-and-time/subtract-time-period/","tags":"","title":"Subtract Time Period"},{"body":"\r\rSubtract Time Period (Cortex.Blocks.DateAndTime.SubtractTimePeriod.SubtractTimePeriodBlock)\nDescription Subtracts a Time Period from the specified Date Time.\nThis block can subtract both positive and negative TimePeriod values.\nExamples Subtract a positive Time Period This example will subtract 1 year from 2022-01-01T00:00:00+00:00.\nProperties    Property Value Notes     Date Time ($)DateTime, with value of DateTimeOffset that has a text representation of 2022-01-01T00:00:00+00:00 ($)DateTime is a variable of type DateTimeOffset   Time Period ($)TimePeriod, with value of {\"Years\": 1, \"Months\": 0, \"Days\": 0, \"Hours\": 0, \"Minutes\": 0, \"Seconds\": 0, \"Milliseconds\": 0} ($)TimePeriod is a variable of type TimePeriod    Result Subtracting 1 year from 2022-01-01T00:00:00+00:00 will result in the variable ($)DateTime being updated. Its text representation will be in the ISO 8601 Standard, which can be seen below:\n\"2021-01-01T00:00:00+00:00\"  Subtract a negative Time Period This example will subtract -1 year from 2021-01-01T00:00:00+00:00.\nProperties    Property Value Notes     Date Time ($)DateTime, with value of DateTimeOffset that has a text representation of 2021-01-01T00:00:00+00:00 ($)DateTime is a variable of type DateTimeOffset   Time Period ($)TimePeriod, with value of {\"Years\": -1, \"Months\": 0, \"Days\": 0, \"Hours\": 0, \"Minutes\": 0, \"Seconds\": 0, \"Milliseconds\": 0} ($)TimePeriod is a variable of type TimePeriod    Result Subtracting -1 year from 2021-01-01T00:00:00+00:00 will result in 1 year being added and the variable ($)DateTime being updated. Its text representation will be in the ISO 8601 Standard, which can be seen below:\n\"2022-01-01T00:00:00+00:00\"  Properties Date Time The Date Time to subtract the Time Period from.\nIts text representation will be in the ISO 8601 Standard (e.g. 2021-11-05T08:48:08.0307614+00:00).\nFor more information about Date and Time, please see Working with Dates and Time.\n         Data Type DateTimeOffset   Property Type InputOutput   Default Value ($)DateTime with DateTimeOffset value that has a text representation of 0001-01-01T00:00:00+00:00    Time Period The Time Period to subtract from the Date Time.\nTime Period can have positive and negative components where components are:\n Years Months Days Hours Minutes Seconds Milliseconds  When subtracting a Time Period, the block will first subtract years, followed by months, days, hours, minutes, seconds and finally milliseconds.\nWhen subtracting months, if the current day component is greater than the last day in the resultant month, it will update the day to the last day for that month (e.g. subtracting one month from 2021-02-28T23:59:59+00:00 will equate to 2021-01-31T23:59:59+00:00).\nFor more information about Date and Time, please see Working with Dates and Time.\n         Data Type TimePeriod   Property Type Input   Default Value ($)TimePeriod with value {\"Years\": 0, \"Months\": 0, \"Days\": 0, \"Hours\": 0, \"Minutes\": 0, \"Seconds\": 0, \"Milliseconds\": 0}    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     PropertyValueOutOfRangeException Thrown when subtracting Time Period from Date Time will result in the Date Time being less than 0001-01-01T00:00:00+00:00 or greater than 9999-12-31T23:59:59+00:00.    Remarks Dates and Time The default text representation of Date and Time will be in the ISO 8601 Standard (e.g. 2021-11-05T08:48:08.0307614+00:00).\nFor more information, please see Working with Dates and Time.\nOrder of calculations When subtracting a Time Period, the block will first subtract years, followed by months, days, hours, minutes, seconds and finally milliseconds.\nSubtraction of Months When subtracting months from the Date Time, if the current day component is greater than the last day in the resultant month, it will update the day to the last day for that month (e.g. subtracting one month from 2021-02-28T23:59:59+00:00 will equate to 2021-01-31T23:59:59+00:00).\nDaylight Savings This block copes with UTC time offsets but does not know anything about which time zone the Date Time represents; as a result it cannot take daylight savings into account as these are related to time zones rather than UTC time offsets.\n","categories":"","description":"Subtracts a Time Period to from specified Date Time.","excerpt":"Subtracts a Time Period to from specified Date Time.","ref":"/docs/reference/blocks/date-and-time/subtract-time-period/subtract-time-period-block/","tags":"","title":"Subtract Time Period"},{"body":"","categories":"","description":"Blocks related to working with Text.","excerpt":"Blocks related to working with Text.","ref":"/docs/reference/blocks/text/","tags":"","title":"Text"},{"body":"","categories":"","description":"Data types used for working with text.","excerpt":"Data types used for working with text.","ref":"/docs/reference/data-types/text/","tags":"","title":"Text"},{"body":"","categories":"","description":"Exceptions related to Text blocks","excerpt":"Exceptions related to Text blocks","ref":"/docs/reference/exceptions/text/","tags":"","title":"Text"},{"body":"Text Casing Common types of text casing There are many different types of text casing.\nThe table below lists some of the most common types of text casing:\n   Name Example Notes     lowercase \"this is lowercase\" All letters in all words are lower cased.   UPPERCASE \"THIS IS UPPERCASE\" All letters in all words are capitalized.   Title Case \"This Is Title Case\" First letter in all words is capitalized, all other letters are lower cased; except for words that are entirely upper cased, such as acronyms, which remain upper cased; spaces and punctuation are preserved.   camelCase \"thisIsCamelCase\" First letter in all words (except the first) is capitalized, all other letters are lower cased, and all spaces and punctuation are removed.   PascalCase \"ThisIsCamelCase\" First letter in all words is capitalized, all other letters are lower cased, and all spaces and punctuation are removed.    Culture Info Culture Info specifies the culture-specific casing rules used to determine how the case of text is changed.\nThe table below lists the most common supported culture info:\n   Name Text Value Description     Current Culture CultureInfo.CurrentCulture Used to compare text using culture-sensitive sort rules and the current culture. Case of the texts is considered when comparing.   Invariant Culture CultureInfo.InvariantCulture Used to compare text using culture-sensitive sort rules and the invariant culture. Case of the texts is considered when comparing.    TODO: See XYZ for a full list - link to microsoft full list\nFor more information about culture info, please see CultureInfo.\nTODO: Probably should link to fundamentals-\u003eculture\nTODO: When to use? If not sure what to choose?\nCurrent Culture For Current Culture, the casing rules used to determine how the case of text is changed are culture-sensitive and based on the culture that the flow execution is currently running as. The Current Culture will be the culture of the operating system the flow execution is running on.\nTODO: Best practices - all OSes in cluster should be installed with same OS culture and settings etc. - should also be time sync’d\nTODO: notes about current culture and a worked through example\nInvariant Culture For Invariant Culture, the casing rules used to determine how the case of text is changed are not culture-sensitive.\nTODO: notes about invariant culture and a worked through example\nTODO: From https://docs.microsoft.com/en-us/dotnet/api/system.globalization.textinfo.toupper?view=net-6.0\nIf a security decision depends on a string comparison or a case-change operation, the application should use the InvariantCulture to ensure that the behavior is consistent regardless of the culture settings of the system. However, the invariant culture must be used only by processes that require culture-independent results, such as system services. Otherwise, it produces results that might be linguistically incorrect or culturally inappropriate.\nFor more information on cultures, see CultureInfo.\n","categories":"","description":"This page describes the concept of Text Casing.","excerpt":"This page describes the concept of Text Casing.","ref":"/docs/reference/concepts/text-casing/","tags":"","title":"Text Casing"},{"body":"Text Encoding Overview TODO: Overview/summary\nTODO: Available encodings\nTODO: How to define them/use them // Different ways to specify encoding: // - Encoding encoding = Encoding.GetEncoding(20127); // - Encoding encoding = new ASCIIEncoding(); // - Encoding encoding = Encoding.ASCII;\nTODO: https://docs.microsoft.com/en-us/dotnet/standard/base-types/character-encoding-introduction\nBlocks that use Encoding TODO:\n","categories":"","description":"This page describes the concept of Text Encoding.","excerpt":"This page describes the concept of Text Encoding.","ref":"/docs/reference/concepts/text-encoding/","tags":"","title":"Text Encoding"},{"body":"Text Equality Overview TODO: Overview/summary\nComparison Types Comparison Types specify the rules used to determine whether two pieces of text match.\nThe table below lists the supported comparison types:\n   Name Text Value Numeric Value Description     Current Culture StringComparison.CurrentCulture 0 Used to compare text using culture-sensitive sort rules and the current culture. Case of the texts is considered when comparing.   Current Culture Ignore Case StringComparison.CurrentCultureIgnoreCase 1 Used to compare text using culture-sensitive sort rules and the current culture. Case of the texts is ignored when comparing.   Invariant Culture StringComparison.InvariantCulture 2 Used to compare text using culture-sensitive sort rules and the invariant culture. Case of the texts is considered when comparing.   Invariant Culture Ignore Case StringComparison.InvariantCultureIgnoreCase 3 Used to compare text using culture-sensitive sort rules and the invariant culture. Case of the texts is ignored when comparing.   Ordinal StringComparison.Ordinal 4 Used to compare text using ordinal sort rules. Case of the texts is considered when comparing.   Ordinal Ignore Case StringComparison.OrdinalIgnoreCase 5 Used to compare text using ordinal sort rules. Case of the texts is ignored when comparing.    For more information about comparison types, please see StringComparison.\nCurrent Culture TODO: notes about current culture and a worked through example\nInvariant Culture TODO: notes about invariant culture and a worked through example\nOrdinal TODO: notes about ordinal and a worked through example\nOrdinal Ignore Case TODO: https://docs.microsoft.com/en-us/dotnet/standard/base-types/best-practices-strings\nBlocks that use Comparison Types TODO:\n","categories":"","description":"This page describes the concept of Text Equality.","excerpt":"This page describes the concept of Text Equality.","ref":"/docs/reference/concepts/text-equality/","tags":"","title":"Text Equality"},{"body":"Text Formatting Overview TODO: Overview/summary\nFormat Templates TODO:\nFormat Parameters TODO:\n https://docs.microsoft.com/en-us/dotnet/api/system.string.format?view=net-6.0#Starting  TODO: Control formatting\n https://docs.microsoft.com/en-us/dotnet/api/system.string.format?view=net-6.0#control-formatting  TODO: Control spacing\n https://docs.microsoft.com/en-us/dotnet/api/system.string.format?view=net-6.0#control-spacing  TODO: Control alignment\n https://docs.microsoft.com/en-us/dotnet/api/system.string.format?view=net-6.0#control-alignment  TODO: Composite formatting\n  https://docs.microsoft.com/en-us/dotnet/api/system.string.format?view=net-6.0#the-format-method-in-brief\n  https://docs.microsoft.com/en-us/dotnet/api/system.string.format?view=net-6.0#the-format-method-in-brief\n  TODO: Format Item\n https://docs.microsoft.com/en-us/dotnet/api/system.string.format?view=net-6.0#the-format-item  TODO: Anything else relevant on formatting links above\nBlocks that use Formatting TODO:\nString Interpolation TODO: mention that convert object to text is close to behaviour of string interpolation, but not everything is covered - e.g. no expression support or indexing - recommendation is to use string.interpolation inline as more powerful and saves block licensing\n","categories":"","description":"This page describes the concept of Text Formatting.","excerpt":"This page describes the concept of Text Formatting.","ref":"/docs/reference/concepts/text/formatting/","tags":"","title":"Text Formatting"},{"body":"","categories":"","description":"Throw an exception.","excerpt":"Throw an exception.","ref":"/docs/reference/blocks/exceptions/throw-exception/","tags":"","title":"Throw Exception"},{"body":"\r\rThrow New Flow Exception (Cortex.Blocks.Exceptions.ThrowException.ThrowNewFlowExceptionBlock)\nDescription Throws a new FlowException with the specified Message, Category, Error Code, Details, Inner Exception and Help Link.\nAll properties are optional, and if not supplied will be set to the following default values:\n   Property Default Value     Message \"Exception of type 'Cortex.Exceptions.FlowException' was thrown.\"   Category null   Error Code 0   Details null   InnerException null   HelpLink https://v2022.docs.cortex-ia.com/docs/reference/exceptions/flowexception    Examples Throw new FlowException with full configuration This example will throw a new FlowException with all properties configured.\nProperties    Property Value Notes     Message ($)Message, with value \"Custom Message\" ($)Message is a variable of type String   Category ($)Category, with value \"Custom Category\" ($)Category is a variable of type String   Error Code ($)ErrorCode, with value 100 ($)ErrorCode is a variable of type Int32   Details ($)Details, with value {\"DetailsKey1\" : \"DetailsValue1\", \"DetailsKey2\" : \"DetailsValue2\"} ($)Details is a variable of type IDictionary\u003cString, String\u003e   InnerException ($)InnerException, with value ($)Exception containing another FlowException with default properties ($)InnerException is a variable of type FlowException   HelpLink ($)HelpLink, with value \"http://customdomain.com/customurl\" ($)HelpLink is a variable of type String    Result Throwing a new FlowException with properties configured as above will result in the following exception:\n Throw new FlowException with no configuration This example will throw a new FlowException with no configuration.\nProperties No properties are configured for this example.\nResult Throwing a new FlowException without configuring any of the block’s properties will result in the following exception:\n Properties Message A Message describing the exception that occurred.\nIf Message is not provided or is set to null, it will default to \"Exception of type 'Cortex.Exceptions.FlowException' was thrown.\".\n         Data Type String   Property Type Input   Default Value ($)Message with value null    Category A Category that can be used to categorise similar types of exception that has occurred (e.g. an AuthenticationError category may be set for exceptions relating to authentication issues). This can then be used for future decision making in the flow, or to assist in troubleshooting and reporting.\n         Data Type String   Property Type Input   Default Value ($)Category with value null    Error Code An Error Code that can be used to uniquely identify the type of exception (e.g. There may be multiple exceptions with the same AuthenticationError category set, such as InvalidCredentials, TokenExpired. In this case each exception can be assigned its own unique Error Code; AuthenticationError = 100 and InvalidCredentials = 101). This can then be used for future decision making in the flow, or to assist in troubleshooting and reporting.\nIf Error Code is not provided, it will default to 0.\n         Data Type Int32   Property Type Input   Default Value ($)ErrorCode with value 0    Details Details can be used to provide more detailed information about the exception. It can be any type of Object. This can then be used for future decision making in the flow, or to assist in troubleshooting and reporting.\n         Data Type dynamic   Property Type Input   Default Value ($)Details with value null    Inner Exception Inner Exception can be used to include another exception within the thrown exception (e.g. If the FlowException has been thrown as a result of handling another exception, then the handled exception can be included within the FlowException to add traceability).\n         Data Type Exception   Property Type Input   Default Value ($)InnerException with value null    Help Link A Help Link can be specified where further information can be found about the exception being thrown.\nIf Help Link is not provided or is set to null, it will default to a link to the FlowException page; please note this page will not provide any guidance on how to fix the solution specific exception.\n         Data Type String   Property Type Input   Default Value ($)HelpLink with value null    Exceptions No exceptions are thrown by the block.\nRemarks Null Message If Message is not provided or is set to null, it will default to \"Exception of type 'Cortex.Exceptions.FlowException' was thrown.\".\nNull Help Link If Help Link is not provided or is set to null, it will default to a link to the FlowException page, please note this page will not provide any guidance on how to fix the solution specific exception.\n","categories":"","description":"Throws a new FlowException with the specified message, category, error code, details, inner exception and help link.","excerpt":"Throws a new FlowException with the specified message, category, error code, details, inner exception and help link.","ref":"/docs/reference/blocks/exceptions/throw-exception/throw-new-flow-exception-block/","tags":"","title":"Throw New Flow Exception"},{"body":"Translation Errors Overview TODO: Overview/summary\n","categories":"","description":"This page describes the concept of Translation Errors.","excerpt":"This page describes the concept of Translation Errors.","ref":"/docs/reference/concepts/translation-errors/","tags":"","title":"Translation Errors"},{"body":"Troubleshooting Troubleshooting issues during installation Root certificate verification failed as no root certificate has been specified If the installation fails with “Root certificate verification failed as no root certificate has been specified.” it means that Windows has not got the trusted root installed for the provided X.509 certificate. This can be rectified by providing the path to a .pem file containing the root certificate in the “pemRootCertificatePath” property for each certificate in the “serverCertificates” and “adminCertificates” section of the configuration file. After adding this, the installation script can be re-run. The following steps can be taken to create a .pem file and re-run the installation (these instructions may differ slightly depending on the Certificate Authority):\n  In order to find out the issuer of the certificate, if not already known, the following script can be used, replacing the password for the pfx file and certificate path as necessary:\n$p = ConvertTo-SecureString -String \"pfxPassword\" -AsPlainText -Force $c = Get-PfxData -Password $p -FilePath \"C:\\Certificates\\serverCert.pfx\" $c | Format-List   This will give a list of “Other Certificates” and “End Certificates” contained in the .pfx file. The issuer can be found in the “Issuer” property of one of the “Other Certificates”. If there are more than one, it will be the one that does not appear as a “Subject” in any of the other items.\n  E.g. For a “Let’s Encrypt” certificate this will give the following results:\nOtherCertificates : {[Subject] CN=Let's Encrypt Authority X3, O=Let's Encrypt, C=US [Issuer] CN=DST Root CA X3, O=Digital Signature Trust Co. [Serial Number] 0A0141420000015385736A0B85ECA708 [Not Before] 17/03/2016 16:40:46 [Not After] 17/03/2021 16:40:46 [Thumbprint] E6A3B45B062D509B3382282D196EFE97D5956CCB } EndEntityCertificates : {[Subject] CN=*.domain.com [Issuer] CN=Let's Encrypt Authority X3, O=Let's Encrypt, C=US [Serial Number] 03D3B2E5E7D75175C25B250305650ABE849A [Not Before] 20/12/2019 16:27:36 [Not After] 19/03/2020 16:27:36 [Thumbprint] D61356405B8D4AA11C29AF3D20F2D834C1A3039F }   In this case, the root certificate is “DST Root CA X3”.\n  In a search engine, search for the CN of the issuer and one of the results should lead to a download of a .pem file or to a page with the certificate on it, which can then be copied and saved into a file with a .pem extension. Often, searching the issuer of the EndEntityCertificate, in the above case “Let’s Encrypt”, will also work.\n  E.g. for “Let’s Encrypt”, the results of the search for “DST Root CA X3” leads to “https://www.identrust.com/dst-root-ca-x3” which provides the following text to be saved as a .pem file:\n-----BEGIN CERTIFICATE----- MIIDSjCCAjKgAwIBAgIQRK+wgNajJ7qJMDmGLvhAazANBgkqhkiG9w0BAQUFADA/ MSQwIgYDVQQKExtEaWdpdGFsIFNpZ25hdHVyZSBUcnVzdCBDby4xFzAVBgNVBAMT DkRTVCBSb290IENBIFgzMB4XDTAwMDkzMDIxMTIxOVoXDTIxMDkzMDE0MDExNVow PzEkMCIGA1UEChMbRGlnaXRhbCBTaWduYXR1cmUgVHJ1c3QgQ28uMRcwFQYDVQQD Ew5EU1QgUm9vdCBDQSBYMzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEB AN+v6ZdQCINXtMxiZfaQguzH0yxrMMpb7NnDfcdAwRgUi+DoM3ZJKuM/IUmTrE4O rz5Iy2Xu/NMhD2XSKtkyj4zl93ewEnu1lcCJo6m67XMuegwGMoOifooUMM0RoOEq OLl5CjH9UL2AZd+3UWODyOKIYepLYYHsUmu5ouJLGiifSKOeDNoJjj4XLh7dIN9b xiqKqy69cK3FCxolkHRyxXtqqzTWMIn/5WgTe1QLyNau7Fqckh49ZLOMxt+/yUFw 7BZy1SbsOFU5Q9D8/RhcQPGX69Wam40dutolucbY38EVAjqr2m7xPi71XAicPNaD aeQQmxkqtilX4+U9m5/wAl0CAwEAAaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAOBgNV HQ8BAf8EBAMCAQYwHQYDVR0OBBYEFMSnsaR7LHH62+FLkHX/xBVghYkQMA0GCSqG SIb3DQEBBQUAA4IBAQCjGiybFwBcqR7uKGY3Or+Dxz9LwwmglSBd49lZRNI+DT69 ikugdB/OEIKcdBodfpga3csTS7MgROSR6cz8faXbauX+5v3gTt23ADq1cEmv8uXr AvHRAosZy5Q6XkjEGB5YGV8eAlrwDPGxrancWYaLbumR9YbK+rlmM6pZW87ipxZz R8srzJmwN0jP41ZL9c8PDHIyh8bwRLtTcm1D9SZImlJnt1ir/md2cXjbDaJWFBM5 JDGFoqgCWjBH4d1QB7wCCZAA62RjYJsWvIjJEubSfZGL+T0yjWW06XyxV3bqxbYo Ob8VZRzI9neWagqNdwvYkQsEjgfbKbYK7p2CNTUQ -----END CERTIFICATE-----   After saving the .pem file, transfer it to the same directory as other installation certificates.\n  Modify the following, highlighted sections of the installation configuration file like so:\n\"serverCertificates\": { \"serverCert\": { \"pfxCertificatePath\": \"C:\\\\Certificates\\\\wildCardCert.pfx\", \"pfxCertificatePassword\": \"pfxPassword\", \"pemRootCertificatePath\": \"C:\\\\Certificates\\\\rootCert.pem\" } }, \"adminCertificates\": { \"loadBalancerCert\": { \"pfxCertificatePath\": \"C:\\\\Certificates\\\\lbCert.pfx\", \"pfxCertificatePassword\": \"pfxPassword\", \"pemRootCertificatePath\": \"C:\\\\Certificates\\\\lbRootCert.pem\" } }   Run the installation script again.\n  Troubleshooting issues after installation Cortex Innovation features not visible in Cortex Gateway Check that the “Feature Flags” Guid in the “parameters.xml” file used for installing Cortex Gateway is correct. If it is not, update it and reinstall Cortex Gateway or update the value in the “web.config” file and restart the website. If the value is correct, please contact Cortex Support for assistance.\nCortex Innovation blocks not visible in Cortex Studio Check that the “Dot NET flow debugger Endpoint” URL in the “parameters.xml” file used for installing Cortex Gateway is correct pay particular attention to the protocol - it should usually be “https”. If it is not, update it and reinstall Cortex Gateway or update the value in the “web.config” file and restart the website.\nEnsure that the flow debugger service is running. Open IIS, click on “Application Pools” and ensure there is a “debugger” app pool which is showing that it associated with 1 application. If not, go back to the Cortex Flow Debugger Service installation steps and ensure that all steps were followed correctly.\nIf no misconfiguration can be found, the service log files may contain more information. These can be found on the Web Application Server at:\n %ProgramData%/Cortex/Cortex Flow Debugger  If the issues cannot be resolved, please contact Cortex Support for assistance.\nCannot publish a package Check that the “Service Fabric Api Gateway Endpoint”, “Service Fabric Using Self Signed Certificates”, “Service Fabric ApiGateway Basic Auth Username” and “Service Fabric ApiGateway Basic Auth Password” in the “parameters.xml” file used for installing Cortex Gateway are correct. If any of them are not, update them and reinstall Cortex Gateway or update the value in the “web.config” file and restart the website. If the value is correct, please contact Cortex Support for assistance.\nEnsure that the HA Services are healthy by following these steps:\n  Log on to one of the Application servers and open a web browser.\n  Navigate to https://ha-server.domain.com:9080/Explorer, where “ha-server.domain.com” is the fully qualified domain name of any server within the HA cluster. Replace 9080 with new httpGatewayEndpointPort value if it was changed during configuration.\nIf page access is denied it may be necessary to import the server certificate used in installation to the Current User certificate store (usually achieved by double clicking on it and following the wizard). If using self-signed certificates, the certificate can be retrieved by using the “Manage Computer Certificates” tool in Windows to export the CortexServerCertificate from the Personal store and then importing it to the Current User store by double-clicking on it and following the wizard. The browser may need to be restarted before the site can be accessed\nThe screen should resemble that in the following figure, all services should have Health State = OK and Status = Active. All instances below the service should have Health State = OK and Status = Ready.\n\rHealthy Service Fabric Explorer\r\r\rIf any warning triangles appear, wait for 5 minutes or so as the cluster may still be starting up. If the cluster looks OK, ignore the rest of this step. If the warnings persist or anything on the screen goes red, use the filter buttons to find the individual elements which have errors or warnings. Warnings should not be ignored as they can indicate that the service can’t start but is still in the retry phase. If no useful message can be seen here, the service log files may contain more information.\n  If no solution can be found, please contact Cortex Support for assistance.\nManaging RabbitMQ There may be times when the logs provided by the Cortex Services and the errors displayed in Service Fabric Explorer are not enough to debug an issue that is occurring on the system. This can be due to RabbitMQ being a state where it can’t send the messages between services. To check that RabbitMQ is working as expected, remote desktop to an Application Server and navigate to https://ha-server1.domain.com:15671, replacing ha-server1.domain.com with the FQDN of one of the Application Servers. Sign in with username ‘administrator’ and the RabbitMQ password provided during the Application Server installation. The following should be displayed in the overview tab for a healthy cluster:\n\rHealthy RabbitMQ status.\r\r\rNote\rThe username and password are not secure, but the RabbitMQ manager will only allow you to connect from localhost so it is not accessible to anyone who does not have remote desktop access.\r\rIf there are any unhealthy nodes (red) you may need to restart the RabbitMQ Windows service on each of the nodes that is erroring. These can be restarted in any order, but they must be restarted one at a time; wait for the node in the RabbitMQ explorer to be green before restarting the next one (you may need to refresh the browser).\n","categories":"","description":"Information on troubleshooting Cortex Innovation installations.\n","excerpt":"Information on troubleshooting Cortex Innovation installations.\n","ref":"/docs/getting-started/on-premise/advanced/ha-install-troubleshooting/","tags":"","title":"Troubleshooting"},{"body":"Variable Scopes What is a Scope? Create a Variable in a certain Scope Change the scope of a variable ","categories":"","description":"The page provides guidance on creating and working with variables in different scopes","excerpt":"The page provides guidance on creating and working with variables in different scopes","ref":"/docs/reference/concepts/fundamentals/variables/variable-scopes/","tags":"","title":"Variable Scopes"},{"body":"","categories":"","description":"Blocks related to working with Variables.","excerpt":"Blocks related to working with Variables.","ref":"/docs/reference/blocks/variables/","tags":"","title":"Variables"},{"body":"","categories":"","description":"Wait for certain events to occur (i.e. a duration to pass).","excerpt":"Wait for certain events to occur (i.e. a duration to pass).","ref":"/docs/reference/blocks/schedules/wait-for/","tags":"","title":"Wait For"},{"body":"\r\rWait For Duration (Cortex.Blocks.Schedules.WaitFor.WaitForDurationBlock)\nDescription Waits for a specified Duration.\nExamples Wait for duration This example will wait for 30 seconds.\nProperties    Property Value Notes     Duration ($)Duration, with value of {\"Years\": 0, \"Months\": 0, \"Days\": 0, \"Hours\": 0, \"Minutes\": 0, \"Seconds\": 30, \"Milliseconds\": 0} ($)Duration is a variable of type TimePeriod    Result The block will wait for 30 seconds before completing, at which stage the flow execution will proceed to the next block.\n Properties Duration The Duration to wait for.\nDuration can have positive and negative components where components are:\n Years Months Days Hours Minutes Seconds Milliseconds  When waiting for Duration, the block will calculate the date time to wait until by adding the Duration to the current date time. It will first add years, followed by months, days, hours, minutes, seconds and finally milliseconds.\nWhen adding months, if the current day component is greater than the last day in the resultant month, it will update the day to the last day for that month (e.g. adding one month onto 2021-01-31T23:59:59+00:00 will equate to 2021-02-28T23:59:59+00:00).\n         Data Type TimePeriod   Property Type Input   Default Value ($)Duration with value {\"Years\": 0, \"Months\": 0, \"Days\": 0, \"Hours\": 0, \"Minutes\": 0, \"Seconds\": 0, \"Milliseconds\": 0}    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     PropertyValueOutOfRangeException Thrown when Duration is negative (i.e. the sum of the components of Duration is less than 0), or any component (i.e. Years, Months, Days, Hours, Minutes, Seconds or Milliseconds) is greater than 2147483647.    Remarks No remarks for the block.\n","categories":"","description":"Waits for a specified time period (Years, Months, Days, Hours, Minutes, Seconds and Milliseconds).","excerpt":"Waits for a specified time period (Years, Months, Days, Hours, Minutes, Seconds and Milliseconds).","ref":"/docs/reference/blocks/schedules/wait-for/wait-for-duration-block/","tags":"","title":"Wait For Duration"},{"body":"Structures Keys Items ","categories":"","description":"Information related to working with collections such as Lists, Dictionaries and Structures.","excerpt":"Information related to working with collections such as Lists, Dictionaries and Structures.","ref":"/docs/reference/concepts/collections/","tags":"","title":"Working with Collections"},{"body":"Working with Data Sources Overview TODO: Overview/summary\n Supported Data Sources Connection Strings  Currently SQL Server is the only supported data source.\n","categories":"","description":"This page gives information about working with Data Sources.","excerpt":"This page gives information about working with Data Sources.","ref":"/docs/reference/concepts/working-with-data-sources/","tags":"","title":"Working with Data Sources"},{"body":"","categories":"","description":"Information related to working with Date and Time.","excerpt":"Information related to working with Date and Time.","ref":"/docs/reference/concepts/date-and-time/","tags":"","title":"Working with Date and Time"},{"body":"Working with Dates and Time Overview TODO: Overview/summary\n","categories":"","description":"This page gives information about working with Dates and Time.","excerpt":"This page gives information about working with Dates and Time.","ref":"/docs/reference/concepts/working-with-dates-and-time/","tags":"","title":"Working with Dates and Time"},{"body":"","categories":"","description":"Information related to working with Exceptions.","excerpt":"Information related to working with Exceptions.","ref":"/docs/reference/concepts/exceptions/","tags":"","title":"Working with Exceptions"},{"body":"TODO: WOrking with Files and Folders:\n https://docs.microsoft.com/en-us/dotnet/standard/io/ https://docs.microsoft.com/en-us/dotnet/standard/io/file-path-formats https://docs.microsoft.com/en-us/dotnet/standard/io/handling-io-errors https://docs.microsoft.com/en-us/dotnet/standard/io/common-i-o-tasks  ","categories":"","description":"Information related to working with Files and Folders.","excerpt":"Information related to working with Files and Folders.","ref":"/docs/reference/concepts/files-and-folders/","tags":"","title":"Working with Files and Folders"},{"body":"TODO: Working with Numbers - https://docs.microsoft.com/en-us/dotnet/standard/base-types/parsing-numeric\n","categories":"","description":"Information related to working with Numbers.","excerpt":"Information related to working with Numbers.","ref":"/docs/reference/concepts/numbers/","tags":"","title":"Working with Numbers"},{"body":"","categories":"","description":"Information related to working with References.","excerpt":"Information related to working with References.","ref":"/docs/reference/concepts/references/","tags":"","title":"Working with References"},{"body":"TODO: Working with Text - https://docs.microsoft.com/en-us/dotnet/standard/base-types/basic-string-operations\n","categories":"","description":"Information related to working with Text.","excerpt":"Information related to working with Text.","ref":"/docs/reference/concepts/text/","tags":"","title":"Working with Text"},{"body":"","categories":"","description":"Information related to working with Variables.","excerpt":"Information related to working with Variables.","ref":"/docs/reference/concepts/fundamentals/variables/","tags":"","title":"Working with Variables"},{"body":"TODO:\n Variables  Inferred Scope Defaut Value Is Input Variable? Is Output Variable? etc.    ","categories":"","description":"Information related to working with Variables.","excerpt":"Information related to working with Variables.","ref":"/docs/reference/concepts/variables/","tags":"","title":"Working with Variables"},{"body":"","categories":"","description":"Blocks that represent a new workspace.","excerpt":"Blocks that represent a new workspace.","ref":"/docs/reference/blocks/workspaces/workspace/","tags":"","title":"Workspace"},{"body":"\r\rWorkspace (Cortex.Blocks.Workspaces.Workspace.WorkspaceBlock)\nDescription This block represents a new workspace; when a flow execution reaches this block it will move to the Start Workspace block within this block’s workspace; each workspace has its own scope.\nThe Workspace block can be used to orginise block logic into smaller steps with distinct functions. When a new Workspace block is placed on a flow, it will contain a Start Workspace and End Workspace block within its workspace.\nIf a Workspace block is copied and pasted its workspace is also copied, along with all blocks and variables within its scope.\nThe block has no block specific properties, but it does have the Description property that is common to all blocks. This allows users to give each block a description; typically this will be left blank for this block. Any description given will become the name for this block’s scope\nA breakpoint can be added to this block when debugging.\nExamples No examples for the block.\nProperties No properties for the block, other than the Description property that is common to all blocks.\nExceptions No exceptions are thrown by the block.\nRemarks Block Restrictions A workspace can contain any number of blocks. The only restrictions within a workspace are that there can only be one Start Workspace block and one Handle Workspace Exception block within a workspace.\nStarting a flow that contains more than one of the restricted blocks within a workspace will cause a Translation Error to occur.\nUnhandled Exceptions If an exception thrown by a block is not handled by any connected Handle Block Exception blocks, it will be passed to the Handle Workspace Exception block on the same workspace.\nIf the workspace does not contain a Handle Workspace Exception block it will be rethrown by the Workspace block the workspace belongs to.\nThis process repeats until:\n The exception is handled, or The exception reaches the flow’s top-level workspace, is not handled by any Handle Block Exception blocks and the top-level workspace does not contain a Handle Workspace Exception block. At this stage, the exception is handled by the flow’s Handle Flow Exception block.  If an exception occurs within the workspace of the Handle Flow Exception block and is not handled, the flow will end with a status of Error.\nFor more information about chaining of exception handling blocks and passing of exceptions, please see Exception Handling.\nWorkspace Scope Each workspace has its own scope; as a result, variables can be defined that only exist and are accessible in this workspace and any of its sub-workspaces. On exiting a workspace any variables defined for the workspace’s scope are deleted.\nFor information about variables and scope, please see Working with Variables.\n","categories":"","description":"Represents a new workspace.","excerpt":"Represents a new workspace.","ref":"/docs/reference/blocks/workspaces/workspace/workspace-block/","tags":"","title":"Workspace"},{"body":"","categories":"","description":"Blocks used to organise flows and group related logic and actions together.","excerpt":"Blocks used to organise flows and group related logic and actions together.","ref":"/docs/reference/blocks/workspaces/","tags":"","title":"Workspaces"},{"body":"\r\rWrite All Lines (Cortex.Blocks.FilesAndFolders.WriteFile.WriteAllLinesBlock)\nDescription Writes all specified Lines to the end of the file at the given File Path, with an option to explicitly specify the Encoding to write the file as if needed.\nAn option can also be specified to Overwrite rather than append to the file.\nExamples Write all lines, appending to the end of the file This example will append [\"New Line 1\", \"New Line 2\"] to \"C:\\Source\\File.txt\", using UTF-8 encoding without a byte order mark.\nIn this example assume \"C:\\Source\\File.txt\" contains 2 lines:\nOriginal Line 1 Original Line 2 Properties    Property Value Notes     File Path ($)FilePath, with value @\"C:\\Source\\File.txt\" ($)FilePath is a variable of type String   Lines ($)Lines, with value [\"New Line 1\", \"New Line 2\"] ($)Lines is a variable of type IEnumerable\u003cString\u003e   Overwrite ($)Overwrite, with value false ($)Overwrite is a variable of type Boolean   Encoding ($)Encoding, with value null ($)Encoding is a variable of type Encoding    Result Writing [\"New Line 1\", \"New Line 2\"] to \"C:\\Source\\File.txt\" results in the content being updated to the following:\nOriginal Line 1 Original Line 2 New Line 1 New Line 2  Write all lines, overwriting the file content This example will overwrite the content of \"C:\\Source\\File.txt\" with [\"New Line 1\", \"New Line 2\"], using UTF-8 encoding without a byte order mark.\nIn this example assume \"C:\\Source\\File.txt\" contains 2 lines:\nOriginal Line 1 Original Line 2 Properties    Property Value Notes     File Path ($)FilePath, with value @\"C:\\Source\\File.txt\" ($)FilePath is a variable of type String   Lines ($)Lines, with value [\"New Line 1\", \"New Line 2\"] ($)Lines is a variable of type IEnumerable\u003cString\u003e   Overwrite ($)Overwrite, with value true ($)Overwrite is a variable of type Boolean   Encoding ($)Encoding, with value null ($)Encoding is a variable of type Encoding    Result Overwriting \"C:\\Source\\File.txt\" with [\"New Line 1\", \"New Line 2\"] results in the content being updated to the following:\nNew Line 1 New Line 2  Properties File Path The File Path to write all Lines to.\nThe File Path is case-insensitive, cannot contain any wildcard characters, and any trailing spaces will be automatically removed.\nIf the file does not exist at the File Path, a new file is created, and any non-existing folders will also be created.\nIf the file already exists at the File Path and Overwrite is:\n true, the Lines overwrite the existing file content. false, the Lines are appended to the existing file content.  For information about the supported file path formats (i.e. absolute, relative, UNC etc.) and examples of each, please see File \u0026 Folder Paths.\n         Data Type String   Property Type Input   Default Value ($)FilePath with value null    Lines The Lines to write to the file.\nLines can be null or empty (i.e. \"\").\nIf Lines is null or empty (i.e. \"\") and Overwrite is:\n true, a blank file will be written. false, nothing is written.  If Lines contains an entry that is null or empty (i.e. \"\") a blank line will be written for that entry.\n         Data Type IEnumerable\u003cString\u003e   Property Type Input   Default Value ($)Lines with value []    Overwrite Option to Overwrite the file content with the Lines, rather than appending them.\nBy default, this is set to false to avoid implicit and accidental overwriting of the file content.\n         Data Type Boolean   Property Type Input   Default Value ($)Overwrite with value false    Encoding Option to specify the Encoding that should be used to write the file.\nIf the Encoding is left as null, the Lines will be written using UTF-8 encoding without a byte order mark.\nFor information about encoding, examples of available encodings and using them, please see Text Encoding.\n         Data Type String   Property Type Input   Default Value ($)Encoding with value null    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     InvalidPropertyValueException Thrown when Encoding is invalid (e.g. Encoding.GetEncoding(-1)).   OperationFailedException The File Path points to a folder.    The File Path contains leading spaces.    The File Path contains only whitespace, or the NUL character (i.e. \\0), or contains one or more invalid characters (i.e. \", *, ?, |, \u003c, \u003e, :, \\, /) in any file or folder names.    The File Path exceeds the system-defined maximum length (typically 32,767 characters).    The File Path is invalid (for example, it is on an unmapped drive).    The file at the specified File Path is hidden or is a System file, and overwrite is true.    The file at the specified File Path is a read-only file.    The user the flow is executing as does not have the required permissions to write to the file.    An unexpected error occurs when writing the file.   PropertyEmptyException Thrown when File Path is empty (i.e. \"\").   PropertyNullException Thrown when File Path is null.    Remarks File Paths For information about the supported file path formats (i.e. absolute, relative, UNC etc.) and examples of each, including how it is determined if a path points to a folder or a file, please see File \u0026 Folder Paths.\nFile Path needs escaping File Path requires \\ characters to be escaped, otherwise each unescaped \\ will be reported as an Invalid property value message when trying to debug the flow.\nEscaping can be done in two ways:\n Escaping the \\ character with another \\ character (e.g. \"C:\\\\Source\\\\File.txt\"), or Prepending an @ character before the start of the File Path (e.g. @\"C:\\Source\\File.txt\").  Encoding of text For information about encoding of text, examples of available encodings and using them, please see Text Encoding.\n","categories":"","description":"Writes all specified lines to a file at the given file path.","excerpt":"Writes all specified lines to a file at the given file path.","ref":"/docs/reference/blocks/files-and-folders/write-file/write-all-lines-block/","tags":"","title":"Write All Lines"},{"body":"\r\rWrite All Text (Cortex.Blocks.FilesAndFolders.WriteFile.WriteAllTextBlock)\nDescription Writes all specified Text to the end of the file at the given File Path, with an option to explicitly specify the Encoding to write the file as if needed.\nAn option can also be specified to Overwrite rather than append to the file.\nExamples Write all text, appending to the end of the file This example will append \"New Line 1\\r\\n\\New Line 2\" to \"C:\\Source\\File.txt\", using UTF-8 encoding without a byte order mark.\nIn this example assume \"C:\\Source\\File.txt\" contains the following text:\nOriginal Line 1 Original Line 2 Properties    Property Value Notes     File Path ($)FilePath, with value @\"C:\\Source\\File.txt\" ($)FilePath is a variable of type String   Text ($)Text, with value \"New Line 1\\r\\n\\New Line 2\" ($)Text is a variable of type String   Overwrite ($)Overwrite, with value false ($)Overwrite is a variable of type Boolean   Encoding ($)Encoding, with value null ($)Encoding is a variable of type Encoding    Result Writing \"New Line 1\\r\\n\\New Line 2\" to \"C:\\Source\\File.txt\" results in the content being updated to the following:\nOriginal Line 1 Original Line 2 New Line 1 New Line 2  Write all text, overwriting the file content This example will overwrite the content of \"C:\\Source\\File.txt\" with \"New Line 1\\r\\n\\New Line 2\", using UTF-8 encoding without a byte order mark.\nIn this example assume \"C:\\Source\\File.txt\" contains the following text:\nOriginal Line 1 Original Line 2 Properties    Property Value Notes     File Path ($)FilePath, with value @\"C:\\Source\\File.txt\" ($)FilePath is a variable of type String   Text ($)Text, with value \"New Line 1\\r\\n\\New Line 2\" ($)Text is a variable of type String   Overwrite ($)Overwrite, with value true ($)Overwrite is a variable of type Boolean   Encoding ($)Encoding, with value null ($)Encoding is a variable of type Encoding    Result Overwriting \"C:\\Source\\File.txt\" with \"New Line 1\\r\\n\\New Line 2\" results in the content being updated to the following:\nNew Line 1 New Line 2  Properties File Path The File Path to write the Text to.\nThe File Path is case-insensitive, cannot contain any wildcard characters, and any trailing spaces will be automatically removed.\nIf the file does not exist at the File Path, a new file is created, and any non-existing folders will also be created.\nIf the file already exists at the File Path and Overwrite is:\n true, the Text overwrites the existing file content. false, the Text is appended to the existing file content.  For information about the supported file path formats (i.e. absolute, relative, UNC etc.) and examples of each, please see File \u0026 Folder Paths.\n         Data Type String   Property Type Input   Default Value ($)FilePath with value null    Text The Text to write to the file.\nText can be null or empty (i.e. \"\").\nIf Text is null or empty (i.e. \"\") and Overwrite is:\n true, a blank file will be written. false, nothing is written.           Data Type String   Property Type Input   Default Value ($)Text with value []    Overwrite Option to Overwrite the file content with the Text, rather than appending it.\nBy default, this is set to false to avoid implicit and accidental overwriting of the file content.\n         Data Type Boolean   Property Type Input   Default Value ($)Overwrite with value false    Encoding Option to specify the Encoding that should be used to write the file.\nIf the Encoding is left as null, the Text will be written using UTF-8 encoding without a byte order mark.\nFor information about encoding, examples of available encodings and using them, please see Text Encoding.\n         Data Type String   Property Type Input   Default Value ($)Encoding with value null    Exceptions The exceptions thrown by the block can be found below:\n   Name Description     InvalidPropertyValueException Thrown when Encoding is invalid (e.g. Encoding.GetEncoding(-1)).   OperationFailedException The File Path points to a folder.    The File Path contains leading spaces.    The File Path contains only whitespace, or the NUL character (i.e. \\0), or contains one or more invalid characters (i.e. \", *, ?, |, \u003c, \u003e, :, \\, /) in any file or folder names.    The File Path exceeds the system-defined maximum length (typically 32,767 characters).    The File Path is invalid (for example, it is on an unmapped drive).    The file at the specified File Path is hidden or is a System file, and overwrite is true.    The file at the specified File Path is a read-only file.    The user the flow is executing as does not have the required permissions to write to the file.    An unexpected error occurs when writing the file.   PropertyEmptyException Thrown when File Path is empty (i.e. \"\").   PropertyNullException Thrown when File Path is null.    Remarks File Paths For information about the supported file path formats (i.e. absolute, relative, UNC etc.) and examples of each, including how it is determined if a path points to a folder or a file, please see File \u0026 Folder Paths.\nFile Path needs escaping File Path requires \\ characters to be escaped, otherwise each unescaped \\ will be reported as an Invalid property value message when trying to debug the flow.\nEscaping can be done in two ways:\n Escaping the \\ character with another \\ character (e.g. \"C:\\\\Source\\\\File.txt\"), or Prepending an @ character before the start of the File Path (e.g. @\"C:\\Source\\File.txt\").  Encoding of text For information about encoding of text, examples of available encodings and using them, please see Text Encoding.\n","categories":"","description":"Writes all specified text to a file at the given file path.","excerpt":"Writes all specified text to a file at the given file path.","ref":"/docs/reference/blocks/files-and-folders/write-file/write-all-text-block/","tags":"","title":"Write All Text"},{"body":"","categories":"","description":"Write the content of a file.","excerpt":"Write the content of a file.","ref":"/docs/reference/blocks/files-and-folders/write-file/","tags":"","title":"Write File"},{"body":"","categories":"","description":"Blocks related to working with Xml.","excerpt":"Blocks related to working with Xml.","ref":"/docs/reference/blocks/xml/","tags":"","title":"Xml"},{"body":"","categories":"","description":"Exceptions related to Xml blocks.","excerpt":"Exceptions related to Xml blocks.","ref":"/docs/reference/exceptions/xml/","tags":"","title":"Xml"},{"body":"XmlSerializationException (Cortex.Exceptions.Xml.XmlSerializationException)\nTODO: The exception thrown when…\nThe format of the exception message is as follows:\nTODO: Format How to fix TODO: How to fix…\n","categories":"","description":"The exception thrown when an Xml Serialization errors occur.","excerpt":"The exception thrown when an Xml Serialization errors occur.","ref":"/docs/reference/exceptions/xml/xmlserializationexception/","tags":"","title":"XmlSerializationException"}]